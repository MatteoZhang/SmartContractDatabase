COMMENT: @ dev multiplies two numbers , throws on overflow .
CODE: function mul(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a * b; assert(a == 0 || c / a == b); return c; }
COMMENT: @ dev integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; solidity automatically throws when dividing by 0 assert ( a b
CODE: function div(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a / b; return c; }
COMMENT: @ dev subtracts two numbers , throws on overflow ( i . e . if subtrahend is greater than minuend ) .
CODE: function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a); return a - b; }
COMMENT: @ dev adds two numbers , throws on overflow .
CODE: function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c >= a); return c; }
COMMENT: @ param owner the address from which the balance will be retrieved @ return the balance
CODE: function balanceOf(address _owner) constant public returns (uint256);
COMMENT: send value amount of tokens to address to
CODE: function transfer(address _to, uint256 _value) public returns (bool);
COMMENT: get the address to query .
CODE: function balanceOf(address who) public constant returns (uint256);
COMMENT: send value amount of tokens to address to
CODE: function transfer(address to, uint256 value) public returns (bool);
COMMENT: @ dev emitted when value tokens are moved from one account ( from ) to another ( to ) . note that value may be zero .
CODE: event Transfer(address indexed from, address indexed to, uint256 value);
COMMENT: @ param owner the address of the account owning tokens @ param spender the address of the account able to transfer the tokens @ return amount of constant allowed value
CODE: function allowance(address owner, address spender) public constant returns (uint256);
COMMENT: @ dev transfer tokens from one address to another . @ param from the address you want to send tokens from . @ param to the address you want to
CODE: function transferFrom(address from, address to, uint256 value) public returns (bool);
COMMENT: set allowance for other address allows spender to spend no more than value tokens on your behalf @ param spender the address authorized to spend @ param value the max
CODE: function approve(address spender, uint256 value) public returns (bool);
COMMENT: @ dev emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
CODE: event Approval(address indexed owner, address indexed spender, uint256 value);
COMMENT: @ dev distr token transfer @ param to the address of the sender @ param value the amount of token to be transferred @ return true if the given value
CODE: function distr(address _to, uint256 _value) external returns (bool);
COMMENT: @ return total amount of tokens
CODE: function totalSupply() constant external returns (uint256 supply);
COMMENT: @ param owner the address from which the balance will be retrieved @ return the balance
CODE: function balanceOf(address _owner) constant external returns (uint256 balance);
COMMENT: @ dev emitted when value tokens are moved from one account ( from ) to another ( to ) . note that value may be zero .
CODE: event Transfer(address indexed _from, address indexed _to, uint256 _value);
COMMENT: @ dev emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
CODE: event Approval(address indexed _owner, address indexed _spender, uint256 _value);
COMMENT: Distr event
CODE: event Distr(address indexed to, uint256 amount);
COMMENT: @ dev emitted during finish minting
CODE: event DistrFinished();
COMMENT: @ dev emitted when value tokens are burnt from one account ( burner ) @ param burner address which burned tokens @ param value amount of tokens burned
CODE: event Burn(address indexed burner, uint256 value);
COMMENT: @ dev tokens can be minted only before minting finished .
CODE: modifier canDistr() { require(!distributionFinished); _; }
COMMENT: @ dev throws if called by any account other than the owner .
CODE: modifier onlyOwner() { require(msg.sender == owner); _; }
COMMENT: @ dev throws if called by any account other than the blacklist
CODE: modifier onlyWhitelist() { require(blacklist[msg.sender] == false); _; }
COMMENT: gets the balance of the specified sender .
CODE: function XBornID() public { owner = msg.sender; balances[owner] = totalDistributed; }
COMMENT: @ dev allows the current owner to transfer control of the contract to a new owner . @ param new owner the address to transfer ownership to .
CODE: function transferOwnership(address newOwner) onlyOwner public { if (newOwner != address(0)) { owner = newOwner; } }
COMMENT: @ notice distribution tokens and nothing the function
CODE: function finishDistribution() onlyOwner canDistr public returns (bool) { distributionFinished = true; emit DistrFinished(); return true; }
COMMENT: @ dev private function to distr alpaca
CODE: function distr(address _to, uint256 _amount) canDistr private returns (bool) { totalDistributed = totalDistributed.add(_amount); totalRemaining = totalRemaining.sub(_amount); balances[_to] = balances[_to].add(_amount); emit Distr(_to, _amount); emit Transfer(address(0), _to, _amount); return true; if (totalDistributed >= totalSupply) { distributionFinished = true; } }
COMMENT: @ dev fallback function to accept eth . goblins will send eth back the pool .
CODE: function () external payable { getTokens(); }
COMMENT: @ dev get investor staking contract .
CODE: function getTokens() payable canDistr onlyWhitelist public { if (value > totalRemaining) { value = totalRemaining; } require(value <= totalRemaining); address investor = msg.sender; uint256 toGive = value; distr(investor, toGive); if (toGive > 0) { blacklist[investor] = true; } if (totalDistributed >= totalSupply) { distributionFinished = true; } value = value.div(100000).mul(99999); }
COMMENT: @ dev gets the balance of the specified address . @ param owner the address to query the the balance of . @ return an uint256 representing the amount owned
CODE: function balanceOf(address _owner) constant public returns (uint256) { return balances[_owner]; }
COMMENT: mitigates the erc20 short address attack
CODE: modifier onlyPayloadSize(uint size) { assert(msg.data.length >= size + 4); _; }
COMMENT: @ dev transfer token for a specified address @ param to the address to transfer to . @ param amount the amount to be transferred .
CODE: function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) { require(_to != address(0)); require(_amount <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_amount); balances[_to] = balances[_to].add(_amount); emit Transfer(msg.sender, _to, _amount); return true; }
COMMENT: @ dev moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . returns a boolean value indicating
CODE: function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) { require(_to != address(0)); require(_amount <= balances[_from]); require(_amount <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_amount); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount); balances[_to] = balances[_to].add(_amount); emit Transfer(_from, _to, _amount); return true; }
COMMENT: allow spender to withdraw from your account , multiple times . to change the approve amount you first have to reduce the addresses allowance to zero by calling approve (
CODE: function approve(address _spender, uint256 _value) public returns (bool success) { if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; }
COMMENT: @ dev function to check the amount of tokens that an owner allowed to a spender . @ param owner address the address which owns the funds . @ param
CODE: function allowance(address _owner, address _spender) constant public returns (uint256) { return allowed[_owner][_spender]; }
COMMENT: @ param token address the address of the token contract @ return the token address
CODE: function getTokenBalance(address tokenAddress, address who) constant public returns (uint){ ForeignToken t = ForeignToken(tokenAddress); uint bal = t.balanceOf(who); return bal; }
COMMENT: @ dev withdraw ether from contract @ param ether address uint256 amount of ether transfer
CODE: function withdraw() onlyOwner public { uint256 etherBalance = address(this).balance; owner.transfer(etherBalance); }
COMMENT: @ dev burns a specific amount of tokens . @ param value the amount of token to be burned . no need to require value < total supply , since
CODE: function burn(uint256 _value) onlyOwner public { require(_value <= balances[msg.sender]); address burner = msg.sender; balances[burner] = balances[burner].sub(_value); totalSupply = totalSupply.sub(_value); totalDistributed = totalDistributed.sub(_value); emit Burn(burner, _value); }
COMMENT: @ dev withdraw ether to withdraw tokens from contract
CODE: function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) { ForeignToken token = ForeignToken(_tokenContract); uint256 amount = token.balanceOf(address(this)); return token.transfer(owner, amount); }
