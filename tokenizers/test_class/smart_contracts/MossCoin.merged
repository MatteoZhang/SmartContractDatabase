COMMENT: @ dev multiplies two numbers , throws on overflow . gas optimization : this is cheaper than asserting ' a ' not being zero , but the benefit is lost
CODE: function mul(uint256 a, uint256 b) internal pure returns (uint256 c) { if (a == 0) { return 0; } c = a * b; assert(c / a == b); return c; }
COMMENT: @ dev integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; solidity automatically throws when dividing by 0 uint256 c a b
CODE: function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; }
COMMENT: @ dev subtracts two numbers , throws on overflow ( i . e . if subtrahend is greater than minuend ) .
CODE: function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a); return a - b; }
COMMENT: @ dev adds two numbers , throws on overflow .
CODE: function add(uint256 a, uint256 b) internal pure returns (uint256 c) { c = a + b; assert(c >= a); return c; }
COMMENT: Ownership Renounced event
CODE: event OwnershipRenounced(address indexed previousOwner);
COMMENT: Ownership Transferred event
CODE: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
COMMENT: @ dev throws if called by any account other than the owner .
CODE: modifier onlyOwner() { require(msg.sender == owner); _; }
COMMENT: @ dev allows the current owner to transfer control of the contract to a new owner . @ param new owner the address to transfer ownership to .
CODE: function transferOwnership(address newOwner) public onlyOwner { require(newOwner != address(0)); emit OwnershipTransferred(owner, newOwner); owner = newOwner; }
COMMENT: @ dev allows the current owner to relinquish control of the contract .
CODE: function renounceOwnership() public onlyOwner { emit OwnershipRenounced(owner); owner = address(0); }
COMMENT: Pause event
CODE: event Pause();
COMMENT: Unpause event
CODE: event Unpause();
COMMENT: @ dev modifier to make a function callable only when the contract is not paused .
CODE: modifier whenNotPaused() { require(!paused); _; }
COMMENT: @ dev modifier to make a function callable only when the contract is paused .
CODE: modifier whenPaused() { require(paused); _; }
COMMENT: @ dev called by the owner to pause , triggers stopped state
CODE: function pause() onlyOwner whenNotPaused public { paused = true; emit Pause(); }
COMMENT: @ dev called by the owner to unpause , returns to normal state
CODE: function unpause() onlyOwner whenPaused public { paused = false; emit Unpause(); }
COMMENT: total Supply function
CODE: function totalSupply() public view returns (uint256);
COMMENT: @ param who the address to query . @ return the balance of the specified address .
CODE: function balanceOf(address who) public view returns (uint256);
COMMENT: send value amount of tokens to address to
CODE: function transfer(address to, uint256 value) public returns (bool);
COMMENT: @ dev emitted when value tokens are moved from one account ( from ) to another ( to ) . note that value may be zero .
CODE: event Transfer(address indexed from, address indexed to, uint256 value);
COMMENT: @ dev returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer from } . this is zero by default
CODE: function allowance(address owner, address spender) public view returns (uint256);
COMMENT: @ dev transfer tokens from one address to another . @ param from the address you want to send tokens from . @ param to the address you want to
CODE: function transferFrom(address from, address to, uint256 value) public returns (bool);
COMMENT: set allowance for other address allows spender to spend no more than value tokens on your behalf @ param spender the address authorized to spend @ param value the max
CODE: function approve(address spender, uint256 value) public returns (bool);
COMMENT: @ dev emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
CODE: event Approval(address indexed owner, address indexed spender, uint256 value);
COMMENT: @ dev see { ierc20 total supply } .
CODE: function totalSupply() public view returns (uint256) { return totalSupply_; }
COMMENT: @ dev transfer token for a specified address @ param to the address to transfer to . @ param value the amount to be transferred .
CODE: function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); emit Transfer(msg.sender, _to, _value); return true; }
COMMENT: @ dev gets the balance of the specified address . @ param owner the address to query the the balance of . @ return an uint256 representing the amount owned
CODE: function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; }
COMMENT: called when tokens are redeemed
CODE: event Burn(uint256 value);
COMMENT: reduce < owner .
CODE: function burn(uint256 _value) onlyOwner public { require(_value <= balances[owner]); balances[owner] = balances[owner].sub(_value); totalSupply_ = totalSupply_.sub(_value); emit Burn(_value); }
COMMENT: @ dev transfer tokens from one address to another @ param from address the address which you want to send tokens from @ param to address the address which you
CODE: function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; }
COMMENT: @ dev approve the passed address to spend the specified amount of tokens on behalf of msg . sender . beware that changing an allowance with this method brings the
CODE: function approve(address _spender, uint256 _value) public returns (bool) { allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; }
COMMENT: @ dev function to check the amount of tokens that an owner allowed to a spender . @ param owner address the address which owns the funds . @ param
CODE: function allowance(address _owner, address _spender) public view returns (uint256) { return allowed[_owner][_spender]; }
COMMENT: @ dev increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . to increment allowed value
CODE: function increaseApproval(address _spender, uint _addedValue) public returns (bool) { allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue); emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; }
COMMENT: @ dev decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . to decrement allowed value
CODE: function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) { uint oldValue = allowed[msg.sender][_spender]; if (_subtractedValue > oldValue) { allowed[msg.sender][_spender] = 0; } else { allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue); } emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; }
COMMENT: forward erc20 methods to upgraded contract if this one is deprecated
CODE: function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) { return super.transfer(_to, _value); }
COMMENT: @ dev extends transfer from method with event when the callback failed . @ param from the address of the sender . @ param to the address of the recipient
CODE: function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) { return super.transferFrom(_from, _to, _value); }
COMMENT: the functions below surve no real purpose . even if one were to approve another to spend tokens on their behalf , those tokens will still only be transferable when
CODE: function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) { return super.approve(_spender, _value); }
COMMENT: @ dev increase approval of spender when not paused
CODE: function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) { return super.increaseApproval(_spender, _addedValue); }
COMMENT: @ dev decrease approval of spender when not paused
CODE: function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) { return super.decreaseApproval(_spender, _subtractedValue); }
