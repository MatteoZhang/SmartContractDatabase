COMMENT: @ dev multiply tow integers
CODE: function mul(uint a, uint b) internal returns (uint) { uint c = a * b; assert(a == 0 || c / a == b); return c; }
COMMENT: @ dev integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; solidity automatically throws when dividing by 0 assert ( a b
CODE: function div(uint a, uint b) internal returns (uint) { uint c = a / b; return c; }
COMMENT: @ dev subtracts two numbers , throws on overflow ( i . e . if subtrahend is greater than minuend ) .
CODE: function sub(uint a, uint b) internal returns (uint) { assert(b <= a); return a - b; }
COMMENT: @ dev adds two numbers , throws on overflow .
CODE: function add(uint a, uint b) internal returns (uint) { uint c = a + b; assert(c >= a); return c; }
COMMENT: @ dev returns the integer division of two unsigned integers , reverting on division by zero . the result is rounded towards zero . counterpart to solidity ' s operator
CODE: function max64(uint64 a, uint64 b) internal constant returns (uint64) { return a >= b ? a : b; }
COMMENT: @ dev returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . counterpart to solidity ' s operator . requirements :
CODE: function min64(uint64 a, uint64 b) internal constant returns (uint64) { return a < b ? a : b; }
COMMENT: @ dev returns the greater of two numbers .
CODE: function max256(uint256 a, uint256 b) internal constant returns (uint256) { return a >= b ? a : b; }
COMMENT: @ dev returns the unlockable of two numbers .
CODE: function min256(uint256 a, uint256 b) internal constant returns (uint256) { return a < b ? a : b; }
COMMENT: @ dev saftey logic .
CODE: function assert(bool assertion) internal { if (!assertion) { throw; } }
COMMENT: @ param who the address to query . @ return the balance of the specified address .
CODE: function balanceOf(address who) constant returns (uint);
COMMENT: @ dev transfer token for a specified address @ param to the address to transfer to . @ param value the amount to be transferred .
CODE: function transfer(address to, uint value);
COMMENT: @ dev emitted when value tokens are moved from one account ( from ) to another ( to ) . note that value may be zero .
CODE: event Transfer(address indexed from, address indexed to, uint value);
COMMENT: @ dev fix for the erc20 short address attack .
CODE: modifier onlyPayloadSize(uint size) { if(msg.data.length < size + 4) { throw; } _; }
COMMENT: @ dev transfer token for a specified address @ param to the address to transfer to . @ param value the amount to be transferred .
CODE: function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) { if (_to == address(0)) { throw; } balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); }
COMMENT: what is the balance of a particular account ?
CODE: function balanceOf(address _owner) constant returns (uint balance) { return balances[_owner]; }
COMMENT: @ dev function to check the amount of tokens than an owner has allowed to a spender . @ param owner the address which owns the funds . @ param
CODE: function allowance(address owner, address spender) constant returns (uint);
COMMENT: @ dev erc20 transfer from , modified such that an allowance of max uint represents an unlimited amount . @ param from address to transfer from . @ param to
CODE: function transferFrom(address from, address to, uint value);
COMMENT: @ dev approve the passed address to spend the specified amount of tokens on behalf of msg . sender . this method is included for erc20 compatibility . increase allowance
CODE: function approve(address spender, uint value);
COMMENT: @ dev emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
CODE: event Approval(address indexed owner, address indexed spender, uint value);
COMMENT: @ dev transfer tokens from one address to another @ param from address the address which you want to send tokens from @ param to address the address which you
CODE: function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) { if(_to == address(0)) { throw; } var _allowance = allowed[_from][msg.sender]; balances[_to] = balances[_to].add(_value); balances[_from] = balances[_from].sub(_value); allowed[_from][msg.sender] = _allowance.sub(_value); Transfer(_from, _to, _value); }
COMMENT: allow spender to withdraw from your account , multiple times . to change the approve amount you first have to reduce the addresses allowance to zero by calling approve (
CODE: function approve(address _spender, uint _value) { if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw; allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); }
COMMENT: @ dev function to check the amount of tokens than an owner allowed to a spender . @ param owner address the address which owns the funds . @ param
CODE: function allowance(address _owner, address _spender) constant returns (uint remaining) { return allowed[_owner][_spender]; }
COMMENT: @ dev the ownable constructor sets the original owner of the contract to the sender account .
CODE: function Ownable() { owner = msg.sender; }
COMMENT: @ dev throws if called by any account other than the owner .
CODE: modifier onlyOwner() { if (msg.sender != owner) { throw; } _; }
COMMENT: @ dev allows the current owner to transfer control of the contract to a new owner . @ param new owner the address to transfer ownership to .
CODE: function transferOwnership(address newOwner) onlyOwner { if (newOwner != address(0)) { owner = newOwner; } }
COMMENT: Pause event
CODE: event Pause();
COMMENT: Unpause event
CODE: event Unpause();
COMMENT: @ dev modifier to make a function callable only when the contract is paused .
CODE: modifier whenNotPaused() { if (paused) throw; _; }
COMMENT: @ dev modifier to allow actions only when the contract is not paused
CODE: modifier whenPaused { if (!paused) throw; _; }
COMMENT: @ dev called by the owner to pause , triggers stopped state
CODE: function pause() onlyOwner whenNotPaused returns (bool) { paused = true; Pause(); return true; }
COMMENT: @ dev called by the owner to unpause , returns to normal state
CODE: function unpause() onlyOwner whenPaused returns (bool) { paused = false; Unpause(); return true; }
COMMENT: transfer tokens send value tokens to to from your account @ param to the address of the recipient @ param value the amount to send
CODE: function transfer(address _to, uint _value) whenNotPaused { super.transfer(_to, _value); }
COMMENT: @ dev transfer tokens from one address to another . @ param from the address you want to send tokens from . @ param to the address you want to
CODE: function transferFrom(address _from, address _to, uint _value) whenNotPaused { super.transferFrom(_from, _to, _value); }
COMMENT: Voc Token function
CODE: function VocToken() { balances[msg.sender] = totalSupply; Transfer(address(0), msg.sender, totalSupply); }
