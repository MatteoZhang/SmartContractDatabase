data accounts[](balance, withdrawers[])

event CoinSent(from:address:indexed, value:uint256, to:address:indexed)

def init():
    self.accounts[msg.sender].balance = 1000000

def sendCoin(_value:uint256, _to:address):
    if self.accounts[msg.sender].balance >= _value and _value >= 0 and _value < 340282366920938463463374607431768211456:
        self.accounts[msg.sender].balance -= _value
        self.accounts[_to].balance += _value
        log(type=CoinSent, msg.sender, _value, _to)
        return(1:bool)
    return(0:bool)

def sendCoinFrom(_from:address, _value:uint256, _to:address):
    auth = self.accounts[_from].withdrawers[msg.sender]
    if self.accounts[_from].balance >= _value and auth >= _value && _value >= 0 and _value < 340282366920938463463374607431768211456:
        self.accounts[_from].withdrawers[msg.sender] -= _value
        self.accounts[_from].balance -= _value
        self.accounts[_to].balance += _value
        log(type=CoinSent, _from, _value, _to)
        return(1:bool)
    return(0:bool)

def const coinBalance():
    return(self.accounts[msg.sender].balance)

def const coinBalanceOf(_addr:address):
    return(self.accounts[_addr].balance)

def approve(_addr:address):
    self.accounts[msg.sender].withdrawers[_addr] = 340282366920938463463374607431768211456

def isApproved(_proxy:address):
    return(self.accounts[msg.sender].withdrawers[_proxy] > 0)

def approveOnce(_addr:address, _maxValue:uint256):
    self.accounts[msg.sender].withdrawers[_addr] += _maxValue

def isApprovedOnceFor(_target:address, _proxy:address):
    return(self.accounts[_target].withdrawers[_proxy])

def disapprove(_addr:address):
    self.accounts[msg.sender].withdrawers[_addr] = 0
