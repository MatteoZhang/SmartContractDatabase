@ dev Helper function to calculate the reward pool share if the earnings pool does not have a separate transcoder reward pool This implements calculation logic from a previous version of this library @ param earnings Pool Storage pointer to Earnings Pool struct @ param stake Stake of claimant @ param is Transcoder Flag indicating whether the claimant is a transcoder
@ return true if the address is registered as contract @ param account Address to be checked .
Claim staking rewards from Vox Master .
@ notice Event emitted when comptroller is changed
Sets a new contract registry to migrate to @ dev governance function called only by the registry Admin @ dev updates the registry address record in all the managed contracts @ dev by tracking the emitted Contract Registry Updated , tools can track the up to date contracts @ param new Registry is the new registry contract
Gets the integration for the module with the passed in hash . Validates that the address is not empty
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
Uniswap path Internal
Returns the current global staking rewards state @ dev calculated to the latest block , may differ from the state read @ return staking Rewards Per Weight is the potential reward per 1E18 ( TOKEN BASE ) committee weight assigned to a guardian was in the committee from day zero @ return unclaimed Staking Rewards is the of tokens that were assigned to participants and not claimed yet
@ dev Set the given strategies ' approval status . @ param strats The strategy addresses . @ param is Ok Whether to approve or unapprove the given strategies .
@ dev Returns the token collection name .
@ dev Sets the address of the proxy admin . @ param new Admin Address of the new proxy admin . solium disable next line
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
Read functions
Use initialize instead of a constructor to support proxies ( for upgradeability via zos ) .
@ dev assign Operators @ param role operator role . May be a role not defined yet . @ param operators addresses
@ param volcie Token ID uint256 Volcie Token ID @ return the properties of this Volcie Token
@ notice Return migration info of the peers in the channel @ param c the channel to be viewed @ return peers ' addresses @ return peers ' deposits @ return peers ' withdrawals @ return peers ' state sequence numbers @ return peers ' transfer Out map @ return peers ' pending Pay Out map @ dev related to Ledger Migration
Opens the Chaiselongue and collects EARN
@ dev Changes owner address to a new address @ param self Wallet in contract storage @ param from Current owner address @ param to New address @ param confirm True if confirming , false if revoking confirmation @ param data Message data passed from wallet contract @ return bool Returns true if successful , false otherwise @ return bytes32 Returns the tx ID , can be used for confirm revoke functions
Calculate x + y . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Internal function to set the token URI for a given token . Reverts if the token ID does not exist . TIP : If all token I Ds share a prefix ( for example , if your UR Is look like https : api . myproject . com token < id > ) , use { set Base URI } to store it and save gas .
Migrate lp token to another lp contract . Can be called by anyone . We trust that migrator contract is good .
@ dev Destoys amount tokens from account . amount is then deducted from the caller ' s allowance . See burn and approve .
@ dev Returns the list of default operators . These accounts are operators for all token holders , even if { authorize Operator } was never called on them . This list is immutable , but individual holders may revoke these via { revoke Operator } , in which case { is Operator For } will return false .
@ notice Keeper resolved
@ dev Performs a transfer out , ideally returning an explanatory error code upon failure tather than reverting . If caller has not called checked protocol ' s balance , may revert due to insufficient cash held in the contract . If caller has checked protocol ' s balance , and verified it is > amount , this should not revert in normal conditions .
@ dev Given an already https : eips . ethereum . org EIPS eip 712 # definition of hashstruct [ hashed struct ] , this function returns the hash of the fully encoded EIP712 message for this domain . This hash can be used together with { ECDSA recover } to obtain the signer of a message . For example : solidity bytes32 digest hash Typed Data V4 ( keccak256 ( abi . encode ( keccak256 ( " Mail ( address to , string contents ) " ) , mail To , keccak256 ( bytes ( mail Contents ) ) ) ) ) ; address signer ECDSA . recover ( digest , signature ) ;
Partition Token Transfers
called by the owner , resume Mint & Burn
@ dev Checks if a nonce based certificate is correct @ param certificate Certificate to control
@ dev Utility function for heap Sort @ param index The index of child node @ return p I The parent node index
@ dev Mints amount tokens to address account . Returns a boolean value indicating whether the operation succeeded . Emits a Transfer event .
@ dev Upgrade the backing implementation of the proxy and call a function on the new implementation . This is useful to initialize the proxied contract . @ param new Implementation Address of the new implementation . @ param data Data to send as msg . data in the low level call . It should include the signature and the parameters of the function to be called , as described in https : solidity . readthedocs . io en v0 . 4 . 24 abi spec . html # function selector and argument encoding .
@ dev Increases the max supply for the provided dmm Token Id by amount .
@ dev MUST emit when approval for a second party operator address to manage all tokens for an owner address is enabled or disabled ( absense of an event assumes disabled ) .
@ return The amount of DMG received from the swap
@ notice Allows governance to remove a job from the systems @ param job address of the contract for which work should be performed
keccak256 ( " OUSD . pending . governor " ) ;
@ dev Make an account an operator of the caller . See { is Operator For } . Emits an { Authorized Operator } event . Requirements operator cannot be calling address .
@ notice accrues interest and sets a new reserve factor for the protocol using set Reserve Factor Fresh @ dev Admin function to accrue interest and set a new reserve factor @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Updates parameters of the position to the current ones @ param asset The address of the main collateral token @ param user The owner of a position calculate fee using stored stability fee
Getters
@ notice Provides a quote of how much output can be expected given the inputs @ param token In the asset being received @ param amount In the amount of token In being provided @ return min Out the minimum amount of liquidity to send
Convert signed 64 . 64 fixed point number into signed 128 . 128 fixed point number . @ param x signed 64 . 64 bit fixed point number @ return signed 128 . 128 fixed point number
An external message call to an address specified by the caller is executed . Note that the callee account might contain arbitrary code and could re enter any function within this contract . Reentering the contract in an intermediate state may lead to unexpected behaviour . Make sure that no state modifications are executed after this call and or reentrancy guards are in place . https : swcregistry . io docs SWC 107 AUDITOR NOTE : Fix implmented , and vulnerable code commented out .
@ notice Updates rebase mint percentage @ param rebase Mint Perc the new rebase mint percentage
@ notice Set the Audius Proxy Admin @ dev Only callable by current proxy admin address @ param admin Address new admin address
Return the amount spent on multipliers , used for subtracting for future purchases .
@ dev Creates a new snapshot and returns its snapshot id . Emits a { Snapshot } event that contains the same id . { snapshot } is internal and you have to decide how to expose it externally . Its usage may be restricted to a set of accounts , for example using { Access Control } , or it may be open to the public . [ WARNING ] While an open way of calling { snapshot } is required for certain trust minimization mechanisms such as forking , you must consider that it can potentially be used by attackers in two ways . First , it can be used to increase the cost of retrieval of values from snapshots , although it will grow logarithmically thus rendering this attack ineffective in the long term . Second , it can be used to target specific accounts and increase the cost of ERC20 transfers for them , in the ways specified in the Gas Costs section above . We haven ' t measured the actual numbers ; if this is something you ' re interested in please reach out to us .
@ notice Transfer dai Amount Dai to smart Wallet , providing the initial user signing key initial User Signing Key as proof that the specified smart wallet is indeed a Dharma Smart Wallet this assumes that the address is derived and deployed using the Dharma Smart Wallet Factory V1 . In addition , the specified amount must be less than the configured limit amount . Only the owner or the designated deposit manager role may call this function . @ param smart Wallet address The smart wallet to transfer Dai to . @ param initial User Signing Key address The initial user signing key supplied when deriving the smart wallet address this could be an EOA or a Dharma key ring address . @ param dai Amount uint256 The amount of Dai to transfer this must be less than the current limit .
helper function that returns the current block timestamp within the range of uint32 , i . e . [ 0 , 2 32 1 ]
@ dev Safe casting from uint256 to int256
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . > Note : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Checks if left Exp > right Exp .
update reserves and , on the first call per block , price accumulators uint32 time Elapsed block Timestamp block Timestamp Last ; never overflows , and + overflow is desired
Withdraw without caring about rewards . EMERGENCY ONLY .
@ notice Internal method that preforms a buy on 0x on chain @ dev Usefull for other DFS contract to integrate for exchanging @ param ex Data Exchange data struct @ return ( address , uint ) Address of the wrapper used and src Amount if selling eth , convert to weth fallback to desired wrapper if 0x failed if anything is left in weth , pull it to user as eth
This is manually crafted in assembly string private constant ERROR EXECUTOR INVALID RETURN " EVMRUN EXECUTOR INVALID RETURN " ;
when Sale Is Active @ dev ensures that the contract is still active Check if sale is active
@ notice Locks contract state in expired and requests oracle price . @ dev this function can only be called once the contract is expired and can ' t be re called . The final fee for this request is paid out of the contract rather than by the caller .
@ return The result of safely multiplying x and y , interpreting the operands as fixed point decimals of the specified precision unit . @ dev The operands should be in the form of a the specified unit factor which will be divided out after the product of x and y is evaluated , so that product must be less than 2 256 . Unlike multiply Decimal , this function rounds the result to the nearest increment . Rounding is useful when you need to retain fidelity for small decimal numbers ( eg . small fractions or percentages ) .
@ dev Get the credits per token for an account . Returns a fixed amount if the account is non rebasing . @ param account Address of the account .
@ dev Returns the total amount staked tokens ( excluding unstaked tokens ) . @ return uint256 The total staked tokens of all stake owners .
@ dev finalize Ico closes down the ICO and sets needed varriables
Helper function should never use it on chain . Only support I Staking Rewards pool . Return 10000x of APY . lp Token Usdc Price is not used . if ( pool Map [ pool Id ] . pool Type ! 0 ) return 0 ; return return In USDC . mul ( 8760 ) . mul ( FEE DENOMINATOR ) . div ( invest In USDC ) ;
12 , 000 Buoy tokens are eligible to be received via presale tokens . Each token redeemed 400 Buoy . avoids supply limitations to guarentee private sales can be redeemed during sale period
The init function inputs a list of owners and the number of signatures that are required before a transaction is executed . Owners list must be in ascending address order . Required sigs must be greater than 0 and less than or equal to number of owners . Chain ID prevents replay across chains This function can only be run one time Verify it can ' t be initialized again Verify the lengths of values being passed in Verify the owners list is valid and in order No 0 addresses or duplicates Save off owner list and required sig .
@ dev Internal function that abstracts the algorithm to be performed with borrowed funds . It receives the funds , deposited in the current contract , and must ensure they are available as balance of the current contract , including fees , before it returns . @ param token The ERC 20 contract address . @ param amount The amount being borrowed . @ param fee The fee , in addition to the amount borrowed , to be repaid . @ param params Additional user parameters provided when the flash loan was requested . @ return success A boolean indicating success .
@ return The address of the proxy admin .
Include a payable fallback so that the contract can receive Ether payments .
@ param staking Address staking address
calculates the CREATE2 address for a pair without making any external calls
Lending Pool Core Data
@ notice Get the community funding amount
@ dev Calculate x y rounding towards zero , where x and y are signed 256 bit integer numbers . Revert on overflow or when y is zero . @ param x signed 256 bit integer number @ param y signed 256 bit integer number @ return signed 64 . 64 bit fixed point number x x ; y y ; return int128 ( absolute Result ) ; return int128 ( absolute Result ) ;
@ notice An event emitted when a queued transaction is executed
@ dev Adds two int256 variables and fails on overflow .
@ notice This function is called once after deployment to launch the contract . @ notice Some amount of DAI must be transferred to the contract for launch to succeed . @ notice Once launched , the transaction functions may be invoked .
only owner address can set max Profit As Percent Of House
WARNING : Alpha leak ! withdraw amount is proportional to total supply share of mb BASED of msg . sender update rewards
@ dev internal function to save on code size for the only Active Reserve modifier
Returns the address of the token distributed by this contract .
Called to borrow and immediately get into a position NOTE : Reentrancy is allowed here to allow flashloan use cases
Ensure individual and global consistency when increasing collateral balances . Returns the change to the position .
calculates the CREATE2 address for a pair without making any external calls hex ' 2603bd3b15dbef4d28f9036d8301021d5edc3ae2f073f054721f61b9bf1fa5f3 '
@ dev Get Parameter required for option price calculation @ param market Feed Address Feed Address of currency on which market options are based on @ return Stake weightage percentage for calculation option price @ return minimum amount of stake required to consider stake weightage @ return Current price of the market currency @ return Divisor to calculate minimum time elapsed for a market type
@ dev Get time remaining before reward maturity @ param loyalty Address of account @ return ( uint256 , bool ) Indicating time remaining past and boolean indicating maturity
Pauses the deposit operations . @ dev Reverts if the sender is not the contract owner . @ dev Reverts if the contract is paused already .
@ notice Balance of account , which is counted for distributions It only represents already distributed balance . @ dev This function should be overloaded to include balance of tokens stored in proposals
@ dev An overridable way to retrieve the Mooniswap registry address . @ return registry The Mooniswap registry address .
@ notice Helper method to payback the Compound debt @ dev If amount is bigger it will repay the whole debt and send the extra to the user @ param amount Amount of tokens we want to repay @ param c Borrow Token Ctoken address we are repaying @ param borrow Token Token address we are repaying @ param user Owner of the compound position we are paying back
@ notice Allows governance to change governance ( for future upgradability ) @ param governance new governance address to set
@ dev This function allows stakers to request to withdraw their stake ( no longer stake ) once they lock for withdraw ( stakes . current Status 2 ) they are locked for 7 days before they can withdraw the deposit Require that the miner is staked Change the miner staked to locked to be withdraw Stake Change the start Date to now since the lock up period begins now and the miner can only withdraw 7 days later from now ( check the withdraw function ) Reduce the staker count Update the minimum dispute fee that is based on the number of stakers
@ dev Attempts to remove amount from the total supply by destroying those tokens that are held in this contract . This call reverts with TOO MUCH ACTIVE SUPPLY if amount is not held in this contract .
@ dev Gets the token name . @ return string representing the token name
@ dev Returns the convertible with the given index . Reverts if index is higher than total Convertibles .
Token swap A to B Swap with uniswap
@ notice Accepts a deposit to the gc Token using ETH . The gc Token must have WETH as its underlying Token . This is a payable method and expects ETH to be sent ; which in turn will be converted into shares . See GC Token . sol and GC Token Base . sol for further documentation . @ param growth Token The WETH based gc Token ( e . g . gc ETH ) .
@ dev Set a new owner .
@ dev Unpauses all token transfers . See { ERC20Pausable } and { Pausable unpause } . Requirements : the caller must have the PAUSER ROLE .
@ notice Called by the delegator on a delegate to forfeit its responsibility
@ notice Get the underlying price of a s Token @ dev Implements the Price Oracle interface for Compound v2 . @ param s Token The s Token address for price retrieval @ return Price denominated in USD , with 18 decimals , for the given s Token address Comptroller needs prices in the format : $ { raw price } 1e ( 36 base Unit ) Since the prices in this view have 6 decimals , we must scale them by 1e ( 36 6 base Unit )
Safe RLY transfer function , just in case pool does not have enough RLY due to rounding error
Checks if a guardian is qualified to join the committee @ dev when true , calling ready For Committee ( ) will result in adding the guardian to the committee @ dev called periodically by guardians to check if they are qualified to join the committee @ param guardian is the guardian to check @ return can Join indicating that the guardian can join the current committee
@ dev Verifies that the caller is the Savings Manager contract
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to transfer , and can be used to Emits a Transfer event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Emitted when value tokens of token type id are transfered from from to to by operator .
@ dev Sets Out Token contract address , in case if proxy contract address changes @ param token Address New Out Token contract address
function to allow admin to claim any ERC20 tokens sent to this contract
Returns the settings of this contract @ return genesis Ref Time Delay is the delay time in seconds @ return minimum Initial Vc Payment is the minimum payment required for the initial subscription
Approve by signature
@ dev Divide an Exp by a scalar , returning a new Exp .
@ notice Completes the liquidity pool migration at least 7 days after it has been started . The migration consists of sendind the the full balance held in the liquidity pool , both in the stakes token and g Token shares , to the address set when the migration was initiated . This function will emit a Complete Liquidity Pool Migration event upon success . This is a priviledged function restricted to the contract owner .
@ notice stakes a certain amount of tokens , transferring this amount from the user to the contract @ param amount number of tokens to stake
@ notice Distributes reward tokens . May be called by bot , if there was no deposits withdrawals
@ dev Multiply an Exp by a scalar , then truncate to return an unsigned integer .
Safe MINT transfer function , just in case if rounding error causes pool to not have enough MIN Ts .
@ dev Returns the onchain ID of an investor . @ param user Address The wallet of the investor
@ dev Initializes the data structure . This method is exposed publicly . @ param reserve Token The ERC 20 token address of the reserve token ( c Token ) . @ param underlying Token The ERC 20 token address of the underlying token that backs up the reserve token . @ param mining Token The ERC 20 token address to be collected from liquidity mining ( COMP ) .
@ dev Returns the number of elements in the map . O ( 1 ) .
@ param reserve underlying token address @ param user users address
Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Composition of the g Token reserve withdrawal formula with the Compound conversion formula to obtain the gc Token reverse withdrawal formula in terms of the c Token underlying asset .
@ dev Transfers fee to foundation @ param asset The address of the fee asset @ param user The address to transfer funds from @ param amount The amount of asset to transfer
Deposit staking tokens
Returns whether the Set Token has a default position for a given component ( if the real unit is > 0 )
@ notice Return the numeric type of the CPM token @ return type
@ notice The address of the Power Pool Protocol Timelock
Returns the up global staking rewards state for a specific time @ dev receives the relevant committee data @ dev for future time calculations assumes no change in the committee data @ param total Committee Weight is the current committee total weight @ param current Time is the time to calculate the rewards for @ param settings is the contract settings
solhint enable func name mixedcase @ dev Reverts an encoded rich revert reason error Data . @ param error Data ABI encoded error data .
@ dev Throws if called by any account other than the admin or owner .
@ notice Validate token info @ param token token info to be validated @ return validated token info
@ notice Calculates amount of account ' s tokens to be claimed from distributions
@ dev Determine if reward is mature for address @ param reward Address Address requesting addition in to loyalty timestamp collection
@ notice Cancel any pending unfinalized withdrawal
Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfer From . This is zero by default This value changes when approve or transfer From are called
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
Private
[ Grey list ] An EOA can safely interact with the system no matter what . If you ' re using Metamask , you ' re using an EOA . Only smart contracts may be affected by this grey list . This contract will not be able to ban any EOA from the system even if an EOA is being added to the grey List , he she will still be able to interact with the whole system as if nothing happened . Only smart contracts will be affected by being added to the grey List . This grey list is only used in Vault . sol , see the code there for reference
Set set Total Fee . Can only be called by the owner .
@ dev Function to simply retrieve block number This exists mainly for inheriting test contracts to stub this result .
@ dev Withdraw all balance of each tokens into destination . @ param tokens address of ERC20 token , or zero for withdrawing ETH . @ param destination receiver of token
@ dev Subtracts two numbers , returns an error on overflow ( i . e . if subtrahend is greater than minuend ) .
Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Provides the address of the liquidity pool contract . @ return liquidity Pool An address identifying the liquidity pool .
@ dev Get sig requirements for administrative changes @ param self Wallet in contract storage @ return uint256 Number of sigs required
@ dev Returns if the operator is allowed to manage all of the assets of owner . See { set Approval For All }
@ dev Retrieves the current market liquidity for a given c Token . @ param ctoken The Compound c Token address . @ return market Amount The underlying reserve token available market liquidity .
@ notice A method to add a stakeholder . @ param stakeholder The stakeholder to add . @ param referred By The user wallet to get refer bonus @ param amount The amount of stake token @ param timestamp The timestamp when stakeholder added to pool
@ dev Subtracts two unsigned integers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
solhint disable previous line no empty blocks
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a Transfer event .
@ return the address where funds are collected .
@ dev Function to check the amount of tokens than an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint specifying the amount of tokens still available for the spender .
@ dev Return the amount of ETH wei to get back if we are to liquidate the position .
@ notice Accrues interest and updates the interest rate model using set Interest Rate Model Fresh @ dev Admin function to accrue interest and update the interest rate model @ param new Interest Rate Model the new interest rate model to use @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Returns a positive number if other comes lexicographically after self , a negative number if it comes before , or zero if the contents of the two slices are equal . Comparison is done per rune , on unicode codepoints . @ param self The first slice to compare . @ param other The second slice to compare . @ return The result of the comparison . Mask out irrelevant bytes and check again uint256 mask uint256 ( 1 ) ;
@ dev Adds a key value pair to a map , or updates the value for an existing key . O ( 1 ) . Returns true if the key was added to the map , that is if it was not already present .
GUILD TOKEN FUNCTIONS
@ notice Set the Claims Manaager address @ dev Only callable by Governance address @ param claims Manager address for new Claims Manaager contract
@ dev Overrides parent by storing due balances , and delivering tokens to the vault instead of the end user . This ensures that the tokens will be available by the time they are withdrawn ( which may not be the case if deliver Tokens was called later ) . @ param beneficiary Token purchaser @ param token Amount Amount of tokens purchased
@ notice Import channel migration arguments from old Celer Ledger contract @ param c the channel to be viewed @ param from Ledger Addr old ledger address to import channel config from @ param channel Id ID of the channel to be viewed @ dev related to Ledger Migration
@ dev Update the key of a node in the list @ param id Node ' s id @ param new Key Node ' s new key @ param prev Id Id of previous node for the new insert position @ param next Id Id of next node for the new insert position List must contain the node Remove node from the list Insert node if it has a non zero key
@ notice Sender repays a borrow belonging to borrower @ param borrower the account with the debt being payed off @ param repay Amount The amount to repay @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but we still want to log the fact that an attempted borrow failed repay Borrow Fresh emits repay borrow specific logs on errors , so we don ' t need to
@ dev disables a reserve to be used as collateral @ param reserve the address of the reserve
This is a constructor function which means the following function name has to match the contract name declared above balances [ msg . sender ] 180000000000000000000 ; total Supply 180000000000000000000 ; name " NEW Orbs " ; decimals 18 ; symbol " NEW Orbs " ; units One Eth Can Buy 1 ; funds Wallet msg . sender ;
@ dev Sets a new URI for a given token ID
@ dev Destroys token Id . The approval is cleared when the token is burned . Requirements : token Id must exist . Emits a { Transfer } event . Clear approvals Clear metadata ( if any )
@ notice transfers the owner ' s LINK to another address @ param recipient is the address to send the LINK to @ param amount is the amount of LINK to send
@ notice Approve the passed address to spend the specified amount of tokens on behalf of msg . sender and then call on Approval Received on spender . Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender address The address which will spend the funds @ param value uint256 The amount of tokens to be spent
@ dev Modifier to allow function calls only from the Proxy Admin .
@ dev Create allocation for particular recipient . @ param recipient Receiving address of the funds . @ param release Time in epoch to release funds . @ param amount Amount of funds to allocate .
@ dev Gets blocknumber for mined timestamp @ param request Id to look up @ param timestamp is the timestamp to look up blocknumber @ return uint of the blocknumber which the dispute was mined
@ dev Builds a routing path for conversion using WETH as intermediate . Deals with the special case where WETH is also the input or the output asset . @ param from The input asset address . @ param WETH The Wrapped Ether address . @ param to The output asset address . @ return path The route to perform conversion .
Change the percent going to stakers for WETH
DO NOT CHANGE OR MOVE
@ dev total number of tokens in existence
@ dev submit Vote
Returns staking balance of the account
function quick Withdraw ( address vault Protocol , address [ ] calldata tokens , uint256 [ ] calldata amounts ) external returns ( uint256 ) ;
@ notice Transfers amount amount of an id from the from address to the to address specified @ param from Source address @ param to Target address @ param id ID of the token type @ param amount Transfered amount
@ dev Event to show ownership has been transferred @ param previous Owner representing the address of the previous owner @ param new Owner representing the address of the new owner
@ notice Provides the minimum and maximum amount of the gc Token Type 1 to be processed on every operation . This method applies only to gc Tokens Type 2 and is not relevant for gc Tokens Type 1 . @ return growth Min Gulp Amount The minimum amount of the gc Token Type 1 to be processed per deposit withdrawal ( always 0 ) . @ return growth Max Gulp Amount The maximum amount of the gc Token Type 1 to be processed per deposit withdrawal ( always 0 ) .
@ notice Allow a signatory to increment the nonce at any point . The current nonce needs to be provided as an argument to the signature so as not to enable griefing attacks . All arguments can be omitted if called directly . No value is returned from this function it will either succeed or revert . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param signature bytes A signature that resolves to either the public key set for this account in storage slot zero , user Signing Key , or the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Custom Action ID is prefixed and hashed to create the signed message .
@ dev convert from B Crv to HUSD ( B Crv > DAI > 3Crv > HUSD ) convert to DAI add DAI to 3pool to get back 3Crv convert 3Crv to HUSD
@ notice Get an array of the supported asset prices in USD . @ return uint256 [ ] Array of asset prices in USD ( 1e18 )
@ notice The event emitted when the uniswap window changes
@ notice Admin is able to set new admin @ param admin Address of multisig that becomes new admin
Generates the message to sign given the output destination address and amount . includes this contract ' s address and a nonce for replay protection . One option to independently verify : https : leventozturk . com engineering sha3 and select keccak the sequence should match generate Multi Sig V2 in JS
Withdraw partial funds , normally used with a vault withdrawal require ( vault ! address ( 0 ) , " ! vault " ) ;
@ dev Borrow funds from a given c Token ' s market . This operation will revert if it does not succeed . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to borrow .
@ notice Calls the function with selector 0x01ffc9a7 ( ERC165 ) and suppresses throw @ param account The address of the contract to query for support of an interface @ param interface Id The interface identifier , as specified in ERC 165 @ return success true if the STATICCALL succeeded , false otherwise @ return result true if the STATICCALL succeeded and the contract at account indicates support of the interface with identifier interface Id , false otherwise
@ dev Divides two numbers and returns the remainder ( unsigned integer modulo ) , reverts when dividing by zero .
@ notice begin the unbonding process to stop being a keeper
Mutable , in case governance want to upgrade VALUE to new version
Update the given pool ' s Zcdw allocation point . Can only be called by the owner .
sets start Date to now and defines the sale stages off of that .
TEST TASK : Check if liquidity is added via calling this function wrap weth
@ dev Source of tokens . Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens . @ param beneficiary Address performing the token purchase @ param token Amount Number of tokens to be emitted
@ inheritdoc I Staking
Works like call but is slightly more efficient when data needs to be copied from memory to do the call .
@ dev See IERC20 . allowance .
@ dev Transfers tokens from a user to the exchange . This function will be called when a user deposits funds to the exchange . In a simple implementation the funds are simply stored inside the deposit contract directly . More advanced implementations may store the funds in some De Fi application to earn interest , so this function could directly call the necessary functions to store the funds there . This function needs to throw when an error occurred ! This function can only be called by the exchange . @ param from The address of the account that sends the tokens . @ param token The address of the token to transfer ( 0x0 for ETH ) . @ param amount The amount of tokens to transfer . @ param extra Data Opaque data that can be used by the contract to handle the deposit @ return amount Received The amount to deposit to the user ' s account in the Merkle tree
Helper function when migrating to new version
@ dev Internal function to safely mint a new token . Reverts if the given token ID already exists . If the target address is a contract , it must implement on ERC721Received , which is called upon a safe transfer , and return the magic value bytes4 ( keccak256 ( " on ERC721Received ( address , address , uint256 , bytes ) " ) ) ; otherwise , the transfer is reverted . @ param to The address that will own the minted token @ param token Id uint256 ID of the token to be minted @ param data bytes data to send along with a safe transfer check
Returns all the relevant information about a specific alpaca . @ param id The ID of the alpaca of interest .
@ dev Retrieves if the specified token has its some Bool attribute set .
@ notice Address that owns the DS Proxy that owns the CDP @ param manager Manager contract @ param cdp Id Id of the CDP
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements : to cannot be the zero address .
@ notice Gets the whole debt of the CDP @ param vat Address of Vat contract @ param usr Address of the Dai holder @ param urn Urn of the Cdp @ param ilk Ilk of the Cdp
@ dev gets the interest rate strategy contract address for the reserve @ param reserve the reserve address @ return the address of the interest rate strategy contract
burnable
Throws when msg . sender has already claimed the airdrop
Events
@ notice LXL client can confirm after register Locker ( ) is called to deposit sum for provider . @ dev If LXL token is w ETH , msg . value can be wrapped into w ETH in single call . @ param registration Registered LXL number . function confirm Locker ( uint256 registration ) external non Reentrant payable {
@ dev mint tokens . @ param amount amount of token to mint @ param beneficiary beneficiary address @ return bool which represents a success
@ notice Delegates votes from signatory to delegatee @ param delegatee The address to delegate votes to @ param nonce The contract state required to match the signature @ param expiry The time at which to expire the signature @ param v The recovery byte of the signature @ param r Half of the ECDSA signature pair @ param s Half of the ECDSA signature pair
function Set Roles ( bytes32 role Type , address [ ] calldata addresses , bool [ ] calldata set To ) public { set Roles ( role Type , addresses , set To ) ; } Issue burn
@ notice Transfer ether Amount Ether to recipient . Only the owner may call this function . @ param recipient address The account to transfer Ether to . @ param ether Amount uint256 The amount of Ether to transfer .
@ dev Mint for multiple assets in the same call . @ param assets Addresses of assets being deposited @ param amounts Amount of each asset at the same index in the assets to deposit .
Added to support recovering LP Rewards from other systems to be distributed to holders
@ dev Redeems pool token to underlying tokens proportionally . @ param account The account address used to redeem . @ param amount Amount of pool token to redeem . @ param min Redeem Amounts Minimum amount of underlying tokens to get . We don ' t perform input validations here as they are done in A Coconut Swap .
@ dev Retrieves the last read only value for the c Token borrowing balance in terms of its underlying reserve token . @ param ctoken The Compound c Token address . @ return amount The borrowing balance in terms of the underlying reserve token .
@ dev Multiplies two exponentials , returning a new exponential . We add half the scale before dividing so that we get rounding instead of truncation . See " Listing 6 " and text above it at https : accu . org index . php journals 1717 Without this change , a result like 6 . 6 . . . e 19 will be truncated to 0 instead of being rounded to 1e 18 . The only error div can return is Math Error . DIVISION BY ZERO but we control exp Scale and it is not zero .
@ dev PUBLIC FACING : External helper to return multiple values of xf Lobby [ ] with a single call @ param begin Day First day of data range @ param end Day Last day ( non inclusive ) of data range @ return Fixed array of values
@ dev Emitted when owner enables or disables ( approved ) operator to manage all of its assets .
Allows users to send this contract arbitrary data . @ param sender The msg . sender to Solo @ param account Info The account from which the data is being sent @ param data Arbitrary data given by the sender
@ dev Should be called by external mechanism when reward funds are sent to this contract
Add a new lp to the pool . Can only be called by the owner .
@ dev Allows the fund manager to withdraw their cut of the funds profit reset latest Oracle Caller for protect from double call prepare call data for withdarw do withdraw add report
@ dev Handle fee calculation and fee transfer to fee collector .
Play the game : 1 % chance of winning and returning true .
ERC20 transfer From attack protection : https : github . com Decent Labs dcm poc issues 57 approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) Based on Monolith DAO Token . sol
@ dev Transfer a given ERC 20 token amount from the current contract . @ param token An ERC 20 compatible token address . @ param to The target address . @ param amount The amount to be transferred .
@ dev Adds orchestration for the provided function signatures
Overrides adding new minters so that only governance can authorized them .
Governance info methods
@ dev Returns list of owners . @ return List of owner addresses .
Gets the underlying token for the corresponding farmable token .
@ notice Set the Delegate Manager address @ dev Only callable by Governance address @ param delegate Manager address for new Delegate Manager contract
Calculate amount of token received given exact amount of USD input
Only support I Staking Rewards pool if ( pool Map [ pool Id ] . pool Type ! 0 ) return 0 ;
@ notice Set the governance address after confirming contract identity @ param governance Address Incoming governance address
@ dev Adds two numbers , returns an error on overflow .
@ dev Get the rate value of specified tier @ param index of tier to query @ return specified reward tier rate @ notice Test ( s ) Need rewrite
@ dev retrieve size number of options ' information . from all option list begin positon . size retrieve size .
@ notice Computes the current max scaling factor
@ dev Returns the cap on the token ' s total supply .
@ dev This function returns whether or not a given user is allowed to trade a given amount and removing the staked amount from their balance if they are staked @ param user address of user @ param amount to check if the user can spend @ return true if they are allowed to spend the amount being checked Subtracts the stake Amount from balance if the user is staked
@ dev This method is overriden from G Token Base and sets up the reserve after a deposit comes along . It basically adjusts the collateralization leverage to reflect the new increased reserve balance . This method uses the GC Leveraged Reserve Manager to adjust the reserve and this is done via flash loans . See GC Leveraged Reserve Manager . sol . @ param cost The amount of reserve being deposited ( ignored ) . @ return success A boolean indicating whether or not the operation succeeded . This operation should not fail unless any of the underlying components ( Compound , Aave , Dydx ) also fails .
@ dev Multiplies two numbers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev calculate collateral occupied value , and modify database , only foundation operator can modify database .
@ notice Gets the token address from the Join contract @ param join Addr Address of the Join contract
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Calcs primary asset class ' share of collateral at settlement . @ dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12 @ param underlying Start Round Hints specify for each oracle round of the start of Live period @ param underlying End Round Hints specify for each oracle round of the end of Live period @ return split primary asset class ' share of collateral at settlement @ return underlying Starts underlying values in the start of Live period @ return underlying Ends underlying values in the end of Live period
Queries the approval status of an operator for a given owner .
@ notice Returns the number of authorised modules . @ return The number of authorised modules .
@ dev Getter for the amount of Ether already released to a payee .
Allow spender to withdraw from your account , multiple times , up to the value amount . If this function is called again it overwrites the current allowance with value . this function is required for some DEX functionality
@ dev Transfer tokens from one address to another based on allowance @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ return the array of reserves configured on the core
multiply a UQ112x112 by a uint , returning a UQ144x112 reverts on overflow
@ dev Set or reaffirm the approved address for an NFT . @ notice The zero address indicates there is no approved address . Throws unless msg . sender is the current NFT owner , or an authorized operator of the current owner . @ param approved The new approved NFT controller . @ param token Id The NFT to approve .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
Withdraw LP tokens from Trainer .
Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
This function is called after your contract has received the flash loaned amount
Update the image displayed on the billboard Get the cost of the update Make sure the amount of ETH sent matches the update cost Update the LUT , image URL , and increase the cos by 10 %
@ notice Internal method that preforms a sell on 0x on chain @ dev Usefull for other DFS contract to integrate for exchanging @ param ex Data Exchange data struct @ return ( address , uint ) Address of the wrapper used and dest Amount if selling eth , convert to weth Try 0x first and then fallback on specific wrapper fallback to desired wrapper if 0x failed if anything is left in weth , pull it to user as eth
@ dev Destroys amount tokens from account , reducing the total supply . The caller must be an operator of account . If a send hook is registered for account , the corresponding function will be called with data and operator Data . See { IERC777Sender } . Emits a { Burned } event . Requirements account cannot be the zero address . account must have at least amount tokens . the caller must be an operator for account .
@ dev Allocates swap fees accured in the contract .
transfers delegate authority when sending a token . https : medium . com bulldax finance sushiswap delegation double spending bug 5adcc7b3830f
Trade ETH to ERC20
@ notice get past rounds answers @ dev overridden funcion to add the check Access ( ) modifier @ param round Id the round number to retrieve the answer for @ dev # [ deprecated ] Use get Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended get Round Data instead which includes better verification information .
Use for poking OS Ms prior to collateral being added
@ dev Destroys amount tokens of token type id from account Requirements : account cannot be the zero address . account must have at least amount tokens of token type id .
@ dev A transaction is invoked on the Account .
@ notice Multiplies two Unsigned s , reverting on overflow . @ dev This will " floor " the product . @ param a a Fixed Point . @ param b a Fixed Point . @ return the product of a and b . There are two caveats with this computation : 1 . Max output for the represented number is ~ 10 ^ 41 , otherwise an intermediate value overflows . 10 ^ 41 is stored internally as a uint256 ~ 10 ^ 59 . 2 . Results that can ' t be represented exactly are truncated not rounded . E . g . , 1 . 4 2e 18 2 . 8e 18 , which would round to 3 , but this computation produces the result 2 . No need to use Safe Math because FP SCALING FACTOR ! 0 .
@ notice Give Spender the right to withdraw as much tokens as value
@ notice Get curent version for a service type @ param service Type type of service @ return Returns current version of service
@ dev Get manager for permission @ param app Address of the app @ param role Identifier for a group of actions in app @ return address of the manager for the permission
@ dev Returns a token ID at a given index of all the tokens stored by the contract . Use along with { total Supply } to enumerate all tokens .
Set the latest Metrics Group contract address . Only the owner can execute this function .
@ dev Function to stop minting new tokens . @ return True if the operation was successful .
@ dev Subtracts two signed integers , reverts on overflow .
Sets the contract registry address @ dev governance function called only by an admin @ param new Registry is the new registry contract
@ dev Updates the liquidity cumulative index Ci and variable borrow cumulative index Bvc . Refer to the whitepaper for a formal specification . @ param self the reserve object only cumulating if there is any income being produced
Set allowance for other address Allows spender to spend no more than value tokens on your behalf @ param spender The address authorized to spend @ param value the max amount they can spend
@ notice Get a snapshot of the account ' s balances , and the cached exchange rate @ dev This is used by comptroller to more efficiently perform liquidity checks . @ param account Address of the account to snapshot @ return ( possible error , token balance , borrow balance , exchange rate mantissa )
@ dev Stakes more LRC for an exchange . @ param exchange Addr The address of the exchange @ param amount LRC The amount of LRC to stake @ return staked LRC The total amount of LRC staked for the exchange
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
withdraw functions
Sends out the reward tokens to the user .
always use pool 0 ( default )
@ dev Gets the DMM ecosystem ' s collateral ' s value from Chainlink ' s on chain data feed . @ return The value of all of the ecosystem ' s collateral , as a number with 18 decimals
@ dev Called by an { IERC777 } token contract whenever tokens are being moved or created into a registered account ( to ) . The type of operation is conveyed by from being the zero address or not . This call occurs after the token contract ' s state is updated , so { IERC777 balance Of } , etc . , can be used to query the post operation state . This function may revert to prevent the operation from being executed .
OPERATOR ONLY : Set exchange for passed components @ param components Array of components @ param cool Off Periods Array of cool off periods to correct component
@ dev triggered when tokens are transferred between wallets @ param from source address @ param to target address @ param value transfer amount
@ dev Retreives an underlying token given a c Token . @ param ctoken The Compound c Token address . @ return token The underlying reserve token .
@ notice blacklists a keeper from participating in the network @ param keeper the address being slashed
@ dev Sets the AMB bridge contract address . Only the owner can call this method . @ param bridge Contract the address of the bridge contract .
@ dev Sets Coefficient @ param coefficient New coefficient
@ dev Returns true if a leaf can be proved to be a part of a Merkle tree defined by root . For this , a proof must be provided , containing sibling hashes on the branch from the leaf to the root of the tree . Each pair of leaves and each pair of pre images are assumed to be sorted . Hash ( current computed hash + current element of the proof ) Hash ( current element of the proof + current computed hash ) Check if the computed hash ( root ) is equal to the provided root
@ dev Return the total ETH entitled to the token holders . Be careful of unaccrued interests .
@ notice add Contract registers contract name to address mapping under given registry key @ param name registry key that will be used for lookups @ param address address of contract
@ dev Returns all the votes for the given address . It calculates the values by iterating on all the tokens that the address used . @ param addr address votes . @ return addr Accept accept amount of votes for the accept . @ return addr Refuse refuse amount of votes for the refuse .
Set the staking token for the contract
@ dev Emitted when someone joins the pool @ param staker Account staking @ param deposited Amount deposited @ param minted Amount of pool tokens minted
@ dev Guarantees that the msg . sender is allowed to transfer NFT . @ param token Id ID of the NFT to transfer .
@ dev gets the current borrow rate of the user @ param reserve the address of the reserve for which the information is needed @ param user the address of the user for which the information is needed @ return the borrow rate for the user ,
@ dev Pool token is redeemed .
@ dev called by the owner to unpause , returns to normal state
@ dev Burns a specific amount of tokens from the target address and decrements allowance @ param from address The address which you want to send tokens from @ param value uint256 The amount of token to be burned
@ dev This method will cause an re entry to the same module contract .
@ notice Adds a new contract to the registry @ param id Id of contract @ param contract Addr Address of the contract @ param wait Period Amount of time to wait before a contract address can be changed
@ notice Get the number of tokens spender is approved to spend on behalf of account @ param account The address of the account holding the funds @ param spender The address of the account spending the funds @ return The number of tokens approved
It allows owner to set the oracle address for getting avg APR @ param oracle : new oracle address
Claim reward and staked tokens @ required user must be a staker @ required must be claimable if ( users [ msg . sender ] . start Time + latest Staking Period ( ) > now ) { transfer staked tokens apply 5 % penalty and send back staked tokens check if we have any pending reward , add it to pending Gains var update amount
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls Return data is optional solhint disable next line max line length
@ notice Event emitted when gov is changed
@ dev Internal function to invoke on Transfer Received on a target address The call is not executed if the target address is not a contract @ param from address Representing the previous owner of the given token value @ param to address Target address that will receive the tokens @ param value uint256 The amount mount of tokens to be transferred @ param data bytes Optional data to send along with the call @ return whether the call correctly returned the expected magic value
Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a Transfer event .
settle lender ( interest ) fee
should only be called by controller
@ notice get the fee of the storeman group should get @ param time Coin the storeman group should get while storeman redeem user lock
@ dev Tells whether an operator is approved by a given owner . @ param owner owner address which you want to query the approval of @ param operator operator address which you want to query the approval of @ return bool whether the given operator is approved by the given owner
@ dev Allows users to borrow a specific amount of the reserve currency , provided that the borrower already deposited enough collateral . @ param reserve the address of the reserve @ param amount the amount to be borrowed @ param interest Rate Mode the interest rate mode at which the user wants to borrow . Can be 0 ( STABLE ) or 1 ( VARIABLE )
@ dev Revokes role from account . If account had been granted role , emits a { Role Revoked } event . Requirements : the caller must have role ' s admin role .
@ notice Sets the minimum and maximum amount of the mining token to be processed on every operation . See mining Gulp Range ( ) . This is a priviledged function restricted to the contract owner . @ param mining Min Gulp Amount The minimum amount of the mining token to be processed per deposit withdrawal . @ param mining Max Gulp Amount The maximum amount of the mining token to be processed per deposit withdrawal .
@ param time uint256 The time point for which the month number is enquired @ return uint256 the month in which the time point time is
helper for get value via Balancer
@ dev An overridable way to retrieve the DODO Zoo registry address . @ return registry The DODO Zoo address .
@ dev Burn You can choose to burn your NF Ts . In case this Token wraps a pre existent ERC1155 NFT , you will receive the wrapped NF Ts .
@ notice get data about the latest round . Consumers are encouraged to check that they ' re receiving fresh data by inspecting the updated At and answered In Round return values . Note that different underlying implementations of Aggregator V3Interface have slightly different semantics for some of the return values . Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them . @ return round Id is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round I Ds get larger as time moves forward . @ return answer is the answer for the given round @ return started At is the timestamp when the round was started . ( Only some Aggregator V3Interface implementations return meaningful values ) @ return updated At is the timestamp when the round last was updated ( i . e . answer was last computed ) @ return answered In Round is the round ID of the round in which the answer was computed . ( Only some Aggregator V3Interface implementations return meaningful values ) @ dev Note that answer and updated At may change between queries .
@ dev Splits the slice , setting self to everything after the first occurrence of needle , and token to everything before it . If needle does not occur in self , self is set to the empty slice , and token is set to the entirety of self . @ param self The slice to split . @ param needle The text to search for in self . @ param token An output parameter to which the first token is written . @ return token . Not found
@ dev Gets the agent registry contract used by the exchange . @ return the agent registry contract
@ dev Starts the contract
@ dev Returns an Ethereum Signed Message , created from a hash . This replicates the behavior of the https : github . com ethereum wiki wiki JSON RPC # eth sign [ eth sign ] JSON RPC method . See { recover } . 32 is the length in bytes of hash , enforced by the type signature above
decode a uq112x112 into a uint with 18 decimals of precision we only have 256 224 32 bits to spare , so scaling up by ~ 60 bits is dangerous instead , get close to : ( x 1e18 ) > > 112 without risk of overflowing , e . g . : ( x ) 2 ( 112 lg ( 1e18 ) )
Returns the value of the bool type that mapped to the given key .
@ dev Reads the symbol property of the provided token . Either symbol ( ) or SYMBOL ( ) method is used . Both , string and bytes32 types are supported . @ param token address of the token contract . @ return token symbol as a string or an empty string if none of the methods succeeded . mstore ( ptr , 0x95d89b4100000000000000000000000000000000000000000000000000000000 ) mstore ( ptr , 0xf76f8d7800000000000000000000000000000000000000000000000000000000 ) returndatacopy ( mload ( 0x40 ) , 32 , 32 ) size : returndatasize load as string ptr : mload ( ptr ) mstore ( add ( res , 32 ) , ptr ) until string is empty ptr : shl ( 8 , ptr ) mstore ( res , i )
@ dev when return if this global Constraints is pre , post or both . @ return Call Phase enum indication Pre , Post or Pre And Post .
Deposit LP tokens to Master Chef for NOUNI allocation .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount . require ( sender ! address ( 0 ) , " ERC20 : transfer from the zero address " ) ;
@ dev Returns the factory . @ return factory Address of the factory .
@ dev join pool 1 . Transfer TUSD from sender 2 . Mint pool tokens based on value to sender
Don ' t accept ETH
APPROVE TOKENS TO SEND
@ dev only owner can add locker
@ dev Performs the power on a specified value , reverts on overflow .
@ notice If true , transfers from I Uniswap V2Pair at address addr will mint an extra interest Rate Per Buy Thousandth 1000 DIV tokens per 1 Token for the recipient . @ param addr Address to check @ dev it is not trivial to return a mapping without incurring further storage costs
@ notice Implemented by jobs to show that a keeper performed work @ param keeper address of the keeper that performed the work
@ dev This function should be called as the final step of the flash loan to properly implement the repay of the loan . @ param token The reserve token . @ param gross Amount The amount to be repayed including repay fees .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Query total supply of token @ return Total supply of token
@ dev Performs a transfer in , ideally returning an explanatory error code upon failure rather than reverting . If caller has not called check Transfer In , this may revert due to insufficient balance or insufficient allowance . If caller has called check Transfer In successfully , this should not revert in normal conditions .
@ dev Calculate the cumulative reward per token from last Update Time to last Time Reward Applicable ( ) such time span could be divided into 3 parts by halve intervals : ( last Update Time , first Interval End ) , ( first Interval End , last Interval Start ) , ( last Interval Start , last Time Reward Applicable ( ) ) The time span is too short that it has not reach first Interval End The amount from last Update Time to first Interval End The amount from first Interval End to last interval start , it may contains n full halve interval ( n > 0 ) n 0 if first Interval End and timestamp lay in the same halve interval current Reward Rate represents 1 2 of the reward rate of last full interval Finally , the amount from last interval start to timestamp
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Allows an agent to approve multiple rollup txs . This function can only be called by an agent . @ param owners The account owners @ param tx Hashes The hashes of the transactions
@ dev Modifier to make a function callable only when the contract is not paused . Requirements : The contract must not be paused .
@ dev Search the list of g Tokens and selects the one that has enough liquidity and for which the withdrawal of the required amount will yield the least deviation from its target share . @ param reserve Amount The total reserve amount used for calculation . @ param minimum Amount The minimum liquidity amount used for calculation . @ param target Amount The target liquidity amount used for calculation . @ return adjust Token The g Token to withdraw from . @ return adjust Amount The amount to be withdrawn .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev Gets the withdrawal recipient . @ param from The address of the account that does the withdrawal . @ param to The address to which ' amount ' tokens were going to be withdrawn . @ param token The address of the token that is withdrawn ( ' 0x0 ' for ETH ) . @ param amount The amount of tokens that are going to be withdrawn . @ param storage ID The storage ID of the withdrawal request .
Safe value mint , ensure it is never over cap and we are the current owner .
@ notice Algorithm that , for the type of oracle used by the derivative , finds the value closest to a given timestamp @ param oracle iteratable oracle through @ param timestamp a given timestamp @ param round Hint specified round for a given timestamp @ return the value closest to a given timestamp
Checks whether a deployment subset exists @ param deployment Subset is the name of the deployment subset to query @ return exists is a bool indicating the deployment subset exists
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . import ANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Creates a two asset liquidity pool and funds it by depositing both assets . The create pool is public with a 50 % 50 % distribution and 10 % swap fee . @ param token0 The ERC 20 token for the first asset of the pair . @ param amount0 The amount of the first asset of the pair to be deposited . @ param token1 The ERC 20 token for the second asset of the pair . @ param amount1 The amount of the second asset of the pair to be deposited . @ return pool The address of the newly created pool .
@ notice Overrides the default total reserve definition in order to account only for the diference between assets being lent and assets being borrowed . @ return total Reserve The amount of the reserve token corresponding to this contract ' s worth .
Validates passed address equals to the three addresses .
Returns the contract ' s settings @ return min Self Stake Percent Mille is the minimum self stake in percent mille @ return vote Unready Percent Mille Threshold is the minimum threshold in percent mille @ return vote Out Percent Mille Threshold is the minimum threshold in percent mille
@ notice admin function to send TAD to external address , for emergency use
Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev transfer From function to tansfer tokens when token is not paused
Can participate in balance dependant activities
@ notice Throws if the sender is not the owner .
Irrevocably puts contract into safe mode . When in this mode , transactions may only be sent to signing addresses .
@ dev Allows to replace an owner with a new owner . Transaction has to be sent by wallet . @ param owner Address of owner to be replaced . @ param new Owner Address of new owner .
@ dev Returns the certification status of a guardian
@ dev Get time weighted average prices for a token at the current timestamp . Update new and old observations of lagging window if period elapsed . Update new and old observations if elapsed time is greater than or equal to anchor period
Allow spender to withdraw from your account , multiple times , up to the value amount . If this function is called again it overwrites the current allowance with value .
@ notice the amount of future funding available to oracles
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an Approval event .
@ notice In the initializer , set up the initial user signing key . Note that this initializer is only callable while the smart wallet instance is still in the contract creation phase . @ param user Signing Key address The initial user signing key for the smart wallet . Ensure that this function is only callable during contract construction . Set up the user ' s signing key and emit a corresponding event .
@ dev function that burns an amount of the token from caller account @ param amount The amount that will be burnt can be used from account owner
@ notice Approve spender to transfer up to amount from src @ dev This will overwrite the approval amount for spender and is subject to issues noted [ here ] ( https : eips . ethereum . org EIPS eip 20 # approve ) @ param spender The address of the account which may transfer tokens @ param amount The number of tokens that are approved ( 2 ^ 256 1 means infinite ) @ return Whether or not the approval succeeded
@ notice Post open oracle reporter prices , and recalculate stored price by comparing to anchor @ dev We let anyone pay to post anything , but only prices from configured reporter will be stored in the view . @ param messages The messages to post to the oracle @ param signatures The signatures for the corresponding messages @ param symbols The symbols to compare to anchor for authoritative reading Save the prices Try to update the view storage
@ dev Gets the managers . @ return The list of managers .
using PUSH pattern for using by Proxy if needed
@ dev Handy definition to ensure that flash loans are only initiated from within the current contract .
View function to see pending YFI Ns on frontend .
@ dev Change owner @ param new Owner address of new owner
@ return uint256 the total amount of Uniswap Liquidity tokens deposited including both locked tokens and withdrawn tokens
@ notice Add reward to existing epoch or crete a new one @ param protocol Protocol for reward @ param token Reward token @ param epoch Epoch number can be 0 to create new Epoch @ param amount Amount of Reward token to deposit if ( epoch 0 ) epoch epochs Length ; if ( epoch End < block . timestamp ) epoch End block . timestamp ;
in case something happens and the address is wrong
@ notice Performs the minting of g Token shares upon the deposit of the reserve token . The actual number of shares being minted can be calculated using the calc Deposit Shares From Cost function . In every deposit , 1 % of the shares is retained in terms of deposit fee . Half of it is immediately burned and the other half is provided to the locked liquidity pool . The funds will be pulled in by this contract , therefore they must be previously approved . @ param cost The amount of reserve token being deposited in the operation .
No rebalance implementation for lower fees and faster swaps Check that no mint has been made in the same block from the same EOA Check balance
@ notice The standard EIP 20 approval event
@ notice Get total number of service providers for a given service Type
@ notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed }
@ dev Update ERC1404 smart contract
Returns an array of adapters
@ inheritdoc I Geyser update bookkeeping check for stale funding schedules to expire remove at idx by copying last element here , then popping off last ( we don ' t care about order )
add white List
Make as much capital as possible " free " for the Vault to take . Some slippage is allowed , since when this method is called the strategist is no longer receiving their performance fee . The goal is for the strategy to divest as quickly as possible while not suffering exorbitant losses . This function is used during emergency exit instead of prepare Return ( )
Returns the holder reward .
@ dev Allows the current admin to set the pending Admin address . @ param new Admin The address to transfer ownership to .
@ dev pauses the token contract , when contract is paused investors cannot transfer tokens anymore This function can only be called by a wallet set as agent of the token emits a Paused event
@ dev retrieve user ' s mine balance . account user ' s account mine Coin mine Coin address
@ dev Determine the total value of assets held by the vault and its strategies . @ return uint256 value Total value in USD ( 1e18 )
@ notice Calculates the exchange rate from the underlying to the C Token @ dev This function does not accrue interest before calculating the exchange rate @ return Calculated exchange rate scaled by 1e18
@ notice Draws collateral and returns it to DS Proxy @ dev If amount is bigger than max available we ' ll draw max @ param cdp Id Id of the CDP @ param join Addr Address of the join contract for the CDP collateral @ param amount Amount of collateral to draw Join ( join Addr ) . gem ( ) . withdraw ( amount ) ;
Quit the system , migrating the cdp ( ink , art ) to a different dst urn
@ notice Return channel ' s dispute timeout @ param c the channel to be viewed @ return channel ' s dispute timeout
@ dev Modifier throws if called by any account other than the pending Owner .
@ return unit256 , uint256 the KTY and SDAO rewards calculated based on starting month , ending month , locked LP , and starting LP .
calc In Given Out a I token Amount In b O token Balance Out b O \ ( w O w I ) \ b I token Balance In b I | | | ^ 1 | a O token Amount Out a I \ \ ( b O a O ) w I token Weight In w O token Weight Out ( 1 s F ) s F swap Fee ( + collected Fee )
Logged when the owner of a node assigns a new owner to a subnode .
@ dev Performs a deposit of the reserve asset to the given g Token . @ param token The g Token to deposit to . @ param amount The amount to be deposited . @ return success A boolean indicating whether or not the action succeeded .
Can only stop deposited
@ notice gets all the keys with a specific purpose from an identity @ param purpose a uint256 [ ] Array of the key types , like 1 MANAGEMENT , 2 ACTION , 3 CLAIM , 4 ENCRYPTION @ return keys Returns an array of public key bytes32 hold by this identity and having the specified purpose
@ dev Return ' s the function ' s logicial message sender . This method should be used to replace msg . sender for all meta tx enabled functions .
Update the given pool ' s SPACE allocation point . Can only be called by the owner .
Immutable once added , and you can always add more .
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
@ dev Returns the admin role that controls role . See { grant Role } and { revoke Role } . To change a role ' s admin , use { set Role Admin } .
Calculate x y rounding down . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Internal function that burns an amount of the token of a given account . @ param account The account whose tokens will be burnt . @ param value The amount that will be burnt .
@ dev Pauses swap . See { Pausable pause } . Requirements : the caller must have the PAUSER ROLE .
checks if the charity has expired
@ dev Same as { get } , with a custom error message when key is not in the map . require ( key Index ! 0 , error Message ) ; return map . entries [ key Index 1 ] . value ;
circuit breaker modifiers
@ dev Event triggered when a reward tier is deleted @ param index of tier to deleted
@ notice Calculates the current supply interest rate per block @ param cash The total amount of cash the market has @ param borrows The total amount of borrows the market has outstanding @ param reserves The total amount of reserves the market has @ param reserve Factor Mantissa The current reserve factor the market has @ return The supply rate per block ( as a percentage , and scaled by 1e18 )
@ dev SET The address of the ERC1155 NFT Based Eth Item model . It can be done only by the Factory controller
@ dev Sets the address of the current implementation @ param new Implementation address representing the new implementation to be set
@ dev Approve spender to transfer tokens and then execute a callback on recipient . @ param spender The address allowed to transfer to @ param value The amount allowed to be transferred @ return A boolean that indicates if the operation was successful .
check if addr has permission to user alpaca id to breed with as sire .
Check if transfer is allowed Permissions : Owner Admin Offering Contract Others transfer ( before transfer Enabled is true ) x x x x transfer From ( before transfer Enabled is true ) x o o x transfer transfer From ( after transfer Enabled is true ) o x x o
@ notice Transfer amount tokens from msg . sender to dst @ param dst The address of the destination account @ param raw Amount The number of tokens to transfer @ return Whether or not the transfer succeeded
@ dev function called whenever tokens are transferred from one wallet to another this function can update state variables in the compliance contract these state variables being used by can Transfer to decide if a transfer is compliant or not depending on the values stored in these state variables and on the parameters of the compliance smart contract @ param from The address of the sender @ param to The address of the receiver @ param amount The amount of tokens involved in the transfer
@ notice msg . sender approves spender to send amount tokens on its behalf , and then a function is triggered in the contract that is being approved , spender . This allows users to use their tokens to interact with contracts in one function call instead of two @ param spender The address of the contract able to transfer the tokens @ param amount The amount of tokens to be approved for transfer @ return True if the function call was successful
@ dev Transfers tokens ( ETH not supported ) for a user using the allowance set for the exchange . This way the approval can be used for all functionality ( and extended functionality ) of the exchange . Should NOT be used to deposit withdraw user funds , deposit withdraw should be used for that as they will contain specialised logic for those operations . This function can be called by the exchange to transfer onchain funds of users necessary for Agent functionality . This function needs to throw when an error occurred ! This function can only be called by the exchange . @ param from The address of the account that sends the tokens . @ param to The address to which ' amount ' tokens are transferred . @ param token The address of the token to transfer ( ETH is and cannot be suppported ) . @ param amount The amount of tokens transferred .
@ notice Commits to an amount during an auction require ( block . timestamp > start Date & & block . timestamp < end Date ) ;
@ dev Extracts the first rune in the slice into rune , advancing the slice to point to the next rune and returning self . @ param self The slice to operate on . @ param rune The slice that will contain the first rune . @ return rune . Load the first byte of the rune into the LS Bs of b Check for truncated codepoints
@ dev Changes the admin of the proxy . Only the current admin can call this function . @ param new Admin Address to transfer proxy administration to .
Election state change events
@ notice An event thats emitted when a delegate account ' s vote balance changes
Set Functions
@ dev Internal function to reset bid by setting bidder and bid to 0 . @ param origin Contract address of ERC721 contract . @ param token Id uin256 id of the token .
@ dev Use this Rover if you have a reward pool and you want the Rover to farm it @ param reward Token address of the reward token @ param pair either " s USD " or " WETH " @ param swap Module contract address with swap implementation
LIBRARY FUNCTIONS
@ notice Transfers all Ether held by the contract to the owner .
@ dev Withdraw Ethers
@ notice An event thats emitted when an account changes its delegate
@ dev Creates amount tokens and assigns them to account , increasing the total supply . If a send hook is registered for account , the corresponding function will be called with operator , data and operator Data . See { IERC777Sender } and { IERC777Recipient } . Emits { Minted } and { IERC20 Transfer } events . Requirements account cannot be the zero address . if account is a contract , it must implement the { IERC777Recipient } interface .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Removes a key value pair from a map . O ( 1 ) . Returns true if the key was removed from the map , that is if it was present .
@ notice Sets a new owner for the wallet . @ param new Owner The new owner .
@ dev modifier to allow actions only when the contract IS paused
calc Pool In Given Single Out p Ai pool Amount In t Ao \ \ w O \ \ b O token Balance Out | b O | \ | | \ t Ao token Amount Out p S | | \ 1 ( ( 1 ( t O t W ) ) s F ) | ^ \ t W p S | ps pool Supply \ \ w O token Weight Out p Ai \ \ b O t W total Weight s F swap Fee ( + collected Fee ) ( 1 e F ) e F exit Fee
@ dev Transfers and Locks a specified amount of tokens , for a specified reason and time @ param to adress to which tokens are to be transfered @ param reason The reason to lock tokens @ param amount Number of tokens to be transfered and locked @ param time Lock time in seconds uint256 valid Until now . add ( time ) ;
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged .
@ dev See { IERC721 approve } .
@ dev Extend parent behavior requiring to be within contributing period . @ param beneficiary Token purchaser @ param wei Amount Amount of wei contributed
@ return Last rebase result .
Last Cumulative Holders Reward Amount Per Property
@ notice update the round and payment related parameters for subsequent rounds @ param payment Amount is the payment amount for subsequent rounds @ param min Submissions is the new minimum submission count for each round @ param max Submissions is the new maximum submission count for each round @ param restart Delay is the number of rounds an Oracle has to wait before they can initiate a round
@ dev Unbinds all methods from the given wallet .
@ notice Allows for the beforehand calculation of the amount of reserve token to be deposited in order to receive the desired amount of shares . @ param net Shares The amount of this g Token shares to receive . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ return cost The cost , in the reserve token , to be paid . @ return fee Shares The fee amount of shares being deducted .
@ notice Set the Staking address @ dev Only callable by Governance address @ param address address for new Staking contract
@ dev Return Savings Manager Module address from the Nexus @ return Address of the Savings Manager Module contract
@ dev Allows for a fork to be proposed @ param prop New Tellor Address address for new proposed Tellor
@ notice Creates amount token to to . Must only be called by the owner .
@ dev Approve spender to transfer tokens and then execute a callback on recipient . @ param spender The address allowed to transfer to . @ param value The amount allowed to be transferred . @ param data Additional data with no specified format . @ return A boolean that indicates if the operation was successful .
Withdraw partial funds , normally used with a vault withdrawal we want buyback mm using LP token require ( vault ! address ( 0 ) , " ! vault " ) ;
@ notice Change the minter address @ param minter The address of the new minter
@ dev Returns the downcasted uint32 from uint256 , reverting on overflow ( when the input is greater than largest uint32 ) . Counterpart to Solidity ' s uint32 operator . Requirements : input must fit into 32 bits
@ dev Gets the balance of the specified address . @ param owner The address to query the balance of . @ return A uint256 representing the amount owned by the passed address .
Vote out Vote unready
@ dev Returns true if the module is ever registered .
@ dev Initialization function for implementing contract @ notice To avoid variable shadowing appended Arg after arguments name .
@ dev calculates the liquidity , stable , and variable rates depending on the current utilization rate and the base parameters
Withdraw all funds , normally used when migrating strategies require ( plate ! address ( 0 ) , " ! plate " ) ;
@ dev emitted when a borrower is liquidated @ param collateral the address of the collateral being liquidated @ param reserve the address of the reserve @ param user the address of the user being liquidated @ param purchase Amount the total amount liquidated @ param liquidated Collateral Amount the amount of collateral being liquidated @ param accrued Borrow Interest the amount of interest accrued by the borrower since the last action @ param liquidator the address of the liquidator @ param receive A Token true if the liquidator wants to receive a Tokens , false otherwise @ param timestamp the timestamp of the action
Calculate the amount of Dai a user would have to pay for certain amount of fy Dai . @ param dai Reserves Dai reserves amount @ param fy Dai Reserves fy Dai reserves amount @ param fy Dai Amount fy Dai amount to be traded @ param time Till Maturity time till maturity in seconds @ param k time till maturity coefficient , multiplied by 2 ^ 64 @ param g fee coefficient , multiplied by 2 ^ 64 @ return the amount of Dai a user would have to pay for given amount of fy Dai
@ notice Only manager is able to call this function @ dev Sets ability to use token as the main collateral @ param asset The address of the main collateral token @ param stability Fee Value The percentage of the year stability fee ( 3 decimals ) @ param liquidation Fee Value The liquidation fee percentage ( 0 decimals ) @ param initial Collateral Ratio Value The initial collateralization ratio @ param liquidation Ratio Value The liquidation ratio @ param liquidation Discount Value The liquidation discount ( 3 decimals ) @ param devaluation Period Value The devaluation period in blocks @ param usdp Limit The USDP token issue limit @ param min Col P The min percentage of COL value in position ( 0 decimals ) @ param max Col P The max percentage of COL value in position ( 0 decimals )
@ notice tx info status @ notice uninitialized , Redeemed
View function to see pending Test on frontend .
@ dev fallback implementation . Extracted to enable manual triggering .
@ notice get the last updated at block timestamp
returns Q112 encoded value
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev Appends a byte to the buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param data The data to append . @ return The original buffer , for chaining .
@ dev Handles the Alpaca energy change callback . @ param id The id of the Alpaca which the energy changed @ param old Energy The ID of the token being transferred @ param new Energy The amount of tokens being transferred
callable by anyone
@ dev Convert from 18 decimals to token defined decimals . Default no conversion .
produces the cumulative price using counterfactuals to save gas and avoid a call to sync .
@ dev Performs the token migration . Only ac BTC vault can trigger the migration . uint256 want IERC20 ( want ) . balance Of ( address ( this ) ) ; The initial deposit requires both WBTC and Ren BTC . WBTC is the first token and ren BTC is the second ! uint256 get IERC20 ( get ) . balance Of ( address ( this ) ) ;
get Upline of address
@ dev Returns whether the given spender can transfer a given token ID . @ param spender address of the spender to query @ param token Id uint256 ID of the token to be transferred @ return bool whether the msg . sender is approved for the given token ID , is an operator of the owner , or is the owner of the token
@ dev Deposits core coin into the fund and allocates a number of shares to the sender depending on the current number of shares , the funds value , and amount deposited @ return The amount of shares allocated to the depositor Check if the sender is allowed to deposit into the fund Require that the amount sent is not 0 Transfer core ERC20 coin from sender Calculate number of shares reset latest Oracle Caller for protect from double call If user would receive 0 shares , don ' t continue with deposit Add shares to total Add shares to address
Checks if add Member ( ) would add a the member to the committee ( qualified to join ) @ param addr is the candidate committee member address @ param weight is the candidate committee member weight @ return would Add Member bool indicates whether the member will be added
@ notice Updates user balance @ param user User address @ param to Distribution Index of distribution next to the last one , which should be processed
Absorb any tokens that have been sent to this contract into the pool
@ notice Safe unsigned subtraction @ param a first operand @ param b second operand @ dev Do a signed subtraction , and check that it produces a positive value ( i . e . , a b is valid if b < a ) @ return a b ; throws if underflow
Gets the total fee for this module of the passed in index ( fee % quantity )
@ notice Returns available token amount for a claim based on the current contract values and an already claimed amount input @ dev Will return amount Per Member for non members , so an external check is required for this case @ param already Claimed amount @ return The available amount for claim
@ dev Gets the exchange rate from the underlying to the DMM token , such that DMM : Token underlying exchange Rate @ return The current exchange rate , represented using 18 decimals . Meaning , 200000000000000000 is 0 . 2 .
@ notice Update delegate owner wallet for a given endpoint @ param service Type type of service to register , must be valid in Service Type Manager @ param endpoint url of the service to register url of the service to register @ param updated Delegate Owner Wallet address of new delegate wallet
@ dev Update reward variables of the given pool to be up to date . @ param pid ID of a specific LP token pool . See index of Pool Info [ ] .
if call On Removal is true , on Removal is called every time a user removes the contract as a resolver this function must use the sender Is Snowflake modifier returning false soft prevents users from removing the contract as a resolver however , note that they can force remove the resolver , bypassing on Removal
Deletes the value of the string type that mapped to the given key . Only the owner can execute this function .
@ notice Get the underlying price of a g Token @ dev Implements the Price Oracle interface for Compound v2 . @ param g Token The g Token address for price retrieval @ return Price denominated in USD , with 18 decimals , for the given g Token address Comptroller needs prices in the format : $ { raw price } 1e ( 36 base Unit ) Since the prices in this view have 6 decimals , we must scale them by 1e ( 36 6 base Unit )
@ dev Withdraws some balance out of the vault . Check balance Ideally this should not happen . Put here for extra safety .
@ dev See { max Transaction Amount } .
Special case for transact Call to support approvals on " bad " ERC20 tokens
@ dev Estimates the flash loan fee given the reserve token and required amount . @ param provider The flash loan provider , either Aave or Dydx . @ param token The ERC 20 token to flash borrow from . @ param net Amount The amount to be borrowed without considering repay fees . @ param fee Amount the expected fee to be payed in excees of the loan amount .
@ dev Equivalent to multiple { create Gen0Alpaca } function Requirements : all energies must be less than or equal to MAX GEN0 ENERGY
layout of message : : bytes : offset 0 : 32 bytes : : uint256 message length offset 32 : 20 bytes : : address recipient address offset 52 : 32 bytes : : uint256 value offset 84 : 32 bytes : : bytes32 transaction hash offset 116 : 32 bytes : : uint256 home gas price bytes 1 to 32 are 0 because message length is stored as little endian . mload always reads 32 bytes . so we can and have to start reading recipient at offset 20 instead of 32 . if we were to read at 32 the address would contain part of value and be corrupted . when reading from offset 20 mload will read 12 zero bytes followed by the 20 recipient address bytes and correctly convert it into an address . this saves some storage gas over the alternative solution which is padding address to 32 bytes and reading recipient at offset 32 . for more details see discussion in : https : github . com paritytech parity bridge issues 61
returns true if this order exists
convert LP to buyback principle token
@ notice Returns the owner of the DS Proxy that called the contract
@ dev Retrieves the current account liquidity in terms of a c Token underlying reserve . @ param ctoken The Compound c Token address . @ return liquidity Amount The available account liquidity for the underlying reserve token .
Internal If this was a hybrid standards solution you would have to check ERC165 ( to ) . supports Interface ( 0x4e2312e0 ) here but as this is a pure implementation of an ERC 1155 token set as recommended by the standard , it is not necessary . The below should revert in all failure cases i . e . to isn ' t a receiver , or it is and either returns an unknown value or it reverts in the call to indicate non acceptance . Note : if the below reverts in the on ERC1155Received function of the to address you will have an undefined revert reason returned rather than the one in the require test . If you want predictable revert reasons consider using low level to . call ( ) style instead so the revert does not bubble up and you can revert yourself on the ERC1155 ACCEPTED test .
@ dev Returns the address where a contract will be stored if deployed via { deploy } from a contract located at deployer . If deployer is this contract ' s address , returns the same value as { compute Address } .
@ dev See { ERC20 before Token Transfer } . Requirements : minted tokens must not cause the total supply to go over the cap . if ( from address ( 0 ) ) {
@ dev Adds two exponentials , returning a new exponential .
@ dev Transfer tokens from one address to another and then execute a callback on recipient . from The address which you want to send tokens from to The address which you want to transfer to value The amount of tokens to be transferred return A boolean that indicates if the operation was successful .
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ dev Tokenomic decition from governance
@ notice Repay draws collateral , converts to Dai and repays the debt @ dev Must be called by the DS Proxy contract that owns the CDP @ param data Uint array [ cdp Id , amount , min Price , exchange Type , gas Cost , 0x Price ] @ param join Addr Address of the join contract for the CDP collateral @ param exchange Address Address of 0x exchange that should be called @ param call Data data to call 0x exchange with
Returns the text data associated with an ENS node and key . @ param node The ENS node to query . @ param key The text data key to query . @ return The associated text data .
@ dev Sets the values for name , symbol , and decimals . All three of these values are immutable : they can only be set once during construction .
@ notice Submit a job
@ notice Gets the maximum amount of debt available to generate @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP @ dev Substracts 10 wei to aviod rounding error later on
@ dev PUBLIC FACING : Unlocks a completed stake , distributing the proceeds of any penalty immediately . The staker must still call stake End ( ) to retrieve their stake return ( if any ) . @ param staker Addr Address of staker @ param stake Index Index of stake within stake list @ param stake Id Param The stake ' s id
Calculate binary logarithm of x . Revert if x < 0 . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number if ( xc > 0x2 ) msb + 1 ;
@ dev Same as { xref ERC721 safe Mint address uint256 } [ safe Mint ] , with an additional data parameter which is forwarded in { IERC721Receiver on ERC721Received } to contract recipients .
Deposit LP tokens to Master Chef for SEPPUKU allocation .
@ notice Get the amount of tokens staked by account Address @ param account Address The owner of the tokens @ return The amount of tokens staked by the given account we assume it ' s not possible to stake in the future
@ dev Fetches the current token eth price accumulator from uniswap .
deposit reverse ( net ) : price reserve supply gross net 0 . 99 # fee is assumed to be 1 % for simplicity cost gross price fee gross net return cost , fee
Called if contract ever adds fees
@ dev Returns the total price in 18 digit USD for a given asset . Using Max since max is what we use for redeem pricing @ param symbol String symbol of the asset @ return uint256 USD price of 1 of the asset Price from Oracle is returned with 8 decimals scale to 18 so 18 8 10
Events .
@ notice Allowed users are able to remove allowed user @ dev owner is always allowed even if someone tries to remove it from allowed mapping @ param user Address of allowed user
@ dev Destroys amount tokens from account , reducing the total supply . Emits a Transfer event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
Sets contract that regulates dynamic farm rewards and burn rates ( changeable by DAO ) setting to 0x0 disabled nft rewards
@ dev Adds a new manager . @ param manager The new address to add .
@ dev Utility method to convert to decimals notation the original NFT ( if any ) to the ERC20 ones .
@ notice Allows for the beforehand calculation of shares to be received minted upon depositing the underlying asset to the contract . @ param underlying Cost The amount of the underlying asset being deposited . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return net Shares The net amount of shares being received . @ return fee Shares The fee amount of shares being deducted .
@ dev See { ERC20 before Token Transfer } . Requirements : the contract must not be paused .
@ notice query the available amount of LINK for an oracle to withdraw
@ dev Emitted when account grants or revokes permission to operator to transfer their tokens , according to approved .
Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
Check if deposit is enabled for a pool
This function updates state for the tracked amount of DMG that the user has earned . This function DOES NOT update state for the user ' s balance . @ return The amount of token paid in fees and the amount of DMG earned and sent to recipient .
@ dev Gets the users savings balance in Masset terms @ param save SAVE contract address @ param user Address of the user @ return balance in Masset units
Sets notifications to the delegation contract @ dev staking while notifications are disabled may lead to a discrepancy in the delegation data @ dev governance function called only by the migration manager @ param notify Delegations is a bool indicating whether to notify the delegation contract
@ notice An event emitted when a proposal has been canceled
Update the given pool ' s SEPPUKU allocation point . Can only be called by the owner .
@ dev Recover signer address from a message by using their signature @ param hash bytes32 message , the hash is the signed message . What is recovered is the signer address . @ param signature bytes signature , the signature is generated using web3 . eth . sign ( ) Check the signature length Divide the signature in r , s and v variables ecrecover takes the signature parameters , and the only way to get them currently is to use assembly . solhint disable next line no inline assembly Version of signature should be 27 or 28 , but 0 and 1 are also possible versions If the version is correct return the signer address
@ dev Return ' s the token ' s value in ETH
@ dev Calculates how many shares must be redeemed in order to withdraw so much of the growth reserve token . @ param cost The amount of the reserve token to be received on withdrawal . @ return gross Shares The number of shares one must redeem .
@ dev Internal function to burn a specific token Reverts if the token does not exist Deprecated , use burn ( uint256 ) instead @ param owner owner of the token to burn @ param token Id uint256 ID of the token being burned Since token Id will be deleted , we can clear its slot in owned Tokens Index to trigger a gas refund
@ dev Multiplies two unsigned integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Unpauses all token transfers . See { ERC721Pausable } and { Pausable unpause } . Requirements : the caller must have the PAUSER ROLE .
Sets the contract registry address @ dev governance function called only by an admin @ param new Contract Registry is the new registry contract
@ dev is Abstain Allow returns if the voting machine allow abstain ( 0 ) @ return bool true or false
@ dev Emitted when the pause is triggered by account .
@ dev Set Uint value in Insta Memory Contract .
@ dev Returns the value associated with key . O ( 1 ) . Requirements : key must be in the map .
@ dev Writes a bytes20 to the buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param off The offset to write at . @ param data The data to append . @ return The original buffer , for chaining .
This function call must use less than 30 000 gas
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
Update the given pool ' s HOLY allocation point . Can only be called by the owner .
@ dev Function to create new contract @ param tx Data Transaction data @ param value Amount of eth sending to new contract
uint8 private decimals ;
@ dev Allows the current owner to transfer control of the contract to a new owner . @ param new Owner The address to transfer ownership to .
@ dev Splits the slice , setting self to everything before the last occurrence of needle , and token to everything after it . If needle does not occur in self , self is set to the empty slice , and token is set to the entirety of self . @ param self The slice to split . @ param needle The text to search for in self . @ param token An output parameter to which the first token is written . @ return token . Not found
@ dev Set Uniswap KTY Weth Pair contract @ dev This function can only be carreid out by the owner of this contract .
@ dev Returns the downcasted uint40 from uint256 , reverting on overflow ( when the input is greater than largest uint40 ) . Counterpart to Solidity ' s uint32 operator . Requirements : input must fit into 40 bits
Self destruct the contract . This function can only be executed by the owner .
@ dev See { IERC1155Metadata URI uri } .
@ dev Returns true if an account is an operator of token Holder . Operators can send and burn tokens on behalf of their owners . All accounts are their own operator . See { operator Send } and { operator Burn } .
@ author james foley http : github . com realisation @ notice withdrawas amount of shell tokens from the the pool equally from the numeraire assets of the pool with no slippage @ param shells To Burn the full amount you want to withdraw from the pool which will be withdrawn from evenly amongst the numeraire assets of the pool @ return withdrawals the amonts of numeraire assets withdrawn from the pool
@ notice Internal function for transferring Ether to a designated recipient . It will return true and emit an Eth Withdrawal event if Ether was successfully transferred otherwise , it will return false and emit an External Error event . @ param recipient address payable The account that will receive the Ether . @ param amount uint256 The amount of Ether to transfer . @ return True if Ether was successfully transferred , else false .
Check if controller is not paused
@ dev removes a users staked positon if the required lock window is satisfied . Also pays out any rewards Accrued to the user if any rewards are pending .
@ dev Allows the proxy owner to upgrade the current version of the proxy . @ param implementation representing the address of the new implementation to be set .
Notifies a member removal for example due to vote Out vote Unready @ dev Called only by : Elections contract @ param member Removed is the removed committee member address @ return member Removed indicates whether the member was removed from the committee @ return removed Member Weight indicates the removed member weight @ return removed Member Certified indicates whether the member was in the certified committee
Like fast Call , but throws when the call is unsuccessful .
@ dev function owner has to call before the vesting starts to initialize the ETH balance of the contract . @ param self Stored vesting from vesting contract @ param balance the balance that is being vested . msg . value from the contract call .
Safe hippo transfer function , just in case if rounding error causes pool to not have enough HIPP Os .
@ notice Boosts the position and sends tokens back for FL @ param ex Data Exchange data @ param c Addresses c Tokens addreses and exchange [ c Coll Address , c Borrow Address ] @ param gas Cost Gas cost for specific transaction @ param flash Loan Data Data about FL [ amount , fee ]
@ notice Call account target , supplying value amount and data data . Only the owner may call this function . @ param target address The account to call . @ param amount uint256 The amount of ether to include as an endowment . @ param data bytes The data to include along with the call . @ return A boolean to indicate if the call was successful , as well as the returned data or revert reason .
Returns true if there are 2 elements that are the same in an array @ param A The input array to search @ return Returns boolean for the first occurrence of a duplicate
@ dev Private function to add a token to this extension ' s ownership tracking data structures . @ param to address representing the new owner of the given token ID @ param token Id uint256 ID of the token to be added to the tokens list of the given address
@ notice Get information about a service provider given their address @ param service Provider address of service provider
@ dev computes e ^ ( x FIXED 1 ) FIXED 1 input range : 0 < x < OPT EXP MAX VAL 1 auto generated via ' Print Function Optimal Exp . py ' Detailed description : Rewrite the input as a sum of binary exponents and a single residual r , as small as possible The exponentiation of each binary exponent is given ( pre calculated ) The exponentiation of r is calculated via Taylor series for e ^ x , where x r The exponentiation of the input is calculated by multiplying the intermediate results above For example : e ^ 5 . 521692859 e ^ ( 4 + 1 + 0 . 5 + 0 . 021692859 ) e ^ 4 e ^ 1 e ^ 0 . 5 e ^ 0 . 021692859 z y x % 0x10000000000000000000000000000000 ; res + z 0x10e1b3be415a0000 ; res + z 0x05a0913f6b1e0000 ; res + z 0x0168244fdac78000 ; res + z 0x004807432bc18000 ; res + z 0x000c0135dca04000 ; res + z 0x0001b707b1cdc000 ; res + z 0x000036e0f639b800 ; res + z 0x00000618fee9f800 ; res + z 0x0000009c197dcc00 ; res + z 0x0000000e30dce400 ; res + z 0x000000012ebd1300 ; res + z 0x0000000017499f00 ; res + z 0x0000000001a9d480 ; res + z 0x00000000001c6380 ; res + z 0x000000000001c638 ; res + z 0x0000000000001ab8 ; res + z 0x000000000000017c ; res + z 0x0000000000000014 ; res + z 0x0000000000000001 ; res res 0x21c3677c82b40000 + y + FIXED 1 ; res ( res 0x1c3d6a24ed82218787d624d3e5eba95f9 ) 0x18ebef9eac820ae8682b9793ac6d1e776 ; res ( res 0x18ebef9eac820ae8682b9793ac6d1e778 ) 0x1368b2fc6f9609fe7aceb46aa619baed4 ; res ( res 0x1368b2fc6f9609fe7aceb46aa619baed5 ) 0x0bc5ab1b16779be3575bd8f0520a9f21f ; res ( res 0x0bc5ab1b16779be3575bd8f0520a9f21e ) 0x0454aaa8efe072e7f6ddbab84b40a55c9 ; res ( res 0x0454aaa8efe072e7f6ddbab84b40a55c5 ) 0x00960aadc109e7a3bf4578099615711ea ; res ( res 0x00960aadc109e7a3bf4578099615711d7 ) 0x0002bf84208204f5977f9a8cf01fdce3d ; res ( res 0x0002bf84208204f5977f9a8cf01fdc307 ) 0x0000003c6ab775dd0b95b4cbee7e65d11 ;
@ dev Add new reward timestamp for address @ param reward Address being added to timestamp collection
Logs when a user is unregistered from the system before the sale
@ dev Withdraw ETH ERC20 Token . @ param token token address to withdraw . ( For ETH : 0x Eeeee Eeee Ee Eee Ee Ee Eee EE Eeeee Eeeeeeee E Ee E ) @ param amt token amount to withdraw . @ param get Id Get token amount at this ID from Insta Memory Contract . @ param set Id Set token amount at this ID in Insta Memory Contract .
@ notice Swift resolvers call to update LXL service status . @ dev Swift resolvers must first confirm to participate and can continue with details cancel LXL service . @ param details Context re : status update . @ param confirmed If true , swift resolver can participate in LXL resolution .
@ notice Sets the target collateralization ratio and margin to be maintained by this contract . See collateralization Ratio ( ) . Setting both parameters to 0 turns off collateralization and leveraging . This is a priviledged function restricted to the contract owner . @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization ( defaults to 96 % ) @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization margin ( defaults to 0 % )
priviledged functions
@ dev Disables the use of the specified circuit . This will stop NEW blocks from using the given circuit , blocks that were already committed can still be verified . @ param block Type The type of the block @ param block Size The number of requests handled in the block @ param block Version The block version ( i . e . which circuit version needs to be used )
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Tells the address of the owner @ return the address of the owner
@ dev Override to extend the way in which ether is converted to tokens . @ param wei Amount Value in wei to be converted into tokens @ return Number of tokens that can be purchased with the specified wei Amount
@ notice Revoke a liquidity pair from being accepted in future @ param liquidity the liquidity no longer accepted
Initializes the vaults and order of calls delete the last one without underflowing on i
@ notice Seller calls cancel before buyer accepts , returns underlying Cancel the option Redeem the underlying
Returns the latest Address Config instance .
@ dev Open a new position . @ return The new position and the ID of the opened position
@ dev Allows the spender address to spend up to the amount of token . @ param token Address Address of the ERC20 that can spend . @ param target Address Address which can spend the ERC20 . @ param amount Amount of ERC20 that can be spent by the target address .
Note : Failure Info ( but not Error ) is kept in alphabetical order This is because Failure Info grows significantly faster , and the order of Error has some meaning , while the order of Failure Info is entirely arbitrary .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Set hold to executed and kept open .
@ dev modifier that allows only the authorized addresses to execute the function
Update reward variables of the given pool to be up to date . city . mint ( devaddr , city Reward . div ( 20 ) ) ;
callable by anyone score is not counted anymore , and this must be followed by contract upgrade
@ notice Calculates the gas cost of transaction and send it to wallet @ param amount Amount that is converted @ param gas Cost Ether amount of gas we are spending for tx @ param c Token Addr C Token addr . of token we are getting for the fee @ return fee Amount The amount we took for the fee fee can ' t go over 20 % of the whole amount
take back unclaimed tokens of any type sent by mistake
@ dev gets freezing count @ param addr Address of freeze tokens owner .
@ notice Get parameters for permission array length @ param entity Address of the whitelisted entity that will be able to perform the role @ param app Address of the app @ param role Identifier for a group of actions in app @ return Length of the array
@ notice get the initialized state value of this contract @ return token Manager address of the token manager @ return smg Admin Proxy address of the storeman group admin @ return smg Fee Proxy address of the proxy to store fee for storeman group @ return quota address of the quota @ return sig Verifier address of the signature verifier
Buys YELD tokens paying in ETH on Uniswap and removes them from circulation Returns how many YELD tokens have been burned Burns the tokens by taking them out of circulation , sending them to the 0x0 address
Override this to add all tokens tokenized positions this contract manages on a persistant basis ( e . g . not just for swapping back to want ephemerally ) NOTE : Do not include want , already included in sweep below Example : function protected Tokens ( ) internal override view returns ( address [ ] memory ) { address [ ] memory protected new address [ ] ( 3 ) ; protected [ 0 ] token A ; protected [ 1 ] token B ; protected [ 2 ] token C ; return protected ; }
@ dev Returns the key value pair stored at position index in the map . O ( 1 ) . Note that there are no guarantees on the ordering of entries inside the array , and it may change when more entries are added or removed . Requirements : index must be strictly less than { length } .
@ dev This is the continuation of adjust Leverage once funds are borrowed via the Flash Loan callback . @ param amount The borrowed amount as requested . @ param fee The additional fee that needs to be paid for the Flash Loan . @ param which A flag indicating whether the funds were borrowed to 1 ) increase or 2 ) decrease the collateralization ratio . @ return success A boolean indicating whether or not the action succeeded .
Enter the longue . Pay some EAR Ns . Earn some shares .
@ dev Computes the amounts of underlying tokens when redeeming pool token . @ param amount Amount of pool tokens to redeem . @ return Amounts of underlying tokens redeemed . Redemption fee is charged with pool token before redemption . We might choose to use pool Token . total Supply to compute the amount , but decide to use D in case we have multiple minters on the pool token .
@ dev See ERC20 . burn From .
@ notice Get current unstake lockup duration
@ dev Emitted when the primary contract changes .
@ notice Updates Lock Period value @ param num Of Blocks length of the lock period @ dev Delegate only
Redeem tokens . These tokens are withdrawn from the owner address if the balance must be enough to cover the redeem or the call will fail . @ param amount Number of tokens to be issued
@ dev new Proposal Threshold At
@ param owner The address from which the balance will be retrieved @ return The balance
@ dev Repays a loan taken from a given c Token ' s market . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to repay . @ return success A boolean indicating whether or not the operation suceeded .
Update reward variables for all pools . Be careful of gas spending !
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ notice Event emitted when tokens are redeemed
@ dev Allows the current governor to transfer control of the contract to a new Governor . @ param new Governor The address to transfer governorship to .
@ dev Cancel a transfer of ownership to a new account . Can only be called by the current owner .
@ dev Remove operator , only owner can remove operator
@ dev Returns true if the two slices contain the same text . @ param self The first slice to compare . @ param self The second slice to compare . @ return True if the slices are equal , false otherwise .
@ dev This abstract method must be implemented by subcontracts in order to adjust the underlying reserve after a deposit takes place . The actual implementation depends on the strategy and algorithm used to handle the reserve . @ param cost The amount of the reserve token being deposited .
@ notice Allows for the beforehand calculation of the c Token amount given the amount of the underlying token and an exchange rate . @ param underlying Cost The cost in terms of the c Token underlying asset . @ param exchange Rate The given exchange rate as provided by exchange Rate ( ) . @ return cost The equivalent cost in terms of c Token
Safe icone transfer function , just in case if rounding error causes pool to not have enough ICON Es .
Maps a value of int256 type to a given key . Only the owner can execute this function .
Returns by changing the numerical value being emulated to the original number of digits .
@ notice Get service provider id for an endpoint
@ dev Decreases position ' s debt and burns USDP token @ param asset The address of the main collateral token @ param user The address of a position ' s owner @ param amount The amount of USDP to repay @ return updated debt of a position
@ dev Remember that only owner can call so be careful when use on contracts generated from other contracts . @ param token Address The token contract address @ param token Amount Number of tokens to be sent
@ dev Transfers ownership of the contract to the caller . Can only be called by a new potential owner set by the current owner .
@ notice Evaluate remove Delegator request @ param service Provider address of service provider @ param delegator address of delegator @ return Updated total amount delegated to the service provider by delegator Enforce lockup expiry block Enforce evaluation window for request Unstake on behalf of target service provider Update total delegated for SP total Service Provider Delegated Stake total amount delegated to service provider total Staked For Sp From Delegator amount staked from this delegator to targeted service provider Remove pending request information Remove from list of delegators Reset lockup expiry
Returns whether the Set Token has an external position for a given component ( if # of position modules is > 0 )
@ notice Event emitted when interest Rate Model is changed
@ dev Moves the current balances ( if any ) of stakes and shares tokens to the liquidity pool . This method is exposed publicly .
statechanging version we can use non state changing now because we updated state with balance Of Underlying call
@ dev Returns true is a given subnode is available . @ param subnode The target subnode . @ return true if the subnode is available .
@ dev Getter function since constants can ' t be read directly from libraries .
@ notice Used to check if is governance contract before setting governance address in other contracts
Converts USDC to ETH and returns how much ETH has been received from Uniswap swap Exact Tokens For ETH ( uint amount In , uint amount Out Min , address [ ] calldata path , address to , uint deadline ) ' amounts ' is an array where [ 0 ] is input USDC amount and [ 1 ] is the resulting ETH after the conversion even tho we ' ve specified the WETH address , we ' ll receive ETH since that ' s how it works on uniswap https : uniswap . org docs v2 smart contracts router02 # swapexacttokensforeth
@ dev Find the insert position for a new node with the given key @ param key Node ' s key @ param prev Id Id of previous node for the insert position @ param next Id Id of next node for the insert position prev Id does not exist anymore or now has a smaller key than the given key next Id does not exist anymore or now has a larger key than the given key No hint descend list starting from head No prev Id for hint ascend list starting from next Id No next Id for hint descend list starting from prev Id Descend list starting from prev Id
@ notice Allows for the beforehand calculation of the amount of reserve token to be withdrawn given the desired amount of shares . @ param gross Shares The amount of this g Token shares to provide . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param withdrawal Fee The current withdrawal fee as obtained by withdrawal Fee ( ) . @ return cost The cost , in the reserve token , to be received . @ return fee Shares The fee amount of shares being deducted .
@ dev Emitted when the admin account has changed .
@ dev User exit the reward pool , it ' s actually withdraw and get Reward
Allows Governance to withdraw partial shares to reduce slippage incurred and facilitate migration withdrawal strategy switch
@ dev Remove a token from a specific partition . @ param from Token holder . @ param partition Name of the partition . @ param value Number of tokens to transfer . If the total supply is zero , finds and deletes the partition . require ( index1 > 0 , " 50 " ) ; move the last item into the index being vacated total Partitions [ index1 1 ] last Value ; If the balance of the Token Holder ' s partition is zero , finds and deletes the partition . require ( index2 > 0 , " 50 " ) ; move the last item into the index being vacated partitions Of [ from ] [ index2 1 ] last Value ;
@ return the negation of p , i . e . p . addition ( p . negate ( ) ) should be zero . The prime q in the base field F q for G1
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
@ dev See { IERC721Enumerable token By Index } .
@ notice Sets the minimum and maximum amount of the g Token reserve profit to be processed on every operation . See growth Gulp Range ( ) . This is a priviledged function restricted to the contract owner . @ param growth Min Gulp Amount The minimum profit of the g Token reserve to be processed per deposit withdrawal . @ param growth Max Gulp Amount The maximum profit of the g Token reserve to be processed per deposit withdrawal .
@ dev Internal function for adding execcuted amount for some token . @ param token address of the token contract . @ param day day number , when tokens are processed . @ param value amount of bridge tokens .
@ notice Creates a request that can hold additional parameters @ param spec Id The Job Specification ID that the request will be created for @ param callback Address The callback address that the response will be sent to @ param callback Function Signature The callback function signature to use for the callback address @ return A Chainlink Request struct in memory
@ dev gets the available liquidity in the reserve . The available liquidity is the balance of the core contract @ param reserve the reserve address @ return the available liquidity
MODIFIERS
@ return portion of rewards which have been boosted by GYSR token
@ notice update accounting , unlock tokens , etc .
@ dev Allows the current owner to relinquish control of the contract .
requires enough gas for execution
In case a new uniswap router version is released
Gets
@ return The result of safely multiplying x and y , interpreting the operands as fixed point decimals of a standard unit . @ dev The operands should be in the standard unit factor which will be divided out after the product of x and y is evaluated , so that product must be less than 2 256 . Unlike multiply Decimal , this function rounds the result to the nearest increment . Rounding is useful when you need to retain fidelity for small decimal numbers ( eg . small fractions or percentages ) .
@ dev Burns a specific amount of tokens . @ param value The amount of token to be burned .
@ dev Sets Worker contract address @ param worker Address New worker contract address
@ notice Transfer amount tokens from src to dst @ param src The address of the source account @ param dst The address of the destination account @ param amount The number of tokens to transfer @ return Whether or not the transfer succeeded
@ notice This call is no longer supported .
Blocks @ dev Gets the current Merkle root of this exchange ' s virtual blockchain . @ return The current Merkle root .
@ return total amount of tokens
@ dev Returns an Uint256Slot with member value located at slot .
@ dev Private function execute a binary search to find the most recent registered past value of a history based on a given point in time . It will return zero if there is no registered value or if given time is previous to the first registered value . Note that this function will be more suitable when don ' t know how recent the time used to index may be . @ param self Checkpoints history to be queried @ param time Point in time to query the most recent registered past value of If there was no value registered for the given history return simply zero If the requested time is equal to or after the time of the latest registered value , return latest value If the requested time is previous to the first registered value , return zero to denote missing checkpoint Execute a binary search between the checkpointed times of the history No need for Safe Math : for this to overflow array size should be ~ 2 ^ 255 No need for Safe Math : high > low > 0 > high > 1 > mid > 1
Modifiers
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the multiplication of two signed integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Calculate x y . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ notice Verifies if receiver is contract and if so , calls ( to ) . on ERC1155Batch Received ( . . . )
@ dev Checks after execution of an operation ' s calls .
@ notice no support for history @ return false
@ dev Re invest whatever the goblin is working on .
@ notice Burns a specific amount of the caller ' s tokens . @ dev Only burns the caller ' s tokens , so it is safe to leave this method permissionless .
@ dev Gets the timestamp for the value based on their index @ param request ID is the request Id to look up @ param index is the value index to look up @ return uint timestamp
@ notice Sender borrows assets from the protocol to their own address @ param borrow Amount The amount of the underlying asset to borrow @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but we still want to log the fact that an attempted borrow failed borrow Fresh emits borrow specific logs on errors , so we don ' t need to
@ dev Returns the downcasted uint128 from uint256 , reverting on overflow ( when the input is greater than largest uint128 ) . Counterpart to Solidity ' s uint128 operator . Requirements : input must fit into 128 bits
@ dev Permanently lock transfers to return address Lock returns so there isn ' t always a way to send locked tokens
@ dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA . These withdrawn funds are then allocated to real world assets that will be used to pay interest into the DMMA . @ param new Min Reserve Ratio The new ratio ( with 18 decimals ) that is used to enforce a certain percentage of assets are kept in each DMMA .
@ notice Sender borrows assets from the protocol to their own address @ param borrow Amount The amount of the underlying asset to borrow @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) borrow Amount ;
DATA LAYOUT ENDS
@ dev Returns the interface hash for an interface Name , as defined in the corresponding https : eips . ethereum . org EIPS eip 1820 # interface name [ section of the EIP ] .
@ dev Returns the remaining number of tokens that caller will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { increase Allowance } , { decrease Allowance } or { transfer From } are called .
@ dev Returns the base URI set via { set Base URI } . This will be automatically added as a prefix in { token URI } to each token ' s URI , or to the token ID if no specific URI is set for that token ID .
@ dev Transfers amount of deposit tokens from the caller on behalf of user . @ param user User address who gains credit for this stake operation . @ param amount Number of deposit tokens to stake . @ param data Not used .
@ notice Execute desired action as a token holder @ dev I Forwarder interface conformance . Forwards any token holder action . @ param evm Script Script being executed bytes memory input new bytes ( 0 ) ; Add the managed token to the blacklist to disallow a token holder from executing actions on the token controller ' s ( this contract ) behalf
@ param owner The address of the account owning tokens @ param spender The address of the account able to transfer the tokens @ return Amount of remaining tokens allowed to spent
@ notice Deploy virtual contract to an on chain address @ param code bytes of virtual contract code @ param nonce nonce associated to virtual contract code @ return true if deployment succeeds
Dynamic allocate all the pool across different lending protocols if needed , use gas refund from gas Token NOTE : this method can be paused . msg . sender should approve this contract to spend GST2 tokens before calling this method @ return : whether has rebalanced or not
@ dev PUBLIC FACING : ERC20 total Supply ( ) is the circulating supply and does not include any staked Suns . allocated Supply ( ) includes both . @ return Allocated Supply in Suns
@ dev Multiplies x and y , assuming they are both fixed point with 27 digits .
@ notice Return whether an unbonding lock for a delegator is valid @ param delegator Address of delegator @ param unbonding Lock Id ID of unbonding lock @ return true if unbonding Lock for ID has a non zero withdraw round A unbonding lock is only valid if it has a non zero withdraw round ( the default value is zero )
@ notice Set the voting period for a Governance proposal @ dev Only callable by self via execute Transaction @ param voting Period new voting period
View function to see pending Sakuras on frontend .
@ dev Set address of Rebase Hooks contract which provides hooks for rebase so things like AM Ms can be synced with updated balances . @ param address Address of Rebase Hooks contract
@ dev Authorized caller transfers tokens from one account to another @ param self Stored token from token contract @ param from Address to send tokens from @ param to Address to send tokens to @ param value Number of tokens to send @ return True if completed
@ notice Get total currently staked for a delegator , for a given service provider
@ dev Rate differential between maturity and now in RAY . Returns 1 . 0 if not mature . rate Growth is floored to 1 . 0 . rate now rate Growth ( ) rate mat return Math . max ( UNIT , divdrup ( rate , rate0 ) ) ;
@ param monetary Policy The address of the monetary policy contract to use for authentication .
@ notice Provides the total amount kept in the reserve in terms of the underlying asset . @ return total Reserve Underlying The underlying asset balance on reserve .
@ notice Admin is set by owner first time , after that admin is super role and has permission to change owner @ param admin Address of multisig that becomes admin
@ notice Uniswap synced pairs
@ dev Tells the address of the current implementation @ return address of the current implementation
@ notice Get the Claims Manager address
@ notice Event emitted when the reserves are reduced
@ dev Burns the given amount of the stakes token . The default behavior of the function for general ERC 20 is to send the funds to address ( 0 ) , but that can be overriden by a subcontract . @ param stakes Amount The amount of the stakes token being burned .
@ dev Completes the liquidity pool migration by redeeming all funds from the pool . This method does not actually transfer the redemeed funds to the recipient , it assumes the caller contract will perform that . This method is exposed publicly . @ return migration Recipient The address of the recipient . @ return stakes Amount The amount of stakes ( GRO ) redeemed from the pool . @ return shares Amount The amount of shares ( g Token ) redeemed from the pool .
@ dev Delegate call to @ param to address to transfer to @ param value amount to transfer @ param orig Sender original msg . sender on delegate contract @ return success
@ dev Performs the reserve adjustment actions leaving a liquidity room , if necessary . It will attempt to incorporate the liquidity mining assets into the reserve and adjust the collateralization targeting the configured ratio . This method is exposed publicly . @ param room Amount The underlying token amount to be available after the operation . This is revelant for withdrawals , once the room amount is withdrawn the reserve should reflect the configured collateralization ratio . @ return success A boolean indicating whether or not both actions suceeded .
@ notice Creates amount token to to . Must only be called by the owner ( Mr Banker ) .
Creates a new virtual chain @ dev Called only by : an authorized subscription plan contract @ dev the initial amount paid for the virtual chain must be large than minimum Initial Vc Payment @ param name is the virtual chain name @ param tier is the virtual chain tier @ param rate is the virtual chain tier rate as determined by the subscription plan @ param amount is the amount paid for the virtual chain initial subscription @ param owner is the virtual chain owner . The owner may change virtual chain properties or ser config records @ param is Certified indicates the virtual is run by the certified committee @ param deployment Subset indicates the code deployment subset the virtual chain uses such as main or canary @ return vc Id is the virtual chain ID allocated to the new virtual chain @ return gen Ref Time is the virtual chain genesis reference time that determines the first block committee
@ return True if there is an active season for farming , or false if there isn ' t one .
@ dev Return Bonding Manager interface
@ notice Get the official price for a symbol @ param symbol The symbol to fetch the price of @ return Price denominated in USD , with 6 decimals
Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) spender The address which will spend the funds . added Value The amount of tokens to increase the allowance by .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Destroys amount tokens from account , deducting from the caller ' s allowance . See { ERC20 burn } and { ERC20 allowance } . Requirements : the caller must have allowance for accounts ' s tokens of at least amount .
Internal transfer , only can be called by this contract Prevent transfer to 0x0 address . Use burn ( ) instead Check if the sender has enough Check for overflows Save this for an assertion in the future Subtract from the sender Add the same to the recipient Asserts are used to use static analysis to find bugs in your code . They should never fail
@ dev Provide support for asset by passing its p Token address . Add to internal mappings and execute the platform specific , abstract method abstract Set P Token @ param asset Address for the asset @ param p Token Address for the corresponding platform token
@ dev Returns the manager for account . See { set Manager } .
@ dev This method dispatches the flash loan callback back to the GC Leveraged Reserve Manager library . See GC Leveraged Reserve Manager . sol and G Flash Borrower . sol .
@ dev This function is not view because on some protocols ( Compound , RAY with Compound oportunity ) it may cause storage writes
@ notice Removes the identifier from the whitelist . @ dev Price requests using this identifier will no longer succeed after this call . @ param identifier bytes32 encoding of the string identifier . Eg : BTC USD .
Allows owner to withdraw all tokens from contract ' s balance
@ dev Get Uint value from Insta Memory Contract .
@ dev external token transfer @ param external Token the token contract @ param to the destination address @ param value the amount of tokens to transfer @ return bool which represents success
@ notice check address has in Black List
@ notice votes for a proposal @ param id id of the proposal to vote for
@ notice Change the paused state of the contract @ dev Only the contract owner may call this . Ensure we ' re actually changing the state before we do anything Set our paused state . If applicable , set the last pause time . Let everyone know that our pause state has changed .
0 : DAI , 1 : USDC , 2 : USDT
@ dev Extends transfer From method with event when the callback failed . @ param from The address of the sender . @ param to The address of the recipient . @ param value The value to transfer . @ return Success status .
Import a position from src urn to the urn owned by cdp
ACTION CALLS IERC20 ( Axiatoken ) . transfer From ( msg . sender , address ( this ) , amount ) ;
ERC 721
Calculate natural logarithm of x . Revert if x < 0 . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
Work with LP tokens
@ notice unstake while applying GYSR token for boosted rewards @ param amount number of tokens to unstake @ param gysr number of GYSR tokens to apply for boost
@ notice In order to receive ETH transfers
@ notice Added a Job
@ dev Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol Emits an Approval event . @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ dev only owner can update auto Cracking Fee
@ notice Takes order from 0x and returns bool indicating if it is successful @ param ex Data Exchange data @ param eth Amount Ether fee needed for 0x order
@ dev Returns the element stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ notice Add credit to a job to be paid out for work @ param job the job being credited @ param amount the amount of credit being added to the job
Admins @ dev Sets the max time deposits have to wait before becoming withdrawable . @ param new Value The new value . @ return The old value .
@ dev Returns whether an agent address is an agent of an account owner @ param owner The account owner . @ param agent The agent address @ return True if the agent address is an agent for the account owner , else false
Owner can transfer out any accidentally sent ERC20 tokens
returns amount of LP locked permanently
@ notice Only manager is able to call this function @ dev Sets USDP limit for a specific collateral @ param asset The address of the main collateral token @ param limit The limit number
@ dev MUST return token type ( default is " ERC20 " ) . SHOULD be implemented by the public constant state variable .
@ dev Safely transfers token Id token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must exist and be owned by from . If the caller is not from , it must be have been allowed to move this token by either { approve } or { set Approval For All } . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
@ notice Event emitted when pending Admin is accepted , which means admin is updated
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address . If the account is non rebasing and doesn ' t have a set credits Per Token then set it i . e . this is a mint from a fresh contract
@ notice changes contenthash of pack Id , can only be called by controller @ param pack Id which market position is being altered @ param contenthash new contenthash
Function that will allow user to claim rewards
@ dev Create a Token Vault and fill with the specified newly minted tokens
Withdraw LP tokens from Master Chef .
The block . timestamp environment variable is used to determine a control flow decision . Note that the values of variables like coinbase , gaslimit , block number and timestamp are predictable and can be manipulated by a malicious miner . Also keep in mind that attackers know hashes of earlier blocks . Don ' t use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners . https : swcregistry . io docs SWC 116 AUDITOR NOTE : It appers that intent of this function is to add incremental rewards over time . Thus this vulnerability is not relly applicable to this function .
@ dev Business Logic to create a brand new Eth Item . It raises the ' New Native Created ' events . @ param model Init Call Payload The ABI encoded input parameters to be passed to the model to phisically create the NFT . It changes according to the Model Version . @ param eth Item Address The address of the new Eth Item @ param eth Item Init Response The ABI encoded output response eventually received by the Model initialization procedure .
@ notice Divides one Unsigned by an unscaled uint256 and " ceil ' s " the quotient , reverting on overflow or division by 0 . @ param a a Fixed Point numerator . @ param b a uint256 denominator . @ return the quotient of a divided by b . Because it is possible that a quotient gets truncated , we can ' t just call " Unsigned ( a . raw Value . div ( b ) ) " similarly to mul Ceil with a uint256 as the second parameter . Therefore we need to convert b into an Unsigned . This creates the possibility of overflow if b is very large .
@ dev Owner can set new Oracle @ param oracle Address address of Oracle contract
@ dev Multiplies value a by value b where rounding is towards the lesser number . ( positive values are rounded towards zero and negative values are rounded away from 0 ) .
@ dev Returns the addition of two unsigned integers , reverting with custom message on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Checks if the caller is approved for the specific strategy @ dev Currently auth callers are approved for all strategies @ param strategy Id Id of strategy not used for this version @ param caller Address of the caller
Require purchase isn ' t burn address and amount is greater than 0
Converts TUSD to ETH and returns how much ETH has been received from Uniswap swap Exact Tokens For ETH ( uint amount In , uint amount Out Min , address [ ] calldata path , address to , uint deadline ) ' amounts ' is an array where [ 0 ] is input TUSD amount and [ 1 ] is the resulting ETH after the conversion even tho we ' ve specified the WETH address , we ' ll receive ETH since that ' s how it works on uniswap https : uniswap . org docs v2 smart contracts router02 # swapexacttokensforeth
@ dev function allowing to unfreeze tokens partially in batch IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF user Addresses . length IS TOO HIGH , USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN " OUT OF GAS " TRANSACTION @ param user Addresses The addresses on which tokens need to be unfrozen @ param amounts the amount of tokens to unfreeze on the corresponding address This function can only be called by a wallet set as agent of the token emits user Addresses . length Tokens Unfrozen events
@ dev Compute the amount of pool token that needs to be redeemed . @ param amounts Unconverted token balances . @ return The amount of pool token that needs to be redeemed . balance balance + amount precision new D should be smaller than or equal to old D
@ dev Returns a newly allocated string containing the concatenation of self and other . @ param self The first slice to concatenate . @ param other The second slice to concatenate . @ return The concatenation of the two strings .
@ notice Full listing of all jobs ever added @ return array blob
Set the migrator contract . Can only be called by the owner .
solhint disable next line func name mixedcase Only executes for tokens that have approval transfer From implementation Gets token from the user ' s wallet Approves adapter to take the token amount Joins token collateral into the vat
When given allowance , transfers a token from the " from " to the " to " of quantity " quantity " . Ensures that the recipient has received the correct quantity ( ie no fees taken on transfer ) @ param token ERC20 token to approve @ param from The account to transfer tokens from @ param to The account to transfer tokens to @ param quantity The quantity to transfer
@ dev Returns the Uniform Resource Identifier ( URI ) for token Id token .
@ dev Change the validator fee ( new Owner ) . Can only be called by the current owner .
@ notice Borrows are repaid by another user ( possibly the borrower ) . @ param payer the account paying off the borrow @ param borrower the account with the debt being payed off @ param repay Amount the amount of undelrying tokens being returned @ return ( uint , uint ) An error code ( 0 success , otherwise a failure , see Error Reporter . sol ) , and the actual repayment amount . EFFECTS & INTERACTIONS ( No safe failures beyond this point )
Views
Set the latest Lockup contract address . Only the owner can execute this function .
@ notice Increase or decrease the staked balance for an account @ param account Address Account to modify @ param by amount to modify @ param increase true if increase in stake , false if decrease add new value to account history
@ dev Shifts a percentual share of the portfolio allocation from one g Token to another g Token . The reserve token can also be used as source or target of the operation . This does not actually shifts funds , only reconfigures the allocation . This method is exposed publicly . Note that in order to perform a token transfer where the target token is not the reserve token one must account the transfer ahead of time . See anounce Token Percent Transfer ( ) . @ param source Token The token address to provide the share . @ param target Token The token address to receive the share . @ param percent The percentual share to shift .
@ dev sets minimum stake to recieve rewards
@ notice Approve the passed address to spend the specified amount of ETH on behalf of msg . sender . @ dev Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender The address which will spend the funds . @ param value The amount of ETH to be spent .
@ dev Deactivates the module for the given wallet ( msg . sender ) before the module is removed . Warning : this method shall ONLY be callable by a wallet .
@ notice Set a dedicated address as the " escape hatch " account . This account can then call escape ( ) at any point to " sweep " the entire Dai , USDC , residual c Dai , c USDC , d Dai , d USDC , and Ether balance from the smart wallet . This function call will revert if the smart wallet has previously called permanently Disable Escape Hatch at any point and disabled the escape hatch . No value is returned from this function it will either succeed or revert . @ param account address The account to set as the escape hatch account . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param user Signature bytes A signature that resolves to the public key set for this account in storage slot zero , user Signing Key . If the user signing key is not a contract , ecrecover will be used ; otherwise , ERC1271 will be used . A unique hash returned from get Custom Action ID is prefixed and hashed to create the message hash for the signature . @ param dharma Signature bytes A signature that resolves to the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Custom Action ID is prefixed and hashed to create the signed message .
@ notice Set the max number of concurrent In Progress proposals @ dev Only callable by self via execute Transaction @ param new Max In Progress Proposals new value for max In Progress Proposals
@ notice Allows governance to change the Keep3r Helper for max spend @ param kprh new helper address to set
@ notice enable the warning flags for multiple addresses . Access is controlled by raising Access Controller , except for owner who always has access . @ param subjects List of the contract addresses whose flag is being raised
@ dev Overflow proof multiplication
@ dev Returns whether token Id exists . Tokens can be managed by their owner or approved accounts via { approve } or { set Approval For All } . Tokens start existing when they are minted ( mint ) , and stop existing when they are burned ( burn ) .
Update reward variables of the given pool to be up to date . kimchi . mint ( devaddr , kimchi Reward . div ( 20 ) ) ;
Retrieves the last staker snapshot index , if any . @ dev Reverts if the staker history is empty . @ return The last staker snapshot index .
@ dev Transfer token to a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ notice Send amount tokens to to from from on the condition it is approved by from @ param from The address holding the tokens being transferred @ param to The address of the recipient @ param amount The amount of tokens to be transferred @ return True if the transfer was successful The controller of this contract can move tokens around at will , this is important to recognize ! Confirm that you trust the controller of this contract , which in most situations should be another open source smart contract or 0x0 The standard ERC 20 transfer From functionality
Update the given pool ' s XRUNE allocation point . Can only be called by the owner .
@ dev burns tokens @ param burn Val amount to burn
@ dev Transfer shares for a specified address @ param to The address to transfer to . @ param value The amount to be transferred . @ return true upon success
Target farming token of this strategy .
@ dev See { IERC20 minimum Supply } .
admin mint early bird Lp token only once
Calculate natural exponent of x . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number require ( x < 0x400000000000000000 ) ; if ( x < 0x400000000000000000 ) return 0 ;
@ notice Enters the market for the collatera and borrow tokens @ param c Token Addr Coll Collateral address we are entering the market in @ param c Token Addr Borrow Borrow address we are entering the market in
@ dev Allows the current owner to transfer control of the contract to a new Owner . @ param new Owner the address to transfer ownership to .
Math
@ notice Only manager is able to call this function @ dev Sets a permission for an address to modify the Vault @ param who The target address @ param permit The permission flag
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Throws if called by any account other than the minter .
@ notice Burn amount of tokens of a given token id @ param from The address to burn tokens from @ param id Token id to burn @ param amount The amount to be burned
@ dev " Consume a nonce " : return the current value and increment .
@ notice Transfers collateral Amount of collateral Currency into the specified sponsor ' s position . @ dev Increases the collateralization level of a position after creation . This contract must be approved to spend at least collateral Amount of collateral Currency . @ param sponsor the sponsor to credit the deposit to . @ param collateral Amount total amount of collateral tokens to be sent to the sponsor ' s position .
@ notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache . @ param account Address of the contract to check . @ param interface Id ERC165 interface to check . @ return True if account implements interface Id , false otherwise .
@ notice Create a parameter proposal @ param record the key of this parameter @ param value the new proposed value of this parameter
Withdraw tokens from Hdcore Vault .
@ dev checks if an account is able to claim the tokens Requirements : Should only be called by the owner ( Governace )
@ dev Function to mint tokens @ param to The address that will receive the minted tokens . @ param value The amount of tokens to mint . @ return A boolean that indicates if the operation was successful .
@ dev Returns an Address Slot with member value located at slot .
Safe moongain transfer function , just in case if rounding error causes pool to not have enough Moon Gains .
get claimed rewards
@ dev Adds two signed integers , reverts on overflow .
Withdraw all funds , normally used when migrating strategies require ( vault ! address ( 0 ) , " Golff : ! vault " ) ;
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint representing the amount owned by the passed address .
owner of portal can change get Bancor Data helper , for case if Bancor do some major updates
@ dev helper function to compute updates to funding schedules @ param idx index of the funding @ return the number of unlockable shares funding schedule is in future empty handle zero duration period or leftover dust from integer division
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but performing a static call . Available since v3 . 3 .
events
@ dev MUST return amount of the given token locked on the protocol by the given account .
@ notice Returns the sum of supplied values . @ param values The collection of values to create the sum from .
@ dev function to burn TOKO @ param redeemer the account whose TOKO will be burnt @ param value the amount of TOKO to be burnt
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
Modifiers We use function instead modifiers because modifiers require more bytes Not allow trade while user do deposit or withdraw
Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ notice allows a keeper to activate register themselves after bonding @ param bonding the asset being activated as bond collateral
permissioned functions deploy a staking reward contract for the staking token , and store the reward amount the reward will be distributed to the staking reward contract no sooner than the genesis info . reward Amount reward Amount ;
@ dev Reverts if the request is already pending @ param request Id The request ID for fulfillment
@ dev Returns the token collection symbol .
@ dev Integer division of two signed integers truncating the quotient , reverts on division by zero . require ( b ! 0 ) ; require ( ! ( b 1 & & a INT256 MIN ) ) ;
@ notice Proof of collateral split contract @ dev Verifies that contract is a collateral split contract @ return true if contract is a collateral split contract
Freeze Account .
Refreshes the address of the other contracts the contract interacts with @ dev called by the registry contract upon an update of a contract in the registry @ dev the protocol upgrades contract does not interact with other contracts and therefore implements an empty refresh Contracts function
Migrates liquidity to new location , assuming the 3 months lockup has passed preventing abuse .
@ notice Set the Staking address @ dev Only callable by Governance address @ param staking Address address for new Staking contract
token 2 eth
to withdraw any ETH balance sitting in the contract
@ notice Get list of valid service types
@ notice Return the list of tokens ' addresses composing the CPM token Using Eth Address Lib . eth Address ( ) as mock address for ETH . The reference token is first on the list @ return addresses
@ dev Validation of an incoming purchase . Use require statements to revert state when conditions are not met . Use super to concatenate validations . @ param beneficiary Address performing the token purchase @ param wei Amount Value in wei involved in the purchase
@ dev Transfer tokens from one address to another . @ param from The address you want to send tokens from . @ param to The address you want to transfer to . @ param value The amount of tokens to be transferred .
@ dev sets new admin fee . Must be smaller than admin Fee Max
@ dev Count how many people meet the conditions
@ notice Remove an existing service type @ param service Type name of service type to remove Overwrite service index Mark as invalid Note stake bounds are not reset so they can be checked to prevent service Type from being re added
@ dev Tells the address of the implementation where every call will be delegated . @ return address of the implementation to which it will be delegated
check stakeholders Count Before Update before add Today Count , get current Stakeholders Count , get new Stakers by minusing both if above 1 you check for the percent Growth ; ( new Stakers 100 ) stakeholders Count Before Update if 0 or below set reward To Share and percent Growth to 0 check Community Growth Percent will be called every 24hrs convert percent Growth to wei to get actual values gets 10 % of percent Growth
Alias of sell ( ) and withdraw ( ) .
@ dev This funcion allows the contract owner to add more locked distribution tokens , along with the associated " unlock schedule " . These locked tokens immediately begin unlocking linearly over the duraction of duration Sec timeframe . @ param amount Number of distribution tokens to lock . These are transferred from the caller . @ param duration Sec Length of time to linear unlock the tokens . Update locked Tokens amount before using it in computations after .
@ dev The threshold ( denominated in the reward token ) over which the vault will auto harvest on allocate calls .
@ dev Emitted when new Admin Role is set as role ' s admin role , replacing previous Admin Role DEFAULT ADMIN ROLE is the starting admin for all roles , despite { Role Admin Changed } not being emitted signaling this . Available since v3 . 1 .
@ notice deposit available liquidity in the system into the Uniswap Pair , manual for now , require keepers in later iterations
@ dev Gets the official ENS registry .
@ dev emitted on borrow @ param reserve the address of the reserve @ param user the address of the user @ param amount the amount to be deposited @ param borrow Rate Mode the rate mode , can be either 1 stable or 2 variable @ param borrow Rate the rate at which the user has borrowed @ param origination Fee the origination fee to be paid by the user @ param borrow Balance Increase the balance increase since the last borrow , 0 if it ' s the first time borrowing @ param referral the referral number of the action @ param timestamp the timestamp of the action
@ dev Multiplies two precise units , and then truncates by the full scale , rounding up the result @ param x Left hand input to multiplication @ param y Right hand input to multiplication @ return Result after multiplying the two inputs and then dividing by the shared scale unit , rounded up to the closest base unit .
@ notice Get the registry address
@ return False . This application does not support staking history .
@ dev Divides two exponentials , returning a new exponential . ( a scale ) ( b scale ) ( a scale ) ( scale b ) a b , which we can scale as an Exp by calling get Exp ( a . mantissa , b . mantissa )
Update funding pool
@ notice Get the contract voting period
Calculate arithmetics average of x and y , i . e . ( x + y ) 2 rounding down . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ notice See documentation for function calculate . @ dev The list passed as an argument may be permuted .
@ dev Set up this wallet by assigning a controller and initial modules . Note that calling this method more than once will throw . And this method must be invoked before owner is initialized @ param controller The Controller instance . @ param modules The initial modules .
@ notice View function for getting the current user signing key for the smart wallet . @ return The current user signing key .
@ dev Burn amount tokens and decreasing the total supply .
@ dev Returns a token ID owned by owner at a given index of its token list . Use along with { balance Of } to enumerate all of owner ' s tokens .
@ dev not bullet proof check , but additional measure , actually we require specific ( contract ) address , which is key ( see only Bank Contract )
@ notice Gets the current time . Will return the last time set in set Current Time if running in test mode . Otherwise , it will return the block timestamp . @ return uint for the current Testable timestamp . return now ;
Function calls
@ dev The amount that is claimable for a stream @ param stream Id The stream to get the claimabout amount for . @ return The amount that is claimable for this stream
@ notice Get the number of tokens held by the account @ param account The address of the account to get the balance of @ return The number of tokens held
@ dev Set up this wallet by assigning an controller . Note that calling this method more than once will throw . And this method must be invoked before owner is initialized @ param controller The Controller instance .
@ dev updates the state of a reserve as a consequence of a borrow action . @ param reserve the address of the reserve on which the user is borrowing @ param user the address of the borrower @ param principal Borrow Balance the previous borrow balance of the borrower before the action @ param balance Increase the accrued interest of the user on the previous borrowed amount @ param amount Borrowed the new amount borrowed @ param rate Mode the borrow rate mode ( stable , variable )
@ return the start time of the token vesting .
@ dev Exchange owner withdraws fees from the exchange . @ param token Fee token address @ param fee Recipient Fee recipient address
@ dev Returns the smallest of two numbers .
Calculates one Percent of the uint256 amount sent
@ return All of the DMM token I Ds that are currently in the ecosystem . NOTE : this is an unfiltered list .
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
@ dev Set the configuration for the given goblin . Must only be called by the owner . @ param goblin The goblin address to set configuration . @ param is Goblin Whether the given address is a valid goblin . @ param accept Debt Whether the goblin is accepting new debts . @ param work Factor The work factor value for this goblin . @ param kill Factor The kill factor value for this goblin .
@ dev Convert signed 64 . 64 fixed point number into signed 64 bit integer number rounding down . @ param x signed 64 . 64 bit fixed point number @ return signed 64 bit integer number
Safe RLY transfer function , just in case pool does not have enough RLY ; either rounding error or we ' re not supplying more rewards
@ dev See { IERC1155 is Approved For All } .
@ dev Token burn function @ param tokens uint256 amount of tokens to burn
function dai ( address ) external view returns ( uint ) ;
@ dev Calculate the vested and unclaimed period and tokens available for recepient to claim Due to rounding errors once grant duration is reached , returns the entire left grant amount For vesting created with a future start date , that hasn ' t been reached , return 0 , 0 If over vesting duration , all tokens vested
@ notice Liquidates the sponsor ' s position if the caller has enough synthetic tokens to retire the position ' s outstanding tokens . Liquidations above a minimum size also reset an ongoing " slow withdrawal " ' s liveness . @ dev This method generates an ID that will uniquely identify liquidation for the sponsor . This contract must be approved to spend at least tokens Liquidated of token Currency and at least final Fee Bond of collateral Currency . @ param sponsor address of the sponsor to liquidate . @ param min Collateral Per Token abort the liquidation if the position ' s collateral per token is below this value . @ param max Collateral Per Token abort the liquidation if the position ' s collateral per token exceeds this value . @ param max Tokens To Liquidate max number of tokens to liquidate . @ param deadline abort the liquidation if the transaction is mined after this timestamp . @ return liquidation Id ID of the newly created liquidation . @ return tokens Liquidated amount of synthetic tokens removed and liquidated from the sponsor ' s position . @ return final Fee Bond amount of collateral to be posted by liquidator and returned if not disputed successfully .
View function to see pending Forests on frontend .
Returns the latest Address Config address .
@ notice Moves tokens amount from sender to recipient . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Multiplies value a by value b ( result is rounded down ) . It ' s assumed that the value b is the significand of a number with 18 decimals precision .
@ dev mint
@ dev Receives some ETH from the Wrapped Ether contract in exchange for WETH . Note that the contract using this library function must declare a payable receive fallback function . @ param amount The amount of ETH to be wrapped in WETH . @ return success A boolean indicating whether or not the operation suceeded .
@ notice Amount of token loaned to the recipient along with the savings assets . @ param owner Account owner address @ return amount
@ dev Performs a Solidity function call using a low level call , transferring value wei . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Requirements : target must be a contract . the calling contract must have an ETH balance of at least value . calling target with data must not revert .
@ notice Create a new crowd proposal @ notice Call uni . approve ( factory address , uni Stake Amount ) before calling this method @ param targets The ordered list of target addresses for calls to be made @ param values The ordered list of values ( i . e . msg . value ) to be passed to the calls to be made @ param signatures The ordered list of function signatures to be called @ param calldatas The ordered list of calldata to be passed to each call @ param description The block at which voting begins : holders must delegate their votes prior to this block
@ notice Helper function for claim Rewards to get balances from Staking contract and do validation @ param sp Factory reference to Service Provider Factory contract @ param service Provider address for which rewards are being claimed @ return ( total Balance In Staking , total Balance In SP Factory , total Active Funds , sp Locked Stake , total Rewards , deployer Cut )
Get the earned rewards and withdraw staked tokens
Withdraw staked funds from the pool
@ dev Returns Governor address from the Nexus @ return Address of Governor Contract
Anyone : query list entry at index N ( no ordering guarantees )
Returns whether the Set Token component default position real unit is greater than or equal to units passed in .
@ dev Get interest payable of the account
@ dev Removes a value from a set . O ( 1 ) . Returns true if the key was removed from the map , that is if it was present .
@ dev Gets the official ENS reverse registrar .
Perform LP token migration from legacy Uniswap V2 to Tako Swap . Take the current LP token address and return the new LP token address . Migrator should have full access to the caller ' s LP token . Return the new LP token address . XXX Migrator must have allowance access to Uniswap V2 LP tokens . Tako Swap must mint EXACTLY the same amount of Tako Swap LP tokens or else something bad will happen . Traditional Uniswap V2 does not do that so be careful !
@ return The total number of fragments .
@ dev Set the Dai Savings Rate . See : docs rates . txt @ param pot The address of the Pot core contract @ param rate The accumulated rate ( ex . 4 % > 1000000001243680656318820312 ) require ( ( rate > Math Lib . RAY ) & & ( rate < 2 Math Lib . RAY ) ) ;
@ dev Allows an owner to revoke a confirmation for a transaction . @ param transaction Id Transaction ID .
Returns the current reward balance of the given address . @ dev calculates the up to date balances ( differ from the state ) @ param addr is the address to query @ return delegator Staking Rewards Balance the rewards awarded to the guardian role @ return guardian Staking Rewards Balance the rewards awarded to the guardian role
@ dev Permanent stops minting @ param self Stored token from token contract @ return True if completed
@ notice begin the unbonding process to stop being a keeper @ param amount allows for partial unbonding
deploys a new proxy instance sets owner of proxy to caller
@ dev Checks if a forced withdrawal is pending for an account balance . @ param account ID The account ID of the account to check . @ param token The token address @ return True if a request is pending , false otherwise
@ dev Changes the admin of proxy to new Admin . Requirements : This contract must be the current admin of proxy .
@ dev Hook that is called before any token transfer . This includes minting and burning . Calling conditions : When from and to are both non zero , from ' s token Id will be transferred to to . When from is zero , token Id will be minted for to . When to is zero , from ' s token Id will be burned . from cannot be the zero address . to cannot be the zero address . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Function to be called by top level contract after initialization to enable the contract at a future block number rather than immediately .
function burn ( address account , uint256 amount ) external only Admin { burn ( account , amount ) ; }
@ notice Position should be spawned ( USDP borrowed from position ) to call this method @ notice Depositing tokens must be pre approved to vault address @ notice Token using as main collateral must be whitelisted @ dev Deposits collaterals and borrows USDP to spawned positions simultaneously @ param col Amount The amount of COL token to deposit @ param usdp Amount The amount of USDP token to borrow
@ dev Approve or remove operator as an operator for the caller . Operators can call { transfer From } or { safe Transfer From } for any token owned by the caller . Requirements : The operator cannot be the caller . Emits an { Approval For All } event .
Redeems a Set Token into a valid reserve asset representing the appropriate % of Net Asset Value of the Set Token to the specified to address . Only valid if there are available reserve units on the Set Token . @ param set Token Instance of the Set Token contract @ param reserve Asset Address of the reserve asset to redeem with @ param set Token Quantity Quantity of Set Tokens to redeem @ param min Reserve Receive Quantity Min quantity of reserve asset to receive @ param to Address to redeem reserve asset to
@ notice Update maximum delegators allowed @ param max Delegators new max delegators
@ dev Delegates votes from signatory to delegatee @ param delegatee The address to delegate votes to @ param nonce The contract state required to match the signature @ param expiry The time at which to expire the signature @ param v The recovery byte of the signature @ param r Half of the ECDSA signature pair @ param s Half of the ECDSA signature pair
@ notice Transfer amount tokens from msg . sender to dst @ param dst The address of the destination account @ param amount The number of tokens to transfer @ return Whether or not the transfer succeeded
calculates the CREATE2 address for a pair without making any external calls hex ' e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303 '
@ dev Must be called after crowdsale ends , to do some extra finalization work . Calls the contract ' s finalization function .
@ dev See { IERC20 transfer } . recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev I Saving Strategy . supply And Borrow Apy implementation
Get the pending rewards of the staker @ param staker the address of the staker
@ dev Initializes the data structure . This method is exposed publicly . @ param reserve Token The ERC 20 token address of the reserve token ( c Token ) . @ param mining Token The ERC 20 token address to be collected from liquidity mining ( COMP ) .
@ dev Integer division of two numbers truncating the quotient , reverts on division by zero . require ( b > 0 , ERROR DIV ZERO ) ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev xref : ROOT : erc1155 . adoc # batch operations [ Batched ] variant of { mint } .
@ dev Fetch the most recent registered past value of a history based on a given point in time that is not known how recent it is beforehand . It will return zero if there is no registered value or if given time is previous to the first registered value . It uses a binary search . @ param self Checkpoints history to be queried @ param time Point in time to query the most recent registered past value of
check for pending withdrawals
deprecate current contract in favour of a new one
@ notice Confirm channel withdrawal @ dev anyone can confirm a withdrawal intent @ param self storage data of Celer Ledger contract @ param channel Id ID of the channel
@ notice Calculates protocol fee @ param src Addr selling token address ( if eth should be WETH ) @ param msg Value msg . value in transaction @ param src Amount amount we are selling if we are not selling ETH msg value is always the protocol fee if msg value is larger than src Amount , that means that msg value is protocol fee + src Amount , so we subsctract src Amount from msg value we have an edge case here when protocol fee is higher than selling amount if msg value is lower than src amount , that means that src Amount isn ' t included in msg value , so we return msg value
@ notice convert USD amount to CAD amount @ param amount amount of USD in 18 decimal places @ return amount of CAD in 18 decimal places
@ dev Collect reward tokens for a specific strategy and swap for supported stablecoin via Uniswap @ param strategy Addr Address of the strategy to collect rewards from
@ notice Borrow WBTC from Compound Protocol and keep funds in the contract . This is for testing purposes . @ param token Address The address of the collateral token . @ param c Token Address The address of the collateral c Token . @ param token Amount The amount of collateral to provide to Compound . @ param comptroller Address The Compound comptroller address . @ param c Wbtc Address The address of c WBTC . @ param wbtc Amount The amount of WBTC to borrow . @ param min Renbtc Amount The minimum amount of ren BTC to swap for . @ param btc Destination The bitcoin address to send BTC to . @ return Nothing .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Transfer tokens to a specified address . @ param to The address to transfer to . @ param value The amount to be transferred . @ return True on success , false otherwise .
@ notice Creates amount token to to . Must only be called by the owner ( Trams Master ) .
@ return the name of the token .
@ notice Sender borrows assets from the protocol to their own address @ param borrow Amount The amount of the underlying asset to borrow @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
Added to support recovering LP Rewards from other systems to be distributed to holders Cannot recover the staking token or the rewards token
@ dev only owner can remove burner
@ notice An event emitted when a crowd proposal is created
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ param volcie ID uint256 the ID of the Volcie Token @ dev A Volcie Token needs to have its associated LP locked for at least 30 days to be eligible for claiming yields .
View function to see pending NANOCOR Es on frontend .
@ dev vest Start At : day unit
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . @ param spender The address which will spend the funds . @ param amount The amount of tokens to be spent .
@ notice Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Multiplies two exponentials given their mantissas , returning a new exponential .
@ notice Get the Service Provider Factory address
@ dev Know the reason on success or failure based on the EIP 1066 application specific status codes . @ param function Sig ID of the function that needs to be called . @ param partition Name of the partition . @ param operator The address performing the transfer . @ param from Token holder . @ param to Token recipient . @ param value Number of tokens to transfer . @ param data Information attached to the transfer . [ CAN CONTAIN THE DESTINATION PARTITION ] @ param operator Data Information attached to the transfer , by the operator ( if any ) . @ return ESC ( Ethereum Status Code ) following the EIP 1066 standard . @ return Additional bytes32 parameter that can be used to define application specific reason codes with additional details ( for example the transfer restriction rule responsible for making the transfer operation invalid ) . @ return Destination partition .
@ dev Allows a withdrawal to be done to an adddresss that is different than initialy specified in the withdrawal request . This can be used to implement functionality like fast withdrawals . This function can only be called by an agent . @ param from The address of the account that does the withdrawal . @ param to The address to which ' amount ' tokens were going to be withdrawn . @ param token The address of the token that is withdrawn ( ' 0x0 ' for ETH ) . @ param amount The amount of tokens that are going to be withdrawn . @ param storage ID The storage ID of the withdrawal request . @ param new Recipient The new recipient address of the withdrawal .
@ return the amount of the token released .
@ dev This function is used by the init function to succesfully stake the initial 5 miners . The function updates their status state and status start date so they are locked it so they can ' t withdraw and updates the number of stakers in the system . Ensure they can only stake if they are not currrently staked or if their stake time frame has ended and they are currently locked for witdhraw current Status : 1 ,
@ dev Useful utility method to calculate the percentage fee to transfer to the DFO for the minted Eth Item amount . @ param erc20Wrapper Amount The amount of minted Eth Item
@ dev Withdraws COL token from a position @ param asset The address of the main collateral token @ param user The address of a position ' s owner @ param amount The amount of tokens to withdraw
@ notice Returns the current per block supply interest rate for this c Token @ return The supply interest rate per block , scaled by 1e18
Gets instance of price oracle on Controller . Note : Price Oracle is stored as index 1 on the Controller
@ notice request exchange RC20 token with WRC20 on wanchain @ param unique ID fast cross chain random number @ param smg ID ID of storeman @ param token Pair ID token pair ID of cross chain token @ param value exchange value @ param user Account address of user , used to receive original token coin @ param r signature @ param s signature
Forcefully retire a pool Only sets the period finish to 0 This will prevent more rewards from being disbursed
@ return true if account is a contract . @ param account Address to be checked .
All we care about is the ratio of each coin
Set new cost for multiplier , can only be triggered by the timelock
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender proposal . proposer proposal . flags [ 3 ] 1 ;
@ dev SET The address of the Smart Contract whose code will serve as a model for all the Eth Item ERC20Wrappers ( please see the eth item token standard for further information ) . It can be done only by the Factory controller
@ notice Rebond tokens for an unbonding lock to a delegate while a delegator is in the Unbonded status and updates the transcoder pool using an optional list hint if needed @ dev If the delegate joins the transcoder pool , the caller can provide an optional hint for the delegate ' s insertion position in the pool via the new Pos Prev and new Pos Next params . A linear search will be executed starting at the hint to find the correct position . In the best case , the hint is the correct position so no search is executed . See Sorted Doubly LL . sol for details on list hints @ param to Address of delegate @ param unbonding Lock Id ID of unbonding lock to rebond with @ param new Pos Prev Address of previous transcoder in pool if the delegate joins the pool @ param new Pos Next Address of next transcoder in pool if the delegate joins the pool
We still alow anyone to withdraw these funds for the account owner
Moves tokens to the inaccessible account and then sends event for the oracles to monitor and issue on other chain to : EOS address tokens : number of tokens in satoshis
public view functions to view common data
@ notice Returns a normalized debt amount based on the current rate @ param amount Amount of dai to be normalized @ param rate Current rate of the stability fee @ param dai Vat Balance Balance od Dai in the Vat for that CDP
Return target ( numerator denominator ) .
Called when new token are issued
@ dev Withdraws a certain amount of staked LRC for an exchange to the given address . This function is meant to be called only from within exchange contracts . @ param recipient The address to receive LRC @ param requested Amount The amount of LRC to withdraw @ return amount LRC The amount of LRC withdrawn
@ dev Allows the proxy owner to upgrade the current version of the proxy and call the new implementation to initialize whatever is needed through a low level call . @ param implementation representing the address of the new implementation to be set . @ param data represents the msg . data to bet sent in the low level call . This parameter may include the function signature of the implementation to be called with the needed payload
Must emot when approval for a second party operator address to manager all tokens for an owner address is enabled or disabled
@ notice Sender supplies assets into the market and receives c Tokens in exchange @ dev Accrues interest whether or not the operation succeeds , unless reverted @ param mint Amount The amount of the underlying asset to supply @ return ( uint , uint ) An error code ( 0 success , otherwise a failure , see Error Reporter . sol ) , and the actual mint amount . accrue Interest emits logs on errors , but we still want to log the fact that an attempted borrow failed mint Fresh emits the actual Mint event if successful and logs on errors , so we don ' t need to
@ dev Calculates the total reserve amount . It sums up the reserve held by the contract with the underlying reserve held by the g Tokens that make up the portfolio . @ return total Reserve The computed total reserve amount .
@ notice Retrieves the stored address of the LINK token @ return The address of the LINK token
@ dev Initiate transfer ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner . Current owner will still be owner until new owner accept ownership . @ param new Owner new owner address
@ return the cap of the crowdsale .
SMARTXXX : function set Fee To ( address ) external ;
@ return KTY reserves and the total supply of L Ps from a uniswap pair contract associated with a pair code in Yield Farming .
@ notice Get current undelegate lockup duration
@ notice Transfer amount tokens from src to dst @ param src The address of the source account @ param dst The address of the destination account @ param raw Amount The number of tokens to transfer @ return Whether or not the transfer succeeded
Immutable once set .
@ dev Returns the percentual participation of a token ( including the reserve token ) in the portfolio composition . This method is exposed publicly . @ param token The given token address . @ return percent The token percentual share of the portfolio .
@ dev An overridable way to retrieve the 0x Dev Utils contract address . @ return dev Utils The 0x Dev Utils contract address .
NOTE : Reentrancy is allowed here to allow flashloan use cases
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev override purchase validation to add extra value logic . @ return true if sended more than minimal value
@ dev Initialize the A Coconut Swap .
@ dev Computes the winning proposal taking all previous votes into account .
Returns the minimum self stake required for the effective stake @ return min Self Stake Percent Mille is the minimum self stake in percent mille
@ dev Retrieves the last up to date exchange rate between the c Token and its underlying reserve token . @ param ctoken The Compound c Token address . @ return exchange Rate The exchange rate between the c Token and its underlying reserve token .
@ dev use this when reporting a known error from the money market or a non upgradeable collaborator
Update the given pool ' s CROPS allocation point . Can only be called by the owner .
@ dev Calculate x y rounding down , where x is signed 64 . 64 fixed point number and y is unsigned 256 bit integer number . Revert on overflow . @ param x signed 64 . 64 fixed point number @ param y unsigned 256 bit integer number @ return unsigned 256 bit integer number
@ dev Gets the the delegation fee data corresponding to the current epoch
@ notice Returns available token amount for a claim by a given member in the current block based on the current contract values @ param member The member address to return available balance for @ return The available amount for a claim in the current block
require a function to be called through GSN only
Perform LP token migration from legacy Uniswap V2 to Trump Swap . Take the current LP token address and return the new LP token address . Migrator should have full access to the caller ' s LP token . Return the new LP token address . XXX Migrator must have allowance access to Uniswap V2 LP tokens . Trump Swap must mint EXACTLY the same amount of Trump Swap LP tokens or else something bad will happen . Traditional Uniswap V2 does not do that so be careful !
@ dev Sets a new contract that implements the I Off Chain Asset Valuator interface . @ param new Off Chain Currency Valuator The new contract that implements the I Off Chain Asset Valuator interface .
Logged when the owner of a node transfers ownership to a new account .
Pool actions , requires impersonation via delegatecall
Returns the vote unready threshold @ return vote Unready Percent Mille Threshold is the minimum threshold in percent mille ( 0 100 , 000 )
function get Net Worth Balance ( address collateral ) external view returns ( int256 ) ;
@ dev Copies a slice to a new string . @ param self The slice to copy . @ return A newly allocated string containing the slice ' s text .
ONLY TEST TOKENS BURN
@ dev IR Token . mint implementation
@ notice Unbond credit for a job
@ notice Redeem all Dharma Dai held by this account for Dai .
@ notice Accepts a deposit to the g Token using ETH . The g Token must have WETH as its reserve Token . This is a payable method and expects ETH to be sent ; which in turn will be converted into shares . See G Token . sol and G Token Base . sol for further documentation . @ param growth Token The WETH based g Token .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested .
@ notice Gets CDP ratio @ param cdp Id Id of the CDP @ param next Price Next price for user
@ notice Gets balance of this contract in terms of the underlying @ dev This excludes the value of the current message , if any @ return The quantity of underlying owned by this contract
@ notice Get the current allowance from owner for spender @ param owner The address of the account which owns the tokens to be spent @ param spender The address of the account which may transfer tokens @ return The number of tokens allowed to be spent ( 1 means infinite )
@ dev prevents contracts from interacting with functions that have this modifier if ( code Length 0 ) { use assert to consume all of the bots gas , kek assert ( true false , ' oh boy bots get rekt ' ) ; }
@ dev Checks if an address is a manger . @ param addr The address to check . @ return True if the address is a manager , False otherwise .
Victim actions , requires impersonation via delegatecall
transfer Ownership to other address
@ dev Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance .
event for LP added to v BRIGHT @ param token Amount amount of tokens added to LP @ param eth Amount ETH paid for purchase @ param liquidity the LP @ param token Address address
this event is emitted when an Identity has been updated the event is emitted by the ' update Identity ' function old Identity is the old Identity contract ' s address to update new Identity is the new Identity contract ' s
@ dev Sets the collateralization ratio and margin . These values are percentual and relative to the maximum collateralization ratio provided by the underlying asset . This method is exposed publicly . @ param collateralization Ratio The target collateralization ratio , between lend and borrow , that the reserve will try to maintain . @ param collateralization Margin The deviation from the target ratio that should be accepted .
View the governance address of the Vault to assert privileged functions can only be called by governance . The Strategy serves the Vault , so it is subject to governance defined by the Vault .
@ dev Allows token holders to vote @ param dispute Id is the dispute id @ param supports Dispute is the vote ( true the dispute has basis false vote against dispute ) Get the vote Weight or the balance of the user at the time block Number the disupte began Require that the msg . sender has not voted Requre that the user had a balance > 0 at time block Number the disupte began ensures miners that are under dispute cannot vote Update user voting status to true Update the number of votes for the dispute If the user supports the dispute increase the tally for the dispute by the vote Weight otherwise decrease it Let the network know the user has voted on the dispute and their casted vote
Anyone can withdraw non core strategy tokens > sent to treasury should send tokens to this contract send funds to treasury
@ dev Returns true if account has been granted role .
Internal
@ return number of active funding schedules
Yeld To receive ETH after converting it from USDC
@ notice The duration of voting on a proposal , in blocks function voting Period ( ) public pure returns ( uint ) { return 17280 ; }
@ dev Divides value a by value b ( result is rounded down positive numbers toward 0 and negative away from 0 ) .
@ dev Called by : Elections contract Notifies a a member removal for example due to vote Out vote Unready
Override functions that change user balance
@ dev Handles Aave callback . Delegates the processing of the funds to the virtual function process Flash Loan and later takes care of paying it back . @ param token The ERC 20 contract address . @ param amount The amount being borrowed . @ param fee The fee , in addition to the amount borrowed , to be repaid . @ param params Additional user parameters provided when the flash loan was requested .
@ notice Provides the contract address for the G Exchange implementation currently being used to convert the mining token ( COMP ) into the underlying asset . @ return exchange A G Exchange compatible contract address , or address ( 0 ) if it has not been set .
@ notice Gets CDP ratio @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP
@ dev Mints some amount of tokens to an address @ param to Address of the future owner of the token @ param id Token ID to mint @ param quantity Amount of tokens to mint @ param data Data to pass if receiver is contract
@ notice Set the Governance address @ dev Only callable by Governance address @ param governance Address address for new Governance contract
@ dev Withdraw ETH from the bank by burning the share tokens .
@ dev Initiates the liquidity pool migration by setting a funds recipent and starting the clock towards the 7 day grace period . This method is exposed publicly . @ param migration Recipient The recipient address to where funds will be transfered .
@ dev Converts an unsigned uint256 into a signed int256 . Requirements : input must be less than or equal to max Int256 .
@ dev Checks whether the cap has been reached . @ return Whether the cap was reached
@ dev Claims rewards for a given group of epochs and a given group of fee Handlers , distribute fees and its share to pool Master @ param epoch Group An array of epochs for which rewards are being claimed . Asc order and uniqueness is required . @ param fee Handler Group An array of Fee Handlers for which rewards are being claimed .
@ dev See { IERC1155Metadata URI uri } . This implementation returns the same URI for all token types . It relies on the token type ID substitution mechanism https : eips . ethereum . org EIPS eip 1155 # metadata [ defined in the EIP ] . Clients calling this function must replace the \ { id \ } substring with the actual token type ID .
FUNCTIONS TODO : document
@ dev Deploys a contract using CREATE2 . The address where the contract will be deployed can be known in advance via { compute Address } . Note that a contract cannot be deployed twice using the same salt . solhint disable next line no inline assembly
@ dev Creates a new Full Smart Fund @ param name The name of the new fund @ param success Fee The fund managers success fee @ param fund Type Fund type enum number @ param is Require Trade Verification If true fund can buy only tokens , which include in Merkle Three white list
Adds voting rights exercised as against .
@ notice Applies the credit provided in add Liquidity To Job to the job @ param provider the liquidity provider @ param liquidity the pair being added as liquidity @ param job the job that is receiving the credit
@ dev Emitted when the pause is lifted by a pauser ( account ) .
@ dev add a default player
@ dev Submits an onchain request to withdraw Ether or ERC20 tokens from the protocol fees account . The complete balance is always withdrawn . Anyone can request a withdrawal of the protocol fees . Note that after such an operation , it will take the owner some time ( no more than MAX AGE FORCED REQUEST UNTIL WITHDRAW MODE ) to process the request and create the deposit to the offchain account . @ param token Address The address of the token , use 0x0 for Ether .
Pauses the repair operations . @ dev Reverts if the sender is not the contract owner . @ dev Reverts if the contract is paused already .
@ return the symbol of the token .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfer From . This is zero by default . This value changes when approve or transfer From are called .
@ dev get all operators .
@ notice Set a dedicated address as the " escape hatch " account . This account can then call escape ( address token ) at any point to " sweep " the entire balance of the token ( or Ether given null address ) from the smart wallet . This function call will revert if the smart wallet has previously called permanently Disable Escape Hatch at any point and disabled the escape hatch . No value is returned from this function it will either succeed or revert . @ param account address The account to set as the escape hatch account . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param user Signature bytes A signature that resolves to the public key set for this account in storage slot zero , user Signing Key . If the user signing key is not a contract , ecrecover will be used ; otherwise , ERC1271 will be used . A unique hash returned from get Custom Action ID is prefixed and hashed to create the message hash for the signature . @ param dharma Signature bytes A signature that resolves to the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Custom Action ID is prefixed and hashed to create the signed message .
@ dev Initializes the data structure . This method is exposed publicly . @ param stakes Token The ERC 20 token address to be used as stakes token ( GRO ) . @ param shares Token The ERC 20 token address to be used as shares token ( g Token ) .
@ notice Return blockhash for a round @ param round Round number @ return Blockhash for round
@ dev Returns the timestamps for when active personal stakes for an address will unlock @ dev These accessors functions are needed until https : github . com ethereum web3 . js issues 1241 is solved @ param address address that created the stakes @ return uint256 [ ] array of timestamps
@ notice Sets the minimum nonce for a valid off chain approval message from the senders account . @ dev This can be used to invalidate a previously signed message .
Contoller only function for withdrawing for free This is used to swap between vaults
@ notice Gets the current profit from corruption for this contract in terms of the collateral currency . @ dev This is equivalent to the collateral pool available from which to pay fees . Therefore , derived contracts are expected to implement this so that pay fee methods can correctly compute the owed fees as a % of Pf C . @ return pfc value for equal to the current profit from corruption denominated in collateral currency .
@ dev Sets the values for { name } and { symbol } , initializes { decimals } with a default value of 18 . To select a different value for { decimals } , use { setup Decimals } . All three of these values are immutable : they can only be set once during construction .
@ dev get the valid range of input amount
@ dev Returns data related to all epochs and fee Handlers with unclaimed rewards , for the pool .
@ notice Updates LXL with new market terms . @ param terms New terms to add to LXL market .
@ notice Performs the burning of g Token shares upon the withdrawal of the reserve token . The actual amount of the reserve token to be received can be calculated using the calc Withdrawal Cost From Shares function . In every withdrawal , 10 % of the shares is retained in terms of withdrawal fee . The fee amount and half of its equivalent reserve amount are immediately burned . @ param gross Shares The gross amount of this g Token shares being redeemed in the operation .
Safe v USD mint , ensure we are the current owner . v ETH will be minted together with fixed rate .
@ notice External view function to check the current implementation of this contract ( i . e . the " logic " for the contract ) . @ return The current implementation for this contract .
@ dev Called when an address wants to purchase tokens @ param self Stored crowdsale from crowdsale contract @ param amount amound of wei that the buyer is sending @ return true on succesful purchase if the token price increase interval has passed , update the current day and change the token price prevents going out of bounds on the token Price Points array uint256 num Tokens ; uint256 new Balance ; uint256 wei Tokens ; uint256 zeros ; uint256 leftover Wei ; uint256 remainder ; Find the number of tokens as a function in wei can ' t overflow because it is under the cap calculate the amout of ether in the owners balance self . base . owner Balance new Balance ; can ' t overflow because it will be under the cap subtract tokens from owner ' s share
@ dev Returns the account approved for token Id token . Requirements : token Id must exist .
@ notice The event emitted when the stored price is updated
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
no zeros for decimals necessary
@ dev enables borrowing on a reserve @ param self the reserve object @ param stable Borrow Rate Enabled true if the stable borrow rate must be enabled by default , false otherwise
Transfer Validity We use different transfer validity functions because those described in the interface don ' t allow to verify the certificate ' s validity . Indeed , verifying the ecrtificate ' s validity requires to keeps the function ' s arguments in the exact same order as the transfer function . function can Transfer ( address to , uint256 value , bytes calldata data ) external view returns ( byte , bytes32 ) ; function can Transfer From ( address from , address to , uint256 value , bytes calldata data ) external view returns ( byte , bytes32 ) ; function can Transfer By Partition ( address from , address to , bytes32 partition , uint256 value , bytes calldata data ) external view returns ( byte , bytes32 , bytes32 ) ; Controller Events We don ' t use this event as we don ' t use " controller Transfer " event Controller Transfer ( address controller , address indexed from , address indexed to , uint256 value , bytes data , bytes operator Data ) ; We don ' t use this event as we don ' t use " controller Redeem " event Controller Redemption ( address controller , address indexed token Holder , uint256 value , bytes data , bytes operator Data ) ; Document Events
@ notice Cancel pending remove Delegator request @ param service Provider address of service provider @ param delegator address of delegator Reset lockup expiry
Last Cumulative Holders Reward Price Per Property
@ dev Pauses all token transfers . See { ERC721Pausable } and { Pausable pause } . Requirements : the caller must have the PAUSER ROLE .
@ dev Internal function to set the base URI for all token I Ds . It is automatically added as a prefix to the value returned in { token URI } , or to the token ID if { token URI } is empty .
@ dev Add gem Join adapter address from Maker in mapping
@ dev Transfers mintership of the contract to a new account ( new Minter ) . Can only be called by the current minter .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
Modifier
@ dev Returns the current pending Registry Admin
@ dev updates the state of the core as a result of a deposit action @ param reserve the address of the reserve in which the deposit is happening @ param user the address of the the user depositing @ param amount the amount being deposited @ param is First Deposit true if the user is depositing for the first time
@ dev Overrides parent method taking into account variable rate . @ param wei Amount The value in wei to be converted into tokens @ return The number of tokens wei Amount wei will buy at present time
Query to get the pending reward uint256 total Staked Time ( now . sub ( users [ caller ] . last Claimed Date ) ) . div ( 1 hours ) ;
@ notice does the common vote finalization @ param id the id of the proposal to vote @ param for is this vote for or against the proposal
@ notice internal function for staking
@ dev Gets the interest rate from the underlying token , IE DAI or USDC . @ return The current interest rate , represented using 18 decimals . Meaning 65000000000000000 is 6 . 5 % APY or 0 . 065 .
@ dev Prevents a contract from calling itself , directly or indirectly . not Entered true ;
@ notice Sets commission rates as a transcoder and if the caller is not in the transcoder pool tries to add it @ dev Percentages are represented as numerators of fractions over Math Utils . PERC DIVISOR @ param reward Cut % of reward paid to transcoder by a delegator @ param fee Share % of fees paid to delegators by a transcoder
Set the latest Policy Factory contract address . Only the owner can execute this function .
@ dev Return Insta D App Mapping Addresses return 0xe81F70Cc7C0D46e12d70efc60607F16bb D617E88 ;
@ dev gets the reserve variable borrow index @ param reserve the reserve address @ return the reserve variable borrow index
@ nonce Provider burns WRITER and receives RESERVE from the pool @ param amount Amount of RESERVE to receive @ param max Burn Maximum amount of tokens that can be burned @ return mint Amount of tokens to be burnt
@ notice Provides the minimum and maximum amount of the g Token reserve profit to be processed on every operation . If the profit balance is below the minimum it waits until more accumulates . If the total profit is beyond the maximum it processes the maximum and leaves the rest for future operations . The profit accumulated via g Token reinvestment is converted to the underlying asset and used to mint the associated c Token . This range is used to avoid wasting gas converting small amounts as well as mitigating slipage converting large amounts . @ return growth Min Gulp Amount The minimum profit of the g Token reserve to be processed per deposit withdrawal . @ return growth Max Gulp Amount The maximum profit of the g Token reserve to be processed per deposit withdrawal .
@ dev Performs a flash loan . New tokens are minted and sent to the receiver , who is required to implement the { IERC3156Flash Borrower } interface . By the end of the flash loan , the receiver is expected to own amount + fee tokens and have them approved back to the token contract itself so they can be burned . @ param receiver The receiver of the flash loan . Should implement the { IERC3156Flash Borrower . on Flash Loan } interface . @ param token The token to be flash loaned . Only address ( this ) is supported . @ param amount The amount of tokens to be loaned . @ param data An arbitrary datafield that is passed to the receiver . @ return true is the flash loan was successfull .
@ dev Burns value tokens owned by msg . sender . @ param value amount of tokens to burn .
Internal Helper functions
@ dev update Value At Now used to update the balances map and the total Supply History @ param checkpoints The history of data being updated @ param value The new number of tokens
Returns the divisor to determine the developer ' s share of coins at the given block . For M coins minted , dev gets M . div ( val ) . For a block range , undershoot by providing to block ( dev gets up to , not over , the bonus amount ) .
@ dev Either Transfer Single or Transfer Batch MUST emit when tokens are transferred , including zero amount transfers as well as minting or burning Operator MUST be msg . sender When minting creating tokens , the from field MUST be set to 0x0 When burning destroying tokens , the to field MUST be set to 0x0 The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the " circulating supply " for a given token ID To broadcast the existence of a token ID with no initial balance , the contract SHOULD emit the Transfer Single event from 0x0 to 0x0 , with the token creator as operator , and a amount of 0
@ dev Same as { get } , with a custom error message when key is not in the map .
@ dev Deposit asset into Compound @ param asset Address of asset to deposit @ param amount Amount of asset to deposit @ return amount Deposited Amount of asset that was deposited
@ dev Returns guardians who are either active or pending addition .
Truffle wont compile if this isn ' t commented function execute ( bytes memory code , bytes memory data ) public virtual payable returns ( address , bytes32 ) ;
emergency withdraw without caring about pending earnings pending earnings will be lost set to 0 if used emergency withdraw set pending earnings to 0 here
View how much the Vault would like to pull back from the Strategy , based on it ' s present performance ( since its last report ) . Can be used to determine expected Return in your strategy .
@ dev Verifies blocks with the given public data and proofs . Verifying a block makes sure all requests handled in the block are correctly handled by the operator . @ param block Type The type of block @ param block Size The number of requests handled in the block @ param block Version The block version ( i . e . which circuit version needs to be used ) @ param public Inputs The hash of all the public data of the blocks @ param proofs The ZK proofs proving that the blocks are correct @ return True if the block is valid , false otherwise
@ dev Sets admin Role as role ' s admin role . Emits a { Role Admin Changed } event .
@ dev Updates Uint Parameters of a code @ param code whose details we want to update @ param val value to set if ( code " SMLP " ) {
Drippers can approve for spender to transfer From ( . . . ) tokens from the Drippers account . The spender contract function receive Approval ( . . . ) is then executed
@ dev Precisely divides two units , by first scaling the left hand operand . Useful for finding percentage weightings , i . e . 8e18 10e18 80 % ( or 8e17 ) @ param x Left hand input to division @ param y Right hand input to division @ return Result after multiplying the left operand by the scale , and executing the division on the right hand input .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
Withdraw accumulated yield @ param token Address address of the token asset @ required must pay yield claim fee Global stats update update the record transfer fee to the owner mint more tokens inside token contract equivalent to pending Yield
@ notice Allows liquidity providers to remove liquidity @ param liquidity the pair being unbound @ param job the job being unbound from
@ dev updates the implementation of the lending pool data provider @ param provider the new lending pool data provider implementation
@ dev Convert a standard decimal representation to a high precision one .
Sets a virtual chain config record @ dev may be called only by the virtual chain owner @ param vc Id is the virtual chain ID @ param key is the name of the config record to update @ param value is the config record value
@ dev gets the a Token contract address for the reserve @ param reserve the reserve address @ return the address of the a Token contract
@ dev Internal function to burn a specific token . Reverts if the token does not exist . Deprecated , use { ERC721 burn } instead . @ param owner owner of the token to burn @ param token Id uint256 ID of the token being burned Since token Id will be deleted , we can clear its slot in owned Tokens Index to trigger a gas refund
@ dev Stores a new address in the EIP1967 admin slot . solhint disable next line no inline assembly
@ dev Try to send native tokens to the address . If it fails , it will force the transfer by creating a selfdestruct contract @ param receiver address that will receive the native tokens @ param value the amount of native tokens to send
@ notice Destroy the contract
@ dev Getter function for the request with highest payout . This function is used within the get Variables On Deck function @ return uint request Id of request with highest payout at the time the function is called
@ notice Keeper slashed
Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
minter will only be tunnel
@ return The amount of underlying received
Imports delegations during initial migration @ dev initialization function called only by the initialization Manager @ dev Does not update the Rewards or Election contracts @ dev assumes deactivated Rewards @ param from is a list of delegator addresses @ param to is the address the delegators delegate to
@ dev Same as { xref Address function Call address bytes string } [ function Call ] , but performing a delegate call . Available since v3 . 3 . solhint disable next line avoid low level calls
@ dev Set the number of seconds that pass before system debt is auctioned for MKR tokens . @ param vow The address of the Vow core contract @ param duration Duration in seconds
Additional functions separate from the original masterchef contract
Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev allows Tellor to read data from the address Vars mapping @ param data is the keccak256 ( " variable name " ) of the variable that is being accessed . These are examples of how the variables are saved within other functions : address Vars [ keccak256 ( " owner " ) ] address Vars [ keccak256 ( " tellor Contract " ) ] @ return address requested
@ notice Returns the current per block borrow interest rate for this c Token @ return The borrow interest rate per block , scaled by 1e18 require ( opaque Err 0 , " borrow Rate Per Block : interest Rate Model . borrow Rate failed " ) ;
@ dev Moves distribution tokens from the locked pool to the unlocked pool , according to the previously defined unlock schedules . Publicly callable . @ return Number of newly unlocked distribution tokens .
@ dev Called by a pauser to pause , triggers stopped state .
https : en . bitcoin . it wiki Difficulty # What is the formula for difficulty . 3F as of 2017 the bitcoin difficulty was up to 17 zeroes , it was only 8 in the early days readjust the target by 5 percent assume 360 ethereum blocks per hour we want miners to spend 120 seconds to mine each ' block ' , about 12 ethereum blocks one y Land epoch uint epochs Mined BLOCKS PER READJUSTMENT ; uint target Eth Blocks Per Diff Period epochs Mined 12 ; if there were less eth blocks passed in time than expected If there were 5 % more blocks mined than expected then this is 5 . If there were 100 % more blocks mined than expected then this is 100 . make it harder mining Target mining Target . sub ( mining Target . div ( 2000 ) . mul ( excess block pct extra ) ) ; uint shortage block pct extra shortage block pct . sub ( 100 ) . limit Less Than ( 1000 ) ; make it easier mining Target mining Target . add ( mining Target . div ( 2000 ) . mul ( shortage block pct extra ) ) ; if ( mining Target < MINIMUM TARGET ) if ( mining Target > MAXIMUM TARGET )
A function used in case of strategy failure , possibly due to bug in theplatform our strategy is using , governance can stop using it quick current Strategy . exit ( ) ; timelock Type 0 ;
Issue a new amount of tokens these tokens are deposited into the owner address @ param amount Number of tokens to be issued
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer
hard work should be callable only by the controller ( by the hard worker ) or by governance
@ dev Function to check the amount of tokens that an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
@ dev Performs the reserve adjustment actions leaving a liquidity room , if necessary . It will attempt to perform the operation using the liquid pool and , if necessary , either withdrawal from an underlying g Token to get more liquidity , or deposit withdrawal from an underlying g Token to move towards the desired reserve allocation if any of them falls beyond the rebalance margin thresholds . To save on gas costs the reserve adjusment will request at most one operation from any of the underlying g Tokens . This method is exposed publicly . @ param room Amount The underlying token amount to be available after the operation . This is revelant for withdrawals , once the room amount is withdrawn the reserve should reflect the configured collateralization ratio . @ return success A boolean indicating whether or not both actions suceeded .
@ dev Returns the current implementation address .
Checks if the initialization was completed
@ return uint256 the total amount of Kittie Fight Token rewards yet to be distributed @ return uint256 the total amount of Super Dao Fight Token rewards yet to be distributed
Returns the current rate of rewards per token ( doh ) Do not distribute rewards before games begin Effective total supply takes into account all the multipliers bought .
@ dev Sum vector @ param self Storage array containing uint256 type variables @ return sum The sum of all elements , does not check for overflow
Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Burns a portion of the liquidity pool according to the defined burning rate . It must happen at most once every 7 days . This method does not actually burn the funds , but it will redeem the amounts from the pool to the caller contract , which is then assumed to perform the burn . This method is exposed publicly . @ return stakes Amount The amount of stakes ( GRO ) redeemed from the pool . @ return shares Amount The amount of shares ( g Token ) redeemed from the pool .
@ notice Set user ' s parent
@ dev Modifier to make a function callable only when the contract is not paused .
Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Asset Amount Wei , Par
@ dev Converts a given amount of the mining token to the underlying token using the external exchange contract . Both amounts are deducted and credited , respectively , from the current contract . @ param input Amount The amount to be converted .
@ param addr address of interest @ return number of active stakes for user
Distribute the VOX tokens collected by the multiplier purchases
@ notice Total supply which is counted for distributions It only represents already distributed tokens @ dev This function should be overloaded to exclude tokens locked in loans
@ dev Function to check the amount of tokens that an owner has allowed to a spender . @ param owner The address which owns the funds . @ param spender The address which will spend the funds . @ return The number of tokens still available for the spender .
@ dev Modifier to check whether the msg . sender is the admin . If it is , it will run the function . Otherwise , it will delegate the call to the implementation .
in case you want to burn tokens and increase miner rewards
This is the main contact point where the strategy interacts with the Vault . It is critical that this call is handled as intended by the Strategy . Therefore , this function will be called by Base Strategy to make sure the integration is correct .
Convert unsigned 256 bit integer number into signed 64 . 64 bit fixed point number . Revert on overflow . @ param x unsigned 256 bit integer number @ return signed 64 . 64 bit fixed point number
@ notice Converts a uint to int and checks if positive @ param x Number to be converted
@ dev Initialize pool @ param curve Pool curve pool address @ param curve Gauge curve gauge address @ param currency Token curve pool underlying token @ param lender True Lender address @ param uni Router Uniswap router
@ dev Retrieves the number of decimals for a token . Returns 18 if the call reverts . @ param token The address of the token contract . @ return token Decimals The number of decimals places for the token .
NOTE : In MSTX , proposal Index ! proposal Id set highest index ( latest ) yes vote must be processed for member to ragequit set maximum of total shares encountered at a yes vote used to bound dilution for yes voters NOTE : subgraph indexes by proposal Id not proposal Index since proposal Index isn ' t set until it ' s been sponsored but proposal is created on submission
functions Circulating supply is total supply minus operator contract minus treasury account Now factor in all previous furnaces
@ notice ERC20 implementation internal function backing transfer ( ) and transfer From ( ) @ dev validates the transfer before allowing it . NOTE : This is not standard ERC20 behavior
@ dev Add Fee Amount to borrowed flashloan @ param amt Get token amount at this ID from Insta Memory Contract . @ param get Id Get token amount at this ID from Insta Memory Contract . @ param set Id Set token amount at this ID in Insta Memory Contract .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns whether the specified token exists . @ param token Id uint256 ID of the token to query the existence of @ return bool whether the token exists
@ dev Fetch the latest registered value of history , it will return zero if there was no value registered @ param self Checkpoints history to be queried
@ dev Gets some minimal info of a previously submitted block that ' s kept onchain . A DEX can use this function to implement a payment receipt verification contract with a challange response scheme . @ param block Idx The block index .
get available awards
@ dev error corresponds to enum Error ; info corresponds to enum Failure Info , and detail is an arbitrary contract specific code that enables us to report opaque error codes from upgradeable contracts .
Withdraws all underlying assets belonging to the user
@ dev Redeem tokens of a specific partition . @ param from Partition Name of the partition . @ param operator The address performing the redemption . @ param from Token holder whose tokens will be redeemed . @ param value Number of tokens to redeem . @ param data Information attached to the redemption . @ param operator Data Information attached to the redemption , by the operator ( if any ) .
@ dev Sumbits new blocks to the rollup blockchain . This function can only be called by the exchange operator . @ param blocks The blocks being submitted block Type : The type of the new block block Size : The number of onchain or offchain requests settlements that have been processed in this block block Version : The circuit version to use for verifying the block store Block Info Onchain : If the block info for this block needs to be stored on chain data : The data for this block offchain Data : Arbitrary data , mainly for off chain data availability , i . e . , the multihash of the IPFS file that contains the block data .
@ notice allows the configurator to update the loan to value of a reserve @ param reserve the address of the reserve @ param ltv the new loan to value
@ notice confirms if the current keeper is registered and has a minimum bond , should be used for protected functions @ param keeper the keeper being investigated @ param bond the bound asset being evaluated @ param min Bond the minimum requirement for the asset provided in bond @ param earned the total funds earned in the keepers lifetime @ param age the age of the keeper in the system @ return true false if the address is a keeper and has more than the bond
@ notice Sets the contract address for the G Exchange implementation to be used in converting the mining token ( COMP ) , and the g Token reserve token ( DAI ) , into the underlying asset . This is a priviledged function restricted to the contract owner . @ param exchange A G Exchange compatible contract address .
decode a UQ144x112 into a uint144 by truncating after the radix point
@ dev Upgrade the backing implementation of the proxy . Only the admin can call this function . @ param new Implementation Address of the new implementation .
can only ragequit if the latest proposal you voted YES on has been processed
@ dev See IERC20 . transfer From . Emits an Approval event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of ERC20 ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least value . the caller must have allowance for sender ' s tokens of at least amount .
Private Functions
@ dev Transfer token to governor . Intended for recovering tokens stuck in strategy contracts , i . e . mistaken sends . @ param asset Address for the asset @ param amount Amount of the asset to transfer
Calculate the rewards for each token
encode a uint112 as a UQ112x112 z uint224 ( y ) Q112 ;
@ return The total number of deposit tokens staked globally , by all users .
Update buyback address .
This can only ever be incremented never decreased
Deactivates fees and bootstrap allocation @ dev governance function called only by the migration manager @ dev guardians updates remain active based on the current per Member value
@ notice Send multiple types of Tokens from the from address to the to address ( with safety call ) @ param from Source addresses @ param to Target addresses @ param ids I Ds of each token type @ param amounts Transfer amounts per token type
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
Check if sender is controller
@ dev Notifies the exchange that the owner did not process a forced request . If this is indeed the case , the exchange will enter withdrawal mode . Can be called by anyone . @ param account ID The account ID the forced request was made for @ param token The token address of the the forced request
@ dev Returns the current implementation . @ return impl Address of the current implementation
safety for front end bugs
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . to cannot be the zero address .
wrapper functions to allow testing
@ notice makes the access check unenforced
@ dev Returns a slice containing the entire string . @ param self The string to make a slice from . @ return A newly allocated slice containing the entire string .
@ dev Work on the given position . Must be called by the operator . @ param id The position ID to work on . @ param user The original user that is interacting with the operator . @ param debt The amount of user debt to help the strategy make decisions . @ param data The encoded data , consisting of strategy address and calldata .
@ notice Adds multiple addresses to the locking list . @ param accounts The wallet addresses to add to the locking list . @ param release Date The date when the tokens become avaiable for transfer . Zero address , admins , and owner cannot be locked .
Logged when the resolver for a node changes .
Calculate x ^ y assuming 0 ^ 0 is 1 , where x is unsigned 129 . 127 fixed point number and y is unsigned 256 bit integer number . Revert on overflow . @ param x unsigned 129 . 127 bit fixed point number @ param y uint256 value @ return unsigned 129 . 127 bit fixed point number if ( xc > 0x2 ) msb + 1 ; if ( re < 127 ) return 0 ; require ( re < 128 ) ; if ( xe < 127 ) return 0 ; require ( xe < 128 ) ;
@ notice Set the Staking address @ dev Only callable by self via execute Transaction @ param staking Address address for new Staking contract
@ dev Describe how to interpret the fixed Price in the Token Config . FIXED ETH , FIXED USD , REPORTER
@ dev Sends some ETH to the Wrapped Ether contract in exchange for WETH . This operation will revert if it does not succeed . @ param amount The amount of ETH to be wrapped in WETH .
@ dev This is a placeholder , which may be overrided to notify other contracts of PTK balance change
Return reward multiplier over the given from to to block . maybe add bonus
function to stop the ICO
@ dev decreases the allowance of spender to spend msg . sender tokens @ param spender the user allowed to spend on behalf of msg . sender @ param subtracted Value the amount being subtracted to the allowance @ return true
@ return The result of multiplying x and y , interpreting the operands as fixed point decimals . @ dev A unit factor is divided out after the product of x and y is evaluated , so that product must be less than 2 256 . As this is an integer division , the internal division always rounds down . This helps save on gas . Rounding is more expensive on gas .
@ dev Equivalent to multiple { Transfer Single } events , where operator , from and to are the same for all transfers .
Controller only function for creating additional rewards from dust
@ dev Function called after a ERC1155 has been received by this contract . @ return 0xf23a6e61 .
Public functions
type conversion help utils
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
Returns a guardian ' s delegators staking reward portion @ dev If not explicitly set , returns the default Delegators Staking Rewards Percent Mille @ return delegator Rewards Ratio Percent Mille is the delegators portion in percent mille
@ dev use this when reporting an opaque error from an upgradeable collaborator contract
@ dev Calculates the next value of an specific distribution index , with validations @ param current Index Current index of the distribution @ param emission Per Second Representing the total rewards distributed per second per asset unit , on the distribution @ param last Update Timestamp Last moment this distribution was updated @ param total Balance of tokens considered for the distribution @ return The new index .
function that is called when transaction target is an address
@ notice Takes a fee Percentage and sends it to wallet @ param amount Dai amount of the whole trade @ param user Address of the user @ param token Address of the token @ param dfs Fee Divider Dfs fee divider @ return fee Amount Amount in Dai owner earned on the fee fee can ' t go over 10 % of the whole amount
@ dev See IERC20 . transfer . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ notice Authorizes a provider . @ param provider Address of the provider .
@ dev Can make O ( 1 ) by storing index pointer in proposals mapping . Requires in Progress Proposals to be 1 indexed , since all proposals that are not present will have pointer set to 0 . Swap proposal Id to end of array + pop ( deletes last elem + decrements array length )
@ dev Retrieve the available collateral worth , the worth of collateral which can used for buy options , priced in USD .
@ param pair Code uint256 Pair Code assocated with the Pair Pool @ return the address of the pair pool associated with pair Code
@ dev Multiply an Exp by a scalar , truncate , then add an to an unsigned integer , returning an unsigned integer .
Instructs the Set Token to transfer the ERC20 token to a recipient . The new Set Token balance must equal the existing balance less the quantity transferred @ param set Token Set Token instance to invoke @ param token ERC20 token to transfer @ param to The recipient account @ param quantity The quantity to transfer
Mutative functions
@ dev Give an account access to this role .
@ dev Unlock back the amount of tokens that were bridged to the other network but failed . @ param token address that bridged token contract . @ param recipient address that will receive the tokens . @ param value amount of tokens to be received .
Safe boo transfer function , just in case if rounding error causes pool to not have enough BBR As .
@ dev Get timestamp of locking period start @ return Timestamp of locking period start
@ dev Returns an address effective stake
@ notice Called by the admin to update the implementation of the delegator @ param implementation The address of the new implementation for delegation @ param allow Resign Flag to indicate whether to call resign Implementation on the old implementation @ param become Implementation Data The encoded bytes data to be passed to become Implementation
View function to see pending XDE Xs on frontend .
payments between pools send and convert payments between pools
@ dev Distr Event gets emmited when the token gets distributed to investors , including airdrops
State Mutation functions
@ notice A method to add reward to pool contract . @ param reward Amount Amount of reward token . Add pool init & remaining reward 20 % rewards will be distributed to stakeholders on 1st round Transfer tokens to pool from owner Emit event of transfer
@ dev Returns the cap of a specific beneficiary . @ param beneficiary Address whose cap is to be checked @ return Current cap for individual beneficiary
@ notice Function to initialize the contract @ param governance Address Governance proxy address
ERC20 transfer
@ dev Returns the integer division of two signed integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Used to receive ERC721 tokens
Function to start the Game Only the owner can call this function The game can ' t be stopped after this action The game is starting
performs chained get Amount Out calculations on any number of pairs
@ return Number of transactions , both enabled and disabled , in transactions list .
@ notice removes contract address registered under given registry key @ param name registry key for lookup
@ dev Emitted when a claim request was performed . Specification : Is not clear
@ dev Remove a transcoder from the pool and deactivate it Not zeroing ' Transcoder . last Active Stake Update Round ' saves gas ( 5k when transcoder is evicted and 20k when transcoder is reinserted ) There should be no side effects as long as the value is properly updated on stake updates Not zeroing the stake on the current round ' s ' Earnings Pool ' saves gas and should have no side effects as long as ' Earnings Pool . set Stake ( ) ' is called whenever a transcoder becomes active again .
@ dev Get partitions index of a tokenholder . @ param token Holder Address for which the partitions index are returned . @ return Array of partitions index of ' token Holder ' .
Sets price for each ticket
@ notice Bots call this method to boost for user when conditions are met @ dev If the contract ownes gas token it will try and use it for gas price reduction @ param data Array of uints representing [ cdp Id , collateral Amount , min Price , exchange Type , gas Cost , 0x Price ] @ param next Price Next price in Maker protocol @ param join Addr Address of collateral join for specific CDP @ param exchange Address Address to call 0x exchange @ param call Data Bytes representing call data for 0x exchange
@ dev Contract Initialization , the caller of this method should be a Contract containing the logic to provide the Eth Item ERC20Wrapper Model to be used to create ERC20 based object Ids @ param name the chosen name for this NFT @ param symbol the chosen symbol ( Ticker ) for this NFT
@ dev Returns the price to register or renew a name . @ param name The name being registered or renewed . @ param expires When the name presently expires ( 0 if this is a new registration ) . @ param duration How long the name is being registered or extended for , in seconds . @ return The price of this renewal or registration , in wei .
ERC 20
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Redeems pool token to underlying tokens proportionally . @ param amount Amount of pool token to redeem . @ param min Redeem Amounts Minimum amount of underlying tokens to get . If swap is paused , only admins can redeem . Redemption fee is paid with pool token No conversion is needed as the pool token has 18 decimals We might choose to use pool Token . total Supply to compute the amount , but decide to use D in case we have multiple minters on the pool token . Important : Underlying tokens must convert back to original decimals ! Updates the balance in storage After reducing the redeem fee , the remaining pool tokens are burned !
Not sold tokens
@ dev Leaves the contract without registry Admin . It will not be possible to call only Manager functions anymore . Can only be called by the current registry Admin . NOTE : Renouncing registry Management will leave the contract without an registry Admin , thereby removing any functionality that is only available to the registry Admin .
event Join Processed ( address owner , uint96 mint Amount , uint96 [ ] amounts ) ;
@ dev Adjusts the reserve to match the configured collateralization ratio . It uses the reserve collateral to borrow a proper amount of the growth token reserve asset and deposit it . Or it redeems from the growth token and repays the loan . @ param room Amount The amount of underlying token to be liquid after the operation . @ return success A boolean indicating whether or not the action succeeded .
@ dev Calculate x y rounding towards zero , where x and y are unsigned 256 bit integer numbers . Revert on overflow or when y is zero . @ param x unsigned 256 bit integer number @ param y unsigned 256 bit integer number @ return unsigned 64 . 64 bit fixed point number if ( xc > 0x2 ) msb + 1 ; xl lo ; xl lo ;
Governance functions Stop start all deposits , no timelock required
@ dev Returns whether the exchange is shutdown . @ return Returns true if the exchange is shutdown , else false .
fetches and sorts the reserves for a pair
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev Returns the address of the current registry Admin .
USER WRITE
@ param who The address to query . @ return The balance of the specified address .
@ dev Allows to register other smart contracts ( to prevent loss of tokens via transfer function ) . @ param account Address of smart contracts to work with .
@ dev Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block First check most recent balance Next check implicit zero balance uint32 center upper ( upper lower ) 2 ;
@ notice Gets Dai amount in Vat which can be added to Cdp @ param vat Address of Vat contract @ param urn Urn of the Cdp @ param ilk Ilk of the Cdp
@ dev See { IERC721 balance Of } .
Convert signed 64 . 64 fixed point number into signed 64 bit integer number rounding down . @ param x signed 64 . 64 bit fixed point number @ return signed 64 bit integer number
@ dev Allows the current governor to relinquish control of the contract . @ notice Renouncing to governorship will leave the contract without an governor . It will not be possible to call the functions with the governance modifier anymore .
Victim info
@ dev Initializes the contract in unpaused state .
@ notice Event emitted when underlying is borrowed
@ return true if msg . sender is the owner of the contract .
@ dev See { IERC721Metadata token URI } . If there is no base URI , return the token URI . If both are set , concatenate the base URI and token URI ( via abi . encode Packed ) . If there is a base URI but no token URI , concatenate the token ID to the base URI .
@ dev Destroys amount tokens from account . amount is then deducted from the caller ' s allowance . See burn and approve .
@ dev Chef distributes newly generated MO Oswap Token to each farmmers " only Owner " : : for the one who worries about the function , this distribute process is only done by Master Chef contract for farming process
This generates a public event on the blockchain that will notify clients
Address to bytes32 casting to ERC734
No rebalance implementation for lower fees and faster swaps
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
@ dev Destroys amount tokens from account , reducing the total supply .
Returns the total rewards currently available for withdrawal . ( For calling from external of the contract )
@ notice Creates amount token to to . Must only be called by the owner ( Uprising ) .
@ notice Event emitted when interest is accrued
@ notice Admin function to change the Pause Guardian @ param new Pause Guardian The address of the new Pause Guardian @ return uint 0 success , otherwise a failure . ( See enum Error for details ) Save current value for inclusion in log Store pause Guardian with value new Pause Guardian Emit New Pause Guardian ( Old Pause Guardian , New Pause Guardian )
Sends ETH from msg . sender to this contract to mint m ETH .
@ dev Sets the address of the current implementation @ param new Imp address of the new implementation
Resolve governance address from Vault contract , used to make assertions on protected functions in the Strategy
@ dev Call from . tokens To Send ( ) if the interface is registered @ param operator address operator requesting the transfer @ param from address token holder address @ param to address recipient address @ param amount uint256 amount of tokens to transfer @ param user Data bytes extra information provided by the token holder ( if any ) @ param operator Data bytes extra information provided by the operator ( if any )
@ dev Calculates pending rewards for the user since last period claimed rewards to current period @ param address address of the user
Deposit any number of tokens into the vault , receiving ERC 20 wrapped tokens in response . Users can deposit tokens on behalf of a third party ( the one who would receive the parity tokens ) , so long as they are the owners of the token . @ param depositor Who will be receiving the ERC 20 parity tokens . @ param token Ids The ids of the tokens that will be deposited . All tokens must be approved for transfer first . Reentrancy guard . We need to know who will be receiving the parity tokens . We don ' t want to keep reading the length from storage . We can ' t allow overflows , but we ' re not going to get fancier than this . Not like anyone has that much memory anyway . Preserve the user so we know who to receive tokens from . Try and deposit everything . Store it in the vault . Attempt to transfer the token . If the sender hasn ' t approved this contract for this specific token then it will fail . We have to check for ownership here to prevent a third party from forcing a deposit . If this vault already owns the token then this will also fail . This way we can avoid a self check on existence ( since it ' s not a guaranteed O ( 1 ) ) . Hello world ! Give them the wrapped ERC 20 token . By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 ) .
@ notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
@ notice A one time call to configure the token . @ param minter A wallet with permissions to mint tokens and or add other minters .
View function to see pending Burn on frontend .
@ dev Log entry on profit withdrawal @ param investor Investor ' s address @ param amount Wei amount the investor withdrew from this token
@ dev See { IERC777 name } .
@ notice Removes the admin role from an address @ dev The sender must have the admin role @ param address EOA or contract affected
@ dev Allows the current owner to relinquish control of the contract . @ notice Renouncing to ownership will leave the contract without an owner . It will not be possible to call the functions with the only Owner modifier anymore .
Constants @ dev Returns a list of constants used by the exchange . @ return constants The list of constants .
@ dev Emitted when the pause is lifted by account .
@ dev Transfer token to a specified address . @ param to The address to transfer to . @ param value The amount to be transferred .
@ notice Will update the base URL of token ' s URI @ param new Base Metadata URI New base URL of token ' s URI
returns a UQ112x112 which represents the ratio of the numerator to the denominator equivalent to encode ( numerator ) . div ( denominator )
@ notice Return a delegator ' s cumulative stake and fees using the LIP 36 earnings claiming algorithm @ param transcoder Storage pointer to a transcoder struct for a delegator ' s delegate @ param start Round The round for the start cumulative factors @ param end Round The round for the end cumulative factors @ param stake The delegator ' s initial stake before including earned rewards @ param fees The delegator ' s initial fees before including earned fees @ return ( c Stake , c Fees ) where c Stake is the delegator ' s cumulative stake including earned rewards and c Fees is the delegator ' s cumulative fees including earned fees
@ dev emergency function to change beneficiary addresses if they pull a bozo and lose or compromise keys before the release time has been reached .
@ dev Destroys amount tokens from the caller . CANNOT BE USED TO BURN OTHER PEOPLES TOKENS ONLY BBRA AND ONLY FROM THE PERSON CALLING THE FUNCTION See { ERC20 burn } .
checks if the UNI v2 contract have reserves to swap tokens
@ notice Get the config for the s Token @ dev If a config for the s Token is not found , falls back to searching for the underlying . @ param s Token The address of the s Token of the config to get @ return The config object
@ notice sets the pending Gov @ param pending Gov The address of the gov contract to use for authentication .
@ notice Internal function to add deposit of a channel @ param self storage data of Celer Ledger contract @ param channel Id ID of the channel @ param receiver address of the receiver @ param amount the amount to be deposited
@ notice Transfers value amount of an id from from to to ( with safety call ) . @ dev Caller must be approved to manage the tokens being transferred out of the from account ( see " Approval " section of the standard ) . MUST revert if to is the zero address . MUST revert if balance of holder for token id is lower than the value sent . MUST revert on any other error . MUST emit the Transfer Single event to reflect the balance change ( see " Safe Transfer Rules " section of the standard ) . After the above conditions are met , this function MUST check if to is a smart contract ( e . g . code size > 0 ) . If so , it MUST call on ERC1155Received on to and act appropriately ( see " Safe Transfer Rules " section of the standard ) . @ param from Source address @ param to Target address @ param id ID of the token type @ param value Transfer amount @ param data Additional data with no specified format , MUST be sent unaltered in call to on ERC1155Received on to
@ dev Returns the maximum recipient charge , given the amount of gas forwarded , gas price and relay fee .
@ notice Initialize the money market @ param comptroller The address of the Comptroller @ param interest Rate Model The address of the interest rate model @ param initial Exchange Rate Mantissa The initial exchange rate , scaled by 1e18 @ param name EIP 20 name of this token @ param symbol EIP 20 symbol of this token @ param decimals EIP 20 decimal precision of this token
@ dev Returns to normal state . Requirements : The contract must be paused .
@ return Provides an interface to UNIT .
update the number of PUB per block , with a value in wei update all pools prior to changing the block rewards update the block rewards
@ dev activates reward distribution , all rewards will be distributed up assuming the last assignment was on start Time ( the time the old contarct was deactivated )
@ dev Burns Dai from caller to repay debt in a Yield Vault . User debt is decreased for the given collateral and fy Dai series , in Yield vault to . The amount of debt repaid changes according to series maturity and Maker DAO rate and chi , depending on collateral type . A signature is provided as a parameter to this function , so that dai . approve ( ) doesn ' t need to be called . @ param collateral Valid collateral type . @ param maturity Maturity of an added series @ param to Yield vault to repay debt for . @ param dai Amount Amount of Dai to use for debt repayment . @ param signature The permit call ' s signature
force balances to match reserves
@ dev Destroys amount tokens from account . amount is then deducted from the caller ' s allowance . See { burn } and { approve } .
@ dev average dollar value of vault share token
@ dev Returns the Dai reserves
@ notice Stakes amount tokens , transferring them from account Address , and assigns them to account Address @ param account Address The final staker of the tokens @ param amount Number of tokens staked
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Transfer tokens from one address to another @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ dev Calculates the amount that falls either above or below the rebalance margin for the liquid pool . If we have more liquid amount than its configured share plus the rebalance margin it returns that amount paired with zero . If we have less liquid amount than its configured share minus the rebalance margin it returns zero paired with that amount . If none of these two situations happen , then the liquid amount falls within the acceptable parameters , and it returns a pair of zeros . @ param reserve Amount The total reserve amount used for calculation . @ param liquid Amount The liquid amount available used for calculation . @ return deposit Amount The amount to be deposited or zero . @ return withdrawal Amount The amount to be withdrawn or zero .
@ dev only lending pools configurator can use functions affected by this modifier
Remove the user from whitelist @ param user the address of the user to be removed from whitelist only allowed by owner
@ notice The delay before voting on a proposal may take place , once proposed }
@ dev returns the maximum stable rate borrow size , in percentage of the available liquidity .
withdrawal reverse ( cost ) : price reserve supply net cost price gross net 0 . 99 # fee is assumed to be 1 % for simplicity fee gross net return gross , fee
@ dev Contract initializer . @ param logic Address of the initial implementation . @ param data Data to send as msg . data to the implementation to initialize the proxied contract . It should include the signature and the parameters of the function to be called , as described in https : solidity . readthedocs . io en v0 . 4 . 24 abi spec . html # function selector and argument encoding . This parameter is optional , if no data is given the initialization call to proxied contract will be skipped .
@ dev modifier , Only manager can be granted exclusive access to specific functions .
@ dev Prevents a contract from calling itself , directly or indirectly . If you mark a function non Reentrant , you should also mark it external . Calling one non Reentrant function from another is not supported . Instead , you can implement a private function doing the actual work , and an external wrapper marked as non Reentrant .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns true if the slice ends with needle . @ param self The slice to operate on . @ param needle The slice to search for . @ return True if the slice starts with the provided text , false otherwise .
@ dev Internal function to add a token ID to the list of a given address @ param to address representing the new owner of the given token ID @ param token Id uint256 ID of the token to be added to the tokens list of the given address
@ notice convert CAD amount to Dai amount @ param amount amount of CAD in 18 decimal places @ return amount of Dai in 18 decimal places
@ dev Updates the reserve rate .
@ notice Removes a g Token from the portfolio . The portfolio share of the token must be 0 % before it can be removed . The underlying reserve is redeemed upon removal . @ param token The contract address of the g Token to be removed from the portfolio .
Dutch Auction Price Function Start Price \ \ \ \ Clearing Price \ Amount Raised Token Supply Token Price \ \ Minimum Price Amount raised End Time @ notice The average price of each token from all commitments .
@ notice Apply credit to a job
Performs emergency withdrawal of the contract balance @ dev called with a token to withdraw , should be called twice with the fees and bootstrap tokens @ dev governance function called only by the migration manager @ param token is the ERC20 token to withdraw
@ notice Returns ETH price in USD . @ return Price in USD with 6 decimal digits .
Gas consumption in function " add Loot Box " in contract " Brain Lootbox " depends on the size of data structures that may grow unboundedly . The highlighted assignment overwrites or deletes a state variable that contains an array . When assigning to or deleting storage arrays , the Solidity compiler emits an implicit clearing loop . If the array grows too large , the gas required to execute the code will exceed the block gas limit , effectively causing a denial of service condition . Consider that an attacker might attempt to cause this condition on purpose . https : swcregistry . io docs SWC 128 AUDITOR NOTE : Provided the mapping of lootbox to card Ids array is not too large this should not be a major issue . But , can still fall prey to a deliberate denial of service attack by sending a transaction lower enough to halt processing . Provided the array size of lootbox [ id ] . card Ids . length does not grow so large as to allow of a under gased transaction to make it ' s way through through the network . Generally , this should be resolved by a tansaction with just a low gas limit geting stuck .
This function returns the discount available for a user , when purchasing a a key from a lock . This does not modify the state . It returns both the discount and the number of tokens consumed to grant that discount . TODO : actually implement this .
@ dev Returns the entire balance of Grg tokens in the vault .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } . Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Kill the given to the position . Liquidate it immediately if kill Factor condition is met . @ param id The position ID to be killed . 1 . Verify that the position is eligible for liquidation . 2 . Perform liquidation and compute the amount of ETH received . 3 . Clear position debt and return funds to liquidator and position owner .
@ notice How many tokens are not yet claimed from distributions @ param account Account to check @ return Amount of tokens available to claim
@ dev Checks if first Exp is less than second Exp .
@ dev Destoys amount tokens from account , reducing the total supply . Emits a Transfer event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
sent Addresses [ 0 ] : lender sent Addresses [ 1 ] : borrower sent Addresses [ 2 ] : receiver sent Addresses [ 3 ] : manager sent Amounts [ 0 ] : interest Rate sent Amounts [ 1 ] : new Principal sent Amounts [ 2 ] : interest Initial Amount sent Amounts [ 3 ] : loan Token Sent sent Amounts [ 4 ] : collateral Token Sent
The fallback function for this contract .
@ dev Transfer token for a specified addresses @ param from The address to transfer from . @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Subtracts two numbers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
@ dev Allows the current registry Admin to set the pending Manager address . @ param new Registry Admin The address to transfer registry Management to .
@ dev Multiplies and truncates a token ratio , essentially flooring the result i . e . How much m Asset is this b Asset worth ? @ param x Left hand operand to multiplication ( i . e Exact quantity ) @ param ratio b Asset ratio @ return Result after multiplying the two inputs and then dividing by the ratio scale
@ dev Returns true if account supports the { IERC165 } interface , Any contract that implements ERC165 must explicitly indicate support of Interface Id ERC165 and explicitly indicate non support of Interface Id Invalid
force reserves to match balances
@ notice Claim rewards . Reward tokens will be stored on protocol balance . @ return tokens and their amounts received
@ dev Adds country restriction . Identities from those countries will be forbidden to manipulate Tokens linked to this Compliance . @ param country Country to be restricted , should be expressed by following numeric ISO 3166 1 standard Only the owner of the Compliance smart contract can call this function emits an Added Restricted Country event
@ dev freeze your tokens to the specified address . Be careful , gas usage is not deterministic , and depends on how many freezes to address already has . @ param to Address to which token will be freeze . @ param amount Amount of token to freeze . @ param until Release date , must be in future .
@ notice If true , Address addr will not incur burn Rate Per Transfer Thousandth 1000 burn for any Transfers to it . @ param addr Address to check @ dev it is not trivial to return a mapping without incurring further storage costs
takes raw cusdc amount and transfers it in
@ dev Appends a byte array to the end of the buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param data The data to append . @ return The original buffer .
Update user ' s bonus debt as current accumulated bonus value ( acc Bonus Per Share effective Total )
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount
@ notice Remove credit for a job
@ dev See { IERC721 transfer From } . solhint disable next line max line length
Finalizes ( or cancels ) the strategy update by resetting the data
@ return the token being sold .
@ dev Fetches the current eth usd price from uniswap , with 6 decimals of precision . Conversion factor is 1e18 for eth usdc market , since we decode uniswap price statically with 18 decimals .
@ dev Gets the deposit contract used by the exchange . @ return the deposit contract
@ notice Gets the maximum amount of collateral available to draw @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP @ param join Addr Joind address of collateral @ dev Substracts 10 wei to aviod rounding error later on
@ notice Paybacks Dai debt @ dev If the dai Amount is bigger than the whole debt , returns extra Dai @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP @ param dai Amount Amount of Dai to payback @ param owner Address that owns the DS Proxy that owns the CDP
@ notice The delay before voting on a proposal may take place , once proposed function voting Delay ( ) public pure returns ( uint ) { return 1 ; }
@ dev Return Manager Module address from the Nexus @ return Address of the Manager Module contract
@ notice Provides a g Token that was added to this contract by the owner at a given index . Note that the index to token association is preserved in between token removals , however removals may may shuffle it around . @ param index The desired index , must be less than the token count . @ return token The g Token currently present at the given index .
@ notice Returns the current per block borrow interest rate for this c Token @ return The borrow interest rate per block , scaled by 1e18
solhint disable next line no simple event func name
@ dev xref : ROOT : erc1155 . adoc # batch operations [ Batched ] version of { balance Of } . Requirements : accounts and ids must have the same length .
@ notice Marks when the last liquidity pool burn took place . There is a minimum 7 day grace period between consecutive burnings of the liquidity pool . @ return last Burning Time A timestamp for when the liquidity pool burning took place for the last time .
revert invalid transfer action
Update the fraction of pool fees based on previous trade See above function comment for explanation
@ notice see the total token balance awaiting redemptions for a given account @ param account account that has tokens pending @ return token amount in 18 decimals
@ dev Returns tokens locked for a specified address for a specified reason @ param of The address whose tokens are locked @ param reason The reason to query the lock tokens for
@ dev Creates amount new tokens for to . See { ERC20 mint } . Requirements : the caller must have the MINTER ROLE .
Returns a guardian ' s data @ param guardian is the guardian to query @ param ip is the guardian ' s node ipv4 address as a 32b number @ param orbs Addr is the guardian ' s Orbs node address @ param name is the guardian ' s name as a string @ param website is the guardian ' s website as a string @ param contact is the guardian ' s contact details as a string ( deprecated in current contract version ) @ param registration Time is the timestamp of the guardian ' s registration @ param last Update Time is the timestamp of the guardian ' s last update
Extends the subscription of an existing virtual chain . @ dev Called only by : an authorized subscription plan contract @ param vc Id is the virtual chain ID @ param amount is the amount paid for the virtual chain subscription extension @ param tier is the virtual chain tier , must match the tier selected in the virtual creation @ param rate is the virtual chain tier rate as determined by the subscription plan @ param payer is the address paying for the subscription extension
@ dev the number of elements this queue can hold @ invariant capacity ( ) < length ( )
@ dev Gets the balance of the specified address . @ param owner address to query the balance of @ return uint256 representing the amount owned by the passed address
make private
@ dev Returns the symbol of the token , usually a shorter version of the name .
solhint disable func name mixedcase
@ dev Inserts a new g Token into the portfolio . The new g Token must have the reserve token as its underlying token . The initial portfolio share of the new token will be 0 % . This method is exposed publicly . @ param token The contract address of the new g Token to be incorporated into the portfolio .
@ notice send value token to to from from on the condition it is approved by from @ param from The address of the sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
Write functions
@ dev Returns the downcasted uint16 from uint256 , reverting on overflow ( when the input is greater than largest uint16 ) . Counterpart to Solidity ' s uint16 operator . Requirements : input must fit into 16 bits
MODIFIERS simple modifier for daily limit .
See { IERC20 total Supply } .
Redeem all underlying needed from each protocol @ param token Addresses : array of protocol tokens addresses @ param amounts : array with current allocations in underlying @ param new Amounts : array with new allocations in underlying @ return to Mint Allocations : array with amounts to be minted @ return total To Mint : total amount that needs to be minted
@ dev Returns the downcasted uint96 from uint256 , reverting on overflow ( when the input is greater than largest uint96 ) . Counterpart to Solidity ' s uint96 operator . Requirements : input must fit into 96 bits
Getx minter left num @ param address address
@ dev Similar to EIP20 transfer , except it handles a False result from transfer From and reverts in that case . This will revert due to insufficient balance or insufficient allowance . This function returns the actual amount received , which may be less than amount if there is a fee attached to the transfer . Note : This wrapper safely handles non standard ERC 20 tokens that do not return a value . See here : https : medium . com coinmonks missing return value bug at least 130 tokens affected d67bf08521ca case 0 { success : not ( 0 ) case 32 { success : mload ( 0 ) default { Calculate the amount that was actually transferred return balance After balance Before ;
@ dev If self ends with needle , needle is removed from the end of self . Otherwise , self is unmodified . @ param self The slice to operate on . @ param needle The slice to search for . @ return self
@ notice Sets the rebaser contract
@ dev Returns the token identifier for the index th NFT assigned to owner . Sort order is not specified . It throws if index > balance Of ( owner ) or if owner is the zero address , representing invalid NF Ts . @ param owner An address where we are interested in NF Ts owned by them . @ param index A counter less than balance Of ( owner ) . @ return Token id .
@ notice Get the token balance of the owner @ param owner The address of the account to query @ return The number of tokens owned by owner
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed require ( tokens < allowed [ from ] [ msg . sender ] ) ;
@ dev See { IERC1155 balance Of Batch } . Requirements : accounts and ids must have the same length .
@ dev Delegates execution to an implementation contract . This is a low level function that doesn ' t return to its internal call site . It will return to the external caller whatever the implementation returns . @ param implementation Address to delegate . solium disable next line Copy msg . data . We take full control of memory in this inline assembly block because it will not return to Solidity code . We overwrite the Solidity scratch pad at memory position 0 . Call the implementation . out and outsize are 0 because we don ' t know the size yet . Copy the returned data . delegatecall returns 0 on error .
@ dev Buys a token . Needs to be supplied the correct amount of ether .
@ notice Return pending Pay Out map of a duplex channel @ param channel Id ID of the channel to be viewed @ return peers ' addresses @ return pending Pay Outs of two simplex channels
Future pool swap for farm connection data after unlocking modifier Swap And Farming For Gar Deners ( address Load , address Convert ) { address UNI pair For ( 0x5C69b Ee701ef814a2B6a3EDD4B1652CB9cc5a A6f , 0x C02aa A39b223FE8D0A0e5C4F27e AD9083C756Cc2 ,
@ notice Transfers tokens held by timelock to beneficiary .
@ dev Returns how much dai would be required to buy fy Dai Out fy Dai . @ param fy Dai Out Amount of fy Dai hypothetically desired . @ return Amount of Dai hypothetically required .
Calculate amount of token repaid given exact amount of USD input
Admin can transfer his ownership to new address
@ dev See { IERC1155 safe Batch Transfer From } .
Maps a value of string type to a given key . Only the owner can execute this function .
Returns the ratio of the first argument to the second argument .
@ dev Sets token URI as the token URI of token Id . Requirements : token Id must exist .
View function to see pending VALU Es on frontend . uint ceiling Bonus pending . mul ( 33 ) . div ( 100 ) ; if ( bonus > ceiling Bonus ) bonus ceiling Bonus ;
@ notice Get the total number of tokens in circulation @ return The supply of tokens
@ notice Calculates the fee amount @ param amount Dai amount that is converted @ param gas Cost Used for Monitor , estimated gas cost of tx @ param owner The address that controlls the DS Proxy that owns the CDP fee can ' t go over 20 % of the whole amount
Deposit LP tokens to Master Chef for SUSHI allocation .
@ dev Implements the vote transfer logic . It will deduct the votes from one candidate and credit it to another candidate . If either of candidates is the 0 address , the the voter is either setting its initial candidate or abstaining himself from voting . The change is only reflected after the voting interval resets . We use a 2 element array to keep track of votes . The amount on position 0 is always the current vote count for the candidate . The amount on position 1 is a backup that reflect the vote count prior to the current round only if it has been updated for the current round . We also record the last voting round where the candidate balance was updated . If the last round is the current then we use the backup value on position 1 , otherwise we use the most up to date value on position 0 . This function will emit a Change Votes event upon candidate vote balance change . See update Votes ( ) . @ param old Candidate The candidate to deduct votes from . @ param new Candidate The candidate to credit voter for . @ param votes the number of votes being transfered .
@ dev Integer division of two numbers , truncating the quotient .
@ notice batch close any pending open options that have expired @ param size the maximum size of batch to execute @ return the last index processed
@ dev callback for applying financial result logic before Position data updated
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
@ notice Removes asset from sender ' s account liquidity calculation @ dev Sender must not have an outstanding borrow balance in the asset , or be providing necessary collateral for an outstanding borrow . @ param c Token Address The address of the asset to be removed @ return Whether or not the account successfully exited the market require ( o Err 0 , " exit Market : get Account Snapshot failed " ) ; load into memory for faster iteration We must have found the asset in the list or our redundant data structure is broken copy last item in list to location of item to be removed , reduce length by 1
@ dev Revert with a standard message if account is missing role . The format of the revert reason is given by the following regular expression : ^ Access Control : account ( 0x [ 0 9a f ] { 20 } ) is missing role ( 0x [ 0 9a f ] { 32 } ) $
@ dev Gets the collateralization of the system assuming 1 year ' s worth of interest payments are due by dividing the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed ( plus the principal ) , assuming each DMMA was at maximum usage . @ return The 1 year collateralization of the system , as a number with 18 decimals . For example 1010000000000000000 is 101 % or 1 . 01 .
@ notice Update status in sp Details if the bounds for a service provider is valid Validate bounds for total stake Indicate this service provider is out of bounds Indicate this service provider is within bounds
Returns the list of contract addresses managed by the registry @ dev Managed contracts are updated on changes in the registry contracts addresses @ return addrs is the list of managed contracts
@ notice Perform state updates when a delegate stake has changed @ param delegator address of delegator @ param service Provider address of service provider @ param total Service Provider Delegated Stake total delegated to this service provider @ param total Staked For Sp From Delegator total delegated to this service provider by delegator @ param total Delegator Stake total delegated from this delegator address
@ notice Checks if the seizing of assets should be allowed to occur @ param c Token Collateral Asset which was used as collateral and will be seized @ param c Token Borrowed Asset which was borrowed by the borrower @ param liquidator The address repaying the borrow and seizing the collateral @ param borrower The address of the borrower @ param seize Tokens The number of collateral tokens to seize
@ notice Accrue interest to updated borrow Index and then calculate account ' s borrow balance using the updated borrow Index @ param account The address whose balance should be calculated after updating borrow Index @ return The calculated balance
@ notice Returns the current total borrows plus accrued interest @ return The total borrows with interest
@ dev Get timestamp of last deposit for loyalty address @ param reward Address being queried for timestamp information
@ dev Rebase TAU and TRINO tokens . double balance park balance
@ dev Update bank configuration to a new address . Must only be called by owner . @ param config The new configurator address .
@ dev Updates the controller address . Controller is responsible for reward distribution .
@ dev Returns the current implementation . @ return Address of the current implementation
@ dev Retrieves the total spent amount for particular token during specific day . @ param token address of the token contract . @ param day day number for which spent amount if requested . @ return amount of tokens sent through the bridge to the other side .
Override is Approved For All to whitelist user ' s proxy accounts .
@ dev Throws if called by any account other than the admin .
@ dev on ERC1155Batch Received implementation per IERC1155Receiver spec
@ dev Return Insta Event Address . return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecb A97 ;
@ dev Revoke an account ' s operator status for the caller . See { is Operator For } and { default Operators } . Emits a { Revoked Operator } event . Requirements operator cannot be calling address .
@ dev Internal function to mint a new token Reverts if the given token ID already exists @ param to The address that will own the minted token @ param token Id uint256 ID of the token to be minted
@ dev Withdraws the amount staked for this exchange . This can only be done if the exchange has been correctly shutdown : The exchange owner has shutdown the exchange All deposit requests are processed All funds are returned to the users ( merkle root is reset to initial state ) Can only be called by the exchange owner . @ return amount LRC The amount of LRC withdrawn
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens . Remove the credits , burning rounding errors Handle dust from rounding
@ notice Internal pure function call the revert reason helper contract , supplying a revert " code " and receiving back a revert reason string . @ param code uint256 The code for the revert reason . @ return The revert reason string .
event Conditional Transfer Processed ( address from , address to , uint16 token , uint amount ) ;
to Pause the contract
@ dev Applies an additional time bonus to a distribution amount . This is necessary to encourage long term deposits instead of constant unstake restakes . The bonus multiplier is the result of a linear function that starts at start Bonus and ends at 100 % over bonus Period Sec , then stays at 100 % thereafter . @ param current Reward Tokens The current number of distribution tokens already alotted for this unstake op . Any bonuses are already applied . @ param staking Share Seconds The staking Share seconds that are being burned for new distribution tokens . @ param stake Time Sec Length of time for which the tokens were staked . Needed to calculate the time bonus . @ return Updated amount of distribution tokens to award , with any bonus included on the newly added tokens .
@ dev Decrease the amount of tokens that an owner has allowed to a spender . @ param spender The address which will spend the funds . @ param subtracted Value The amount of tokens to decrease the allowance by .
@ dev Withdraws all balance out of the vault .
@ dev redeems a Token for the underlying asset @ param amount the amount being redeemed
@ dev Checks whether or not there is sufficient allowance for this contract to move amount from from and whether or not from has a balance of at least amount . Does NOT do a transfer .
REMOVE LIQUIDITY ( supporting fee on transfer tokens )
@ dev deprive tokens from vaults . @ param vault Vault address @ param amount The amount
@ dev Collect fee based on the token balance difference .
@ dev Checks if account is blacklisted @ param account The address to check
Updates a manager address and emits a corresponding event @ dev governance function called only by the registry Admin @ dev the managers list is a flexible list of role to the manager ' s address @ param role is the managers ' role name , for example " functional Manager " @ param manager is the manager updated address
Liquidate as many assets as possible to want , irregardless of slippage , up to amount Needed . Any excess should be re invested here as well .
@ dev Removes a key value pair from a map . O ( 1 ) . Returns true if the key was removed from the map , that is if it was present . We read and store the key ' s index to prevent multiple reads from the same storage slot if ( key Index ! 0 ) { To delete a key value pair from the entries array in O ( 1 ) , we swap the entry to delete with the last one in the array , and then remove the last entry ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the entry to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last entry to the index where the entry to delete is Update the index for the moved entry map . indexes [ last Entry . key ] to Delete Index + 1 ; Delete the slot where the moved entry was stored Delete the index for the deleted slot
@ dev See { IERC20 allowance } .
@ dev exit pool 1 . Transfer pool tokens from sender 2 . Burn pool tokens 3 . Transfer value of pool tokens in TUSD to sender
@ notice Exposes is Initialized bool var to child contracts with read only access
@ dev Gets the amount of staked LRC for an exchange . @ param exchange Addr The address of the exchange @ return staked LRC The amount of LRC
@ notice Convert boolean value into bytes @ param b The boolean value @ return Converted bytes array mstore8 ( add ( buff , 0x20 ) , 0x00 ) mstore8 ( add ( buff , 0x20 ) , 0x01 )
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to transfer , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a Transfer event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Converts a signed int256 into an unsigned uint256 . Requirements : input must be greater than or equal to 0 .
@ notice Whether a is less than b . @ param a a Fixed Point . @ param b a uint256 . @ return True if a < b , or False .
@ dev Transfers a specific NFT ( token Id ) from one account ( from ) to another ( to ) . Requirements : If the caller is not from , it must be approved to move this NFT by either { approve } or { set Approval For All } .
@ dev Removes credits from a credit balance and burns rounding errors . @ param account Account to remove credits from @ param amount Amount in OUSD which will be converted to credits and removed
Returns the current guardian staking rewards state @ dev calculated to the latest block , may differ from the state read @ dev notice that the guardian rewards are the rewards for the guardian role as guardian and do not include delegation rewards @ dev use get Delegator Staking Rewards Data to get the guardian ' s rewards as delegator @ param guardian is the guardian to query @ return balance is the staking rewards balance for the guardian role @ return claimed is the staking rewards for the guardian role that were claimed @ return delegator Rewards Per Token is the potential reward per token ( 1E18 units ) assigned to a guardian ' s delegator that delegated from day zero @ return delegator Rewards Per Token Delta is the increment in delegator Rewards Per Token since the last guardian update @ return last Staking Rewards Per Weight is the up to date staking Rewards Per Weight used for the guardian state calculation @ return staking Rewards Per Weight Delta is the increment in staking Rewards Per Weight since the last guardian update
@ dev Allows the current owner to transfer control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev See IERC20 . balance Of .
@ notice Withdraw Ether to a provided recipient address by transferring it to a recipient . @ param amount uint256 The amount of Ether to withdraw . @ param recipient address The account to transfer the Ether to . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param user Signature bytes A signature that resolves to the public key set for this account in storage slot zero , user Signing Key . If the user signing key is not a contract , ecrecover will be used ; otherwise , ERC1271 will be used . A unique hash returned from get Custom Action ID is prefixed and hashed to create the message hash for the signature . @ param dharma Signature bytes A signature that resolves to the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Custom Action ID is prefixed and hashed to create the signed message . @ return True if the transfer succeeded , otherwise false .
Calculate | x | . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
Gets the instance of integration registry stored on Controller . Note : Integration Registry is stored as index 0 on the Controller
@ dev set refer reward rate
Return the desired amount of liquidity token that the migrator wants .
@ dev Transfers control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev Either Transfer Single or Transfer Batch MUST emit when tokens are transferred , including zero value transfers as well as minting or burning ( see " Safe Transfer Rules " section of the standard ) . The operator argument MUST be msg . sender . The from argument MUST be the address of the holder whose balance is decreased . The to argument MUST be the address of the recipient whose balance is increased . The ids argument MUST be the list of tokens being transferred . The values argument MUST be the list of number of tokens ( matching the list and order of tokens specified in ids ) the holder balance is decreased by and match what the recipient balance is increased by . When minting creating tokens , the from argument MUST be set to 0x0 ( i . e . zero address ) . When burning destroying tokens , the to argument MUST be set to 0x0 ( i . e . zero address ) .
@ dev Return all asset addresses in order
ADD LIQUIDITY
Returns the total staked tokens within the contract
@ dev Set static rate of return , only the administrator can call
@ dev Emitted during transfer enabling
calculates the CREATE2 address for a pair without making any external calls hex ' 96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f '
@ notice get past rounds answers @ param round Id the round number to retrieve the answer for @ dev # [ deprecated ] Use get Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended get Round Data instead which includes better verification information .
@ dev See { IERC721 safe Transfer From } .
@ dev Sell Stable ERC20 Token . @ param buy Addr buying token address . @ param sell Addr selling token amount . @ param sell Amt selling token amount . @ param unit Amt unit amount of buy Amt sell Amt with slippage . @ param get Id Get token amount at this ID from Insta Memory Contract . @ param set Id Set token amount at this ID in Insta Memory Contract .
@ notice Cancels the liquidity pool migration if it has been already initiated . This will reset the state of the liquidity pool migration . This function will emit a Cancel Liquidity Pool Migration event upon success . This is a priviledged function restricted to the contract owner .
@ dev Divides value a by value b where rounding is towards the lesser number . ( positive values are rounded towards zero and negative values are rounded away from 0 ) .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev returns the ether KTY price on uniswap , that is , how many KT Ys for 1 ether uint256 amount ETH 1e18 ;
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ param operator The address to know info about @ return result true if the given address is able to mint new tokens , false otherwise .
@ dev Calculates the amount that has already vested but hasn ' t been released yet . @ param token ERC20 token which is being vested
@ notice View function that will return the action ID or message hash that will need to be prefixed ( according to EIP 191 0x45 ) , hashed , and signed by both the user signing key and by the key returned for this smart wallet by the Dharma Key Registry in order to construct a valid signature for a given generic action . The current nonce will be used , which means that it will only be valid for the next action taken . @ param to address The target to call into as part of the generic action . @ param data bytes The data to supply when calling into the target . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ return The action ID , which will need to be prefixed , hashed and signed in order to construct a valid signature .
@ dev Computes the output amount after the swap . @ param i Token index to swap in . @ param j Token index to swap out . @ param dx Unconverted amount of token i to swap in . @ return Unconverted amount of token j to swap out . balance [ i ] balance [ i ] + dx precisions [ i ] dy ( balance [ j ] y 1 ) precisions [ j ] in case there was rounding errors
@ notice External view function to check the current limit on deposit amount enforced for the deposit manager when finalizing deposits , expressed in Dai and in Dharma Dai . @ return The Dai and Dharma Dai limit on deposit finalization amount .
Locks the contract to external non governance function calls @ dev governance function called only by the migration manager or an admin @ dev typically called by the registry contract upon locking all managed contracts @ dev getters and migration functions remain active also for locked contracts @ dev checked by the only When Active modifier
returns LP amount , not token amount
@ notice Accrue interest then return the up to date exchange rate @ return Calculated exchange rate scaled by 1e18
Emits upon a successful Mine , indicates the blocktime at point of the mine and the value mined
@ dev Withdraw a supported asset and burn OUSD . @ param amount Amount of OUSD to burn
@ dev Returns a new slice containing the same data as the current slice . @ param self The slice to copy . @ return A new slice containing the same data as self .
Set the latest Policy Set contract address . Only the owner can execute this function .
@ notice Derivative spec author @ dev Used to set and receive author ' s fee @ return address of the author
@ dev burn burner ' s coin
@ notice view the assimilator address for a derivative @ return assimilator the assimilator address
@ dev Claim Governance of the contract to a new account ( new Governor ) . Can only be called by the new Governor .
naps stuff
@ notice get the ID of the last updated round @ dev # [ deprecated ] Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
@ notice Return state seq Num map of a duplex channel @ param c the channel to be viewed @ return peers ' addresses @ return two simplex state sequence numbers
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account
@ dev Incorporates the liquidity mining assets into the reserve . Assets are converted to the underlying asset and then added to the reserve . If the amount available is below the minimum , or if the exchange contract is not set , nothing is done . Otherwise the operation is performed , limited to the maximum amount . Note that this operation will incorporate to the reserve all the underlying token balance including funds sent to it or left over somehow . @ return success A boolean indicating whether or not the action succeeded .
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
@ dev Sets the address of the proxy admin . @ param new Admin Address of the new proxy admin .
@ dev Burns tokens and retuns the ETH value , after fee , of those .
@ notice Internal view function for validating a user ' s signature . If the user ' s signing key does not have contract code , it will be validated via ecrecover ; otherwise , it will be validated using ERC 1271 , passing the message hash that was signed , the action type , and the arguments as data . @ param message Hash bytes32 The message hash that is signed by the user . It is derived by prefixing ( according to EIP 191 0x45 ) and hashing an action ID returned from get Custom Action ID . @ param action uint8 The type of action , designated by it ' s index . Valid actions in V8 include Cancel ( 0 ) , Set User Signing Key ( 1 ) , Generic ( 2 ) , Generic Atomic Batch ( 3 ) , DAI Withdrawal ( 10 ) , USDC Withdrawal ( 5 ) , ETH Withdrawal ( 6 ) , Set Escape Hatch ( 7 ) , Remove Escape Hatch ( 8 ) , and Disable Escape Hatch ( 9 ) . @ param arguments bytes ABI encoded arguments for the action . @ param user Signature bytes A signature that resolves to the public key set for this account in storage slot zero , user Signing Key . If the user signing key is not a contract , ecrecover will be used ; otherwise , ERC1271 will be used . @ return A boolean representing the validity of the supplied user signature .
@ notice Unkill contract ( unfreezes deposits ) @ return True if contract unkilling is successful
@ notice EIP20 Transfer event
@ notice Symbol of the oracle iterator @ dev Should be resolved through Oracle Iterator Registry contract @ return oracle iterator symbol
@ dev updates the state of the core as a result of a flashloan action @ param reserve the address of the reserve in which the flashloan is happening @ param income the income of the protocol as a result of the action
@ dev Deposits the token to start earning .
@ notice Displays all accepted liquidity pairs
@ param token The address of the token to be supported for farming . @ param underlying Token The token to which this token is pegged . IE a Uniswap V2 LP equity token for DAI m DAI has an underlying token of DAI . @ param underlying Token Decimals The number of decimals that the underlying Token has . @ param points The amount of reward points for the provided token . @ param fees The fees to be paid in underlying Token when the user performs a harvest . @ param token Type The type of token that is being added . Used for unwrapping it and paying harvest fees .
@ notice Returns if delegator has delegated to a service provider @ param delegator address of delegator @ param service Provider address of service provider @ return boolean indicating whether delegator exists for service provider
@ notice Swap Ether for Dai and use it to mint Dharma Dai . The trade is facilitated by a " trade helper " contract in order to protect against malicious calls related to processing swaps via potentially unsafe call targets or other parameters . In the event that a swap does not result in sufficient Dai being received , the swap will be rolled back . In either case the nonce will still be incremented as long as signatures are valid . @ param eth To Supply uint256 The Ether to supply as part of the swap . @ param minimum Dai Received uint256 The minimum amount of Dai that must be received in exchange for the supplied Ether . @ param target address The contract that the trade helper should call in order to facilitate the swap . @ param data bytes The payload that will be passed to the target , along with the supplied Ether , by the trade helper in order to facilitate the swap . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param user Signature bytes A signature that resolves to the public key set for this account in storage slot zero , user Signing Key . If the user signing key is not a contract , ecrecover will be used ; otherwise , ERC1271 will be used . A unique hash returned from get Eth For Dai Action ID is prefixed and hashed to create the message hash for the signature . @ param dharma Signature bytes A signature that resolves to the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Eth For Dai Action ID Action ID is prefixed and hashed to create the signed message .
@ notice Set the remove delegator lockup duration after validating against governance @ param duration Incoming remove delegator duration value
@ dev Event signal : Loyalty contract address waws changed
Safe snp transfer function , just in case if rounding error causes pool to not have enough SN Ps .
Calculate sqrt ( x ) rounding down , where x is unsigned 256 bit integer number . @ param x unsigned 256 bit integer number @ return unsigned 128 bit integer number r ( r + x r ) > > 1 ;
@ notice Unlock funds locked in the expired options @ param option ID ID of the option
@ dev convert from internal savings amount to original savings amount
@ dev Returns the last node in the list ( node with the smallest key ) @ return address for the tail of the list
@ dev Claims rewards for a given group of epochs in all fee Handlers , distribute fees and its share to pool Master @ param epoch Group An array of epochs for which rewards are being claimed . Asc order and uniqueness is required .
@ dev Modifier to use in the initializer function of a contract .
Event for token purchase logging @ param purchaser who paid for the tokens @ param beneficiary who got the tokens @ param value weis paid for purchase @ param amount amount of tokens purchased
View function to see pending CIT Ys on frontend .
@ notice get timestamp when an answer was last updated @ dev overridden funcion to add the check Access ( ) modifier @ param round Id the round number to retrieve the updated timestamp for @ dev # [ deprecated ] Use get Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended get Round Data instead which includes better verification information .
@ notice Distributes a specific amount of a token owned by this contract @ param token The ERC20 token to distribute @ param amount To Distribute The specific amount to distribute avoid transfers burns of 0 tokens solium disable next line
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
Transfers the director to a new address
@ dev Upgrades the proxy to a new implementation . @ param new Implementation Address of the new implementation .
@ notice Changes the exclusive role holder of role Id to new Member . @ dev Reverts if the caller is not a member of the managing role for role Id or if role Id is not an initialized , Exclusive Role . @ param role Id the Exclusive Role membership to modify . @ param new Member the new Exclusive Role member .
Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
modifiers
@ dev Verifies whether or not a liquidity pool is migrating or has migrated . This method is exposed publicly . @ return has Migrated A boolean indicating whether or not the pool migration has started .
@ dev IR Token . redeem implementation It withdraws equal amount of initially supplied underlying assets
. @ dev Gets the list of methods for binding to wallets . Sub contracts should override this method to provide methods for wallet binding . @ return methods A list of method selectors for binding to the wallet when this module is activated for the wallet .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
External Function Interface to implement on final contract
pure functions
divide a UQ112x112 by a uint112 , returning a UQ112x112
@ notice A method to distribute rewards to all stakeholders . Do reward halving Loop for all staking slots base on support stake token list Calculate stakeholder reward Add it to reward hub Add refer bonus Get 5 % bonus from user you refer to the pool Emit event 5 % of rewards will be add to pool dev address Update some pool information Minus 1 minute of the time
Purchase a multiplier level , same level cannot be purchased twice . Cost will be reduced by the amount already spent on multipliers . Transfer tokens to the contract Update balances and level If user has staked balances , then set their new accounting balance Get the previous accounting balance Get the new multiplier Calculate new accounting balance Set the accounting balance Get the difference for adjusting the total accounting balance Adjust the global accounting balance .
@ notice unstakes a certain amount of tokens , returning these tokens to the user @ param amount number of tokens to unstake
@ notice Implemented by jobs to show that a keeper performed work @ param credit the asset being awarded to the keeper @ param keeper address of the keeper that performed the work @ param amount the reward that should be allocated
@ notice Delete the contract , transfers the remaining token and ether balance to the specified payout Address @ param payout Address address to transfer the balances to . Ensure that this is able to handle ERC20 tokens @ dev owner only + only on or after earliest Delete block
@ notice Redeem d Dai Amount Dharma Dai for Dai . Only the owner or the designated adjuster role may call this function . @ param d Dai Amount uint256 The amount of Dharma Dai to supply when redeeming for Dai . @ return The amount of Dai received .
@ dev Redundant with global Token Symbol ( ) for backwards compatibility with v3 & v4 locks .
Called from the controller after hard work has been done . Defensively avoid reverting the transaction in this function . no rewards now vault does not exist
@ dev Remove an account ' s access to this role .
@ dev Transfer tokens from one address to another . Note that while this function emits an Approval event , this is not required as per the specification , and other compliant implementations may not emit the event . @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ return the staking token for this staking contract
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
@ dev Pause mint swap redeem actions . Can unpause later .
@ dev Returns the freezing status of a wallet if is Frozen returns true the wallet is frozen if is Frozen returns false the wallet is not frozen is Frozen returning true doesn ' t mean that the balance is free , tokens could be blocked by a partial freeze or the whole token could be blocked by pause @ param user Address the address of the wallet on which is Frozen is called
@ notice Implemented by jobs to show that a keeper performed work @ param keeper address of the keeper that performed the work @ param amount the reward that should be allocated
@ notice allows non oracles to request a new round
@ dev Enable a delegate to act on the behalf of caller
@ dev Event gets fired when the token burn rate changes
@ dev adds a new Fee Handler @ param fee Handler Fee Handler address @ param reward Token Rewards Token address
@ notice returns the seed which is actually input to the VRF coordinator @ dev To prevent repetition of VRF output due to repetition of the @ dev user supplied seed , that seed is combined in a hash with the @ dev user specific nonce , and the address of the consuming contract . The @ dev risk of repetition is mostly mitigated by inclusion of a blockhash in @ dev the final seed , but the nonce does protect against repetition in @ dev requests which are included in a single block . @ param user Seed VRF seed input provided by user @ param requester Address of the requesting contract @ param nonce User specific nonce at the time of the request
Governance functions
@ dev Returns the amount of tokens owned by an account ( owner ) .
See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ notice Allows governance to mint new tokens to treasury @ param amount the amount of tokens to mint to treasury
THE ONLY ADMIN FUNCTIONS ^ ^ ^ ^ uint eth Amount IERC20 ( WETH Address ) . balance Of ( pool Address ) ; uint token Amount IERC20 ( ast6Address ) . balance Of ( pool Address ) ; IERC20 ( ast6Address ) . approve ( UNIROUTER , amount Token Desired ) ;
@ dev This function allows users to retireve all information about a staker @ param staker address of staker inquiring about @ return uint current state of staker @ return uint start Date of staking
@ dev as the contract extends the Versioned Initializable contract to match the state of the Lending Pool contract , the get Revision ( ) function is needed .
Public Functions @ dev Updates the global exchange settings . This function can only be called by the owner of this contract . Warning : these new values will be used by existing and new Loopring exchanges .
@ notice Adds the specified address to the list of administrators . @ param address The address to add to the administrator list .
@ dev Multiplies and truncates a token ratio , rounding up the result i . e . How much m Asset is this b Asset worth ? @ param x Left hand input to multiplication ( i . e Exact quantity ) @ param ratio b Asset ratio @ return Result after multiplying the two inputs and then dividing by the shared ratio scale , rounded up to the closest base unit .
@ notice Return pending Pay Out map of a duplex channel @ param c the channel to be viewed @ return peers ' addresses @ return pending Pay Outs of two simplex channels
SWAP ( supporting fee on transfer tokens ) requires the initial amount to have already been sent to the first pair {
@ dev Number of unlocked token info size .
@ dev Upgrades the implementation address @ param new Implementation representing the address of the new implementation to be set
@ dev Returns true if operator is approved to transfer account ' s tokens . See { set Approval For All } .
@ dev Check if an account has this role . @ return bool
@ dev Replace the actual claim Topics Registry contract with a new one . This function can only be called by the wallet set as owner of the smart contract @ param claim Topics Registry The address of the new claim Topics Registry emits Claim Topics Registry Set event
@ dev A function that burns ERC20s and gives back ERC1155s Requirements : msg . sender has more than amount of ERC20 tokens associated with token Id . if the market has finalized then it is advised that you call claim ( ) on ERC20Wrapper contract associated with the winning outcome @ param token Id token id associated with a outcome of a market @ param amount amount of tokens to be unwrapped
this low level function should be called from a contract which performs important safety checks ( uint112 reserve0 , uint112 reserve1 , ) get Reserves ( ) ; { if ( amount0Out > 0 ) safe Transfer ( token0 , to , amount0Out ) ; if ( amount1Out > 0 ) safe Transfer ( token1 , to , amount1Out ) ; {
Set the latest Vote Counter contract address . Only the owner can execute this function .
@ dev Helper function to create stakes for a given address @ param address address The address the stake is being created for @ param amount uint256 The number of tokens being staked @ param lock In Duration uint256 The duration to lock the tokens for @ param data bytes optional data to include in the Stake event
@ dev Returns one of the g Tokens that makes up the portfolio . This method is exposed publicly . @ param index The desired index , must be less than the token count . @ return token The g Token currently present at the given index .
Event for crowdsale extending @ param new Closing Time new closing time @ param prev Closing Time old closing time
square root of a UQ112x112
Notifies of multiple stake change events . @ param stake Owners is the addresses of subject stake owners . @ param amounts is the differences in total staked amounts . @ param signs is the signs of the added ( true ) or subtracted ( false ) amounts . @ param updated Stakes is the updated total staked amounts .
@ dev emitted during a redeem action . @ param reserve the address of the reserve @ param user the address of the user @ param amount the amount to be deposited @ param timestamp the timestamp of the action
@ notice Reads the current answer from aggregator delegated to . @ dev # [ deprecated ] Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
@ dev Return if the debt of an user is between zero and the dust level @ param user Address of the user vault
@ dev Remove the right of the operator address to be an operator for ' msg . sender ' and to transfer and redeem tokens on its behalf . @ param operator Address to rescind as an operator for ' msg . sender ' .
@ dev returns true if Exp is exactly zero
@ dev PUBLIC FACING : Open a stake . @ param new Staked Suns Number of Suns to stake @ param new Staked Days Number of days to stake
self explanatory
@ notice function Emergency situation that requires @ notice contribution period to stop or not .
@ notice Grants the minter role to an address @ dev The sender must have the admin role @ param address EOA or contract receiving the new role
@ notice Get cash balance of this c Token in the underlying asset @ return The quantity of underlying asset owned by this contract
Block when the intent was relayed 0 if the intent was not relayed
@ dev Returns to normal state .
Query to get the time of last farming of user
overrides
@ dev Receive ETH and add value to the accumulated eth for stake
Update the given pool ' s SUSHI allocation point . Can only be called by the owner .
@ notice Upgrade the address of the logic contract for this proxy @ dev Recreation of Admin Upgradeability Proxy . upgrade To . Adds a check to ensure msg . sender is the Audius Proxy Admin @ param new Implementation new address of logic contract that the proxy will point to
@ dev returns balance of the owner
@ notice Approve spender to transfer up to amount from src @ dev This will overwrite the approval amount for spender and is subject to issues noted [ here ] ( https : eips . ethereum . org EIPS eip 20 # approve ) @ param spender The address of the account which may transfer tokens @ param amount The number of tokens that are approved @ return success Whether or not the approval succeeded
Used to mint Idle Tokens , given an underlying amount ( eg . DAI ) . This method triggers a rebalance of the pools if needed NOTE : User should ' approve ' amount of tokens before calling mint Idle Token NOTE 2 : this method can be paused @ param amount : amount of underlying token to be lended @ param skip Rebalance : flag for skipping rebalance for lower gas price @ param referral : referral address @ return minted Tokens : amount of Idle Tokens minted
@ dev Calculates how much of the reserve token is available for withdrawal by the current contract for the given g Token . @ param token The g Token to withdraw from . @ return underlying Cost The total amount redeemable by the current contract from the given g Token .
@ dev Upgrade the implementation of the proxy . NOTE : Only the admin can call this function . See { Proxy Admin upgrade } .
Can completely disable claiming KEEP rewards and selling . Good for emergency withdraw in the simplest possible way .
Withdraw LP tokens from Tsunami Surfer .
@ dev ensure enough curve . fi pool tokens are available Check if current available amount of TUSD is enough and withdraw remainder from gauge @ param needed Amount amount required
@ dev gets the reserve current stable borrow rate . Is the market rate if the reserve is empty @ param reserve the reserve address @ return the reserve current stable borrow rate no stable rate borrows yet
Set 0 to disable quota ( no limit )
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev check if an account has this role @ return bool
Returns true if the value is present in the list . Uses index Of internally . @ param A The input array to search @ param a The value to find @ return Returns is In for the first occurrence starting from index 0
@ notice Handle the approval of ERC1363 tokens @ dev Any ERC1363 smart contract calls this function on the recipient after an approve . This function MAY throw to revert and reject the approval . Return of other than the magic value MUST result in the transaction being reverted . Note : the token contract address is always the message sender . @ param owner address The address which called approve And Call function @ param value uint256 The amount of tokens to be spent @ param data bytes Additional data with no specified format @ return bytes4 ( keccak256 ( " on Approval Received ( address , uint256 , bytes ) " ) ) unless throwing
@ dev Transfers token Id from from to to . As opposed to { transfer From } , this imposes no restrictions on msg . sender . Requirements : to cannot be the zero address . token Id token must be owned by from . Emits a { Transfer } event . Clear approvals from the previous owner
@ dev divides two wad , rounding half up to the nearest wad @ param a wad @ param b wad @ return the result of a b , in wad
@ dev Token swapped between two underlying tokens .
Safe city transfer function , just in case if rounding error causes pool to not have enough CIT Ys .
@ dev Delegates execution to an implementation contract . This is a low level function that doesn ' t return to its internal call site . It will return to the external caller whatever the implementation returns . @ param implementation Address to delegate . Copy msg . data . We take full control of memory in this inline assembly block because it will not return to Solidity code . We overwrite the Solidity scratch pad at memory position 0 . Call the implementation . out and outsize are 0 because we don ' t know the size yet . Copy the returned data . delegatecall returns 0 on error .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Lets the owner change the address of the ENS resolver contract . @ param ens Resolver The address of the ENS resolver contract .
function to allow admin to claim other ERC20 tokens sent to this contract ( by mistake ) Admin cannot transfer out WSF from this smart contract
@ notice Only manager is able to call this function @ dev Sets the percentage of the liquidation fee for a particular collateral @ param asset The address of the main collateral token @ param new Value The liquidation fee percentage ( 0 decimals )
@ dev function to check if the crowdsale has ended @ param self Stored crowdsale from crowdsale contract @ return success
@ dev Returns the module the given method has been bound to . @ param method The method ' s 4 byte selector . @ return module The address of the bound module . If no binding exists , returns address ( 0 ) instead .
@ dev Lend funds to a given c Token ' s market . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to lend . @ return success A boolean indicating whether or not the operation suceeded .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ dev Returns the downcasted uint8 from uint256 , reverting on overflow ( when the input is greater than largest uint8 ) . Counterpart to Solidity ' s uint8 operator . Requirements : input must fit into 8 bits .
@ dev endlock closes down the locked Transfer any remaining tokens transfer any remaining ETH balance in the contract to the owner
View function to see pending v US Ds on frontend .
those methods are called by the legacy contract and they must ensure msg . sender to be the contract address
@ dev Handles the receipt of a multiple ERC1155 token types . This function is called at the end of a safe Batch Transfer From after the balances have been updated . To accept the transfer ( s ) , this must return bytes4 ( keccak256 ( " on ERC1155Batch Received ( address , address , uint256 [ ] , uint256 [ ] , bytes ) " ) ) ( i . e . 0xbc197c81 , or its own function selector ) . @ param operator The address which initiated the batch transfer ( i . e . msg . sender ) @ param from The address which previously owned the token @ param ids An array containing ids of each token being transferred ( order and length must match values array ) @ param values An array containing amounts of each token being transferred ( order and length must match ids array ) @ param data Additional data with no specified format @ return bytes4 ( keccak256 ( " on ERC1155Batch Received ( address , address , uint256 [ ] , uint256 [ ] , bytes ) " ) ) if transfer is allowed
This is where all your gas goes , sorry Not sorry , you probably only paid 1 gwei
@ dev See { IERC20 transfer } . Unlike send , recipient is not required to implement the { IERC777Recipient } interface if it is a contract . Also emits a { Sent } event .
@ notice LXL client can assign account as client Oracle to help call release ( ) and withdraw ( ) . @ param client Oracle Account that can help call release ( ) and withdraw ( ) ( default to client if unsure ) . @ param registration Registered LXL number .
@ dev Withdraw accumulated balance for a payee , forwarding all gas to the recipient . WARNING : Forwarding all gas opens the door to reentrancy vulnerabilities . Make sure you trust the recipient , or are either following the checks effects interactions pattern or using { Reentrancy Guard } . @ param payee The address whose funds will be withdrawn and transferred to .
@ notice accrues interest and sets a new reserve factor for the protocol using set Reserve Factor Fresh @ dev Admin function to accrue interest and set a new reserve factor @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but on top of that we want to log the fact that an attempted reserve factor change failed . set Reserve Factor Fresh emits reserve factor specific logs on errors , so we don ' t need to .
Total supply
first is empty to keep the legacy order in place
@ dev PUBLIC FACING : Return the lobby days that a user is in with a single call @ param member Addr TRX address of the user @ return Bit vector of lobby day numbers
this low level function should be called from a contract which performs important safety checks ( uint112 reserve0 , uint112 reserve1 , ) get Reserves ( ) ; address token0 token0 ; address token1 token1 ; uint total Supply total Supply ; amount0 liquidity . mul ( balance0 ) total Supply ; amount1 liquidity . mul ( balance1 ) total Supply ; if ( fee On ) k Last uint ( reserve0 ) . mul ( reserve1 ) ;
@ dev Returns the max value in an array . @ param self Storage array containing uint256 type variables @ return max Value The highest value in the array
@ notice Performs the minting of gc Token shares upon the deposit of the c Token underlying asset . The funds will be pulled in by this contract , therefore they must be previously approved . This function builds upon the G Token Base deposit function . See G Token Base . sol for further documentation . @ param underlying Cost The amount of the underlying asset being deposited in the operation .
@ dev Swap amount of BPLOT belonging to of to PLOT and transfer to to address @ param of Address from whose BPLOT to be transferred @ param to Recipient address , who recieves PLOT @ param amount Amount of tokens to swap
@ dev send ether from the completed crowdsale to the owners wallet address @ param self Stored crowdsale from crowdsale contract @ return true if owner withdrew eth
@ notice Function to initialize the contract @ dev staking Address must be initialized separately after Staking contract is deployed @ dev delegate Manager Address must be initialized separately after Delegate Manager contract is deployed @ dev service Type Manager Address must be initialized separately after Service Type Manager contract is deployed @ dev claims Manager Address must be initialized separately after Claims Manager contract is deployed @ param governance Address Governance proxy address
@ notice admin can update the exchange rate @ param value the new exchange rate @ param granularity number of decimal places the exchange value is accurate to @ return true if success
@ notice Allow users to buy tokens for new Buy Price eth and sell tokens for new Sell Price eth @ param new Sell Price Price the users can sell to the contract @ param new Buy Price Price users can buy from the contract
@ notice Delegates execution to an implementation contract @ dev It returns to the external caller whatever the implementation returns or forwards reverts There are an additional 2 prefix uints from the wrapper returndata , which we ignore since we make an extra hop . @ param data The raw data to delegatecall @ return The returned bytes from the delegatecall
@ dev If self starts with needle , needle is removed from the beginning of self . Otherwise , self is unmodified . @ param self The slice to operate on . @ param needle The slice to search for . @ return self
@ dev Convert a high precision decimal to a standard decimal representation .
@ dev Fallback function . Implemented entirely in fallback .
allows execution by the owner only
@ notice Allows governance to change the Kper Network Helper for max spend @ param kprh new helper address to set
@ notice Get total delegated stake locked up for a service provider
@ dev fallback function
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a Transfer event with from set to the zero address . Requirements to cannot be the zero address .
Get total staked amount
@ notice Store signed simplex states on chain as checkpoints @ dev simplex states in this array are not necessarily in the same channel , which means snapshot States natively supports multi channel batch processing . This function only updates seq Num , transfer Out , pending Pay Out of each on chain simplex state . It can ' t ensure that the pending pays will be cleared during settling the channel , which requires users call intend Settle with the same state . TODO : wait for Solidity ' s support to replace Signed Simplex State Array with bytes [ ] . @ param self storage data of Celer Ledger contract @ param signed Simplex State Array bytes of Signed Simplex State Array message
@ dev Adds two numbers , reverts on overflow .
@ dev The total number of g Tokens added to the portfolio . This method is exposed publicly . @ return count The number of g Tokens that make up the portfolio .
@ dev Converts a uint256 to its ASCII string representation . Inspired by Oraclize API ' s implementation MIT licence https : github . com oraclize ethereum api blob b42146b063c7d6ee1358846c198246239e9360e8 oraclize API 0 . 4 . 25 . sol
@ dev Simple token to c Token formula from Compound
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
@ dev MUST emit when the URI is updated for a token ID UR Is are defined in RFC 3986 The URI MUST point a JSON file that conforms to the " ERC 1155 Metadata JSON Schema "
@ notice Borrows are repaid by another user ( possibly the borrower ) . @ param payer the account paying off the borrow @ param borrower the account with the debt being payed off @ param repay Amount the amount of undelrying tokens being returned @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) EFFECTS & INTERACTIONS ( No safe failures beyond this point )
@ dev function used to transfer the ownership of the compliance contract to a new owner , giving him access to the Only Owner functions implemented on the contract @ param new Owner The address of the new owner of the compliance contract This function can only be called by the owner of the compliance contract emits an Ownership Transferred event
@ notice called by the owner to remove and add new oracles as well as update the round related parameters that pertain to total oracle count @ param removed is the list of addresses for the new Oracles being removed @ param added is the list of addresses for the new Oracles being added @ param added Admins is the admin addresses for the new respective added list . Only this address is allowed to access the respective oracle ' s funds @ param min Submissions is the new minimum submission count for each round @ param max Submissions is the new maximum submission count for each round @ param restart Delay is the number of rounds an Oracle has to wait before they can initiate a round
@ dev Binds a method from the given module to this wallet so the method can be invoked using this wallet ' s default function . Note that this method must throw when the given module has not been added to this wallet . @ param method The method ' s 4 byte selector . @ param module The module ' s address . Use address ( 0 ) to unbind the method .
@ return the beneficiary of the tokens .
@ dev Calculates the collateralization ratio and range relative to the maximum collateralization ratio provided by the underlying asset . @ return collateralization Ratio The target absolute collateralization ratio . @ return min Collateralization Ratio The minimum absolute collateralization ratio . @ return max Collateralization Ratio The maximum absolute collateralization ratio .
@ dev Executed when a purchase has been validated and is ready to be executed . Doesn ' t necessarily emit send tokens . @ param beneficiary Address receiving the tokens @ param token Amount Number of tokens to be purchased
@ dev Safely transfers token Id token from from to to . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must exist and be owned by from . If the caller is not from , it must be approved to move this token by either { approve } or { set Approval For All } . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
@ dev Returns the amount of tokens owned by account .
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not . solium disable next line
@ notice Internal trade function for cases where one of the tokens in question levies a transfer fee . If token Received is TRADE FOR USDC AND RETAIN FLAG , trade for USDC and retain the full output amount by replacing the recipient ( " to " input ) on the swap Tokens For Exact Tokens call .
@ dev user redeem mine rewards . mine Coin mine coin address amount redeem amount .
@ param index Index of transaction to remove . Transaction ordering may have changed since adding .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
Returns the notifications to the delegation contract status @ return notify Delegations is a bool indicating whether notifications are enabled
Removes a subscription plan contract to the authorized subscribers list @ dev governance function called only by the functional manager @ param addr is the address of the subscription plan contract
@ notice Pause a currently unpaused role and emit a Role Paused event . Only the owner or the designated pauser may call this function . Also , bear in mind that only the owner may unpause a role once paused . @ param role The role to pause .
@ dev Changes required sigs to change wallet parameters @ param self Wallet in contract storage @ param required Admin The new signature requirement @ param confirm True if confirming , false if revoking confirmation @ param data Message data passed from wallet contract @ return bool Returns true if successful , false otherwise @ return bytes32 Returns the tx ID , can be used for confirm revoke functions
Stakes @ dev Gets the amount of LRC the owner has staked onchain for this exchange . The stake will be burned if the exchange does not fulfill its duty by processing user requests in time . Please note that order matching may potentially performed by another party and is not part of the exchange ' s duty . @ return The amount of LRC staked
Update dev address by the previous dev .
notice Delegate votes from msg . sender to delegatee param delegator The address to get delegatee for
@ notice Calculates the current borrow interest rate per block @ param cash The total amount of cash the market has @ param borrows The total amount of borrows the market has outstanding @ param reserves The total amount of reserves the market has @ return The borrow rate per block ( as a percentage , and scaled by 1e18 )
@ dev Divide a scalar by an Exp , returning a new Exp .
@ dev this function aggregates the configuration parameters of the reserve . It ' s used in the Lending Pool Data Provider specifically to save gas , and avoid multiple external contract calls to fetch the same data . @ param reserve the reserve address @ return the reserve decimals @ return the base ltv as collateral @ return the liquidation threshold @ return if the reserve is used as collateral or not
@ notice Get the config for the symbol Hash @ param symbol Hash The keccack256 of the symbol of the config to get @ return The config object
@ notice Assign @ token Amount ( self . token ( ) : address , amount , false ) tokens to receiver from the Token Manager ' s holdings @ param receiver The address receiving the tokens @ param amount Number of tokens transferred
Returns the value of the int256 type that mapped to the given key .
@ dev Withdraws stake from pool and claims any rewards
@ notice Failure event
Lending Pool Data Provider
@ notice Takes the absolute value of a given number @ dev Helper function @ param number The specified number @ return The absolute value of the number
@ notice return the current managed values @ return latest USD to CAD exchange rate , granularity , and timestamp
@ notice Allows treasury to fund new tokens to a job contract @ param amount the amount of tokens to fund to a job contract Only Governance can fund a job contract from the treasury
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Note that unlike { grant Role } , this function doesn ' t perform any checks on the calling account . [ WARNING ] This function should only be called from the constructor when setting up the initial roles for the system . Using this function in any other way is effectively circumventing the admin system imposed by { Access Control } .
@ notice Sets the minimum and maximum amount of the gc Token Type 1 to be processed on every operation . This method applies only to gc Tokens Type 2 and is not relevant for gc Tokens Type 1 . This is a priviledged function restricted to the contract owner . @ param growth Min Gulp Amount The minimum amount of the gc Token Type 1 to be processed per deposit withdrawal ( ignored ) . @ param growth Max Gulp Amount The maximum amount of the gc Token Type 1 to be processed per deposit withdrawal ( ignored ) .
@ notice LXL can be registered as provider request for client deposit ( by calling confirm Locker ( ) ) . @ param client Account to provide sum deposit and call release ( ) of registered amount s . @ param client Oracle Account that can help call release ( ) and withdraw ( ) ( default to client if unsure ) . @ param provider Account to receive registered amount s . @ param resolver Account that can call resolve ( ) to award sum remainder between LXL parties . @ param token Token address for amount deposit . @ param amount Lump sum or array of milestone amount s to be sent to provider on call of release ( ) . @ param termination Exact termination date in seconds since epoch . @ param details Context re : LXL . @ param swift Resolver If true , sum remainder can be resolved by holders of swift Resolver Token . function register Locker (
@ return All of the different asset types that can be used by the DMM Ecosystem .
This famous algorithm is called " exponentiation by squaring " and calculates x ^ n with x as fixed point and n as regular unsigned . It ' s O ( log n ) , instead of O ( n ) for naive repeated multiplication . These facts are why it works : If n is even , then x ^ n ( x ^ 2 ) ^ ( n 2 ) . If n is odd , then x ^ n x x ^ ( n 1 ) , and applying the equation for even x gives x ^ n x ( x ^ 2 ) ^ ( ( n 1 ) 2 ) . Also , EVM division is flooring and floor [ ( n 1 ) 2 ] floor [ n 2 ] .
NOTE out Token For1WETH < last Quote . mul ( 150 ) . div ( 100 ) check Get amt you would get for 1eth flash loan safety we check the last quote for comparing to this one Safety flash loan revert If change is above 50 % This can be rescued by the bool " is Rescue "
@ notice a method to provide all current info oracles need . Intended only only to be callable by oracles . Not for use by contracts to read state . @ param oracle the address to look up information for .
@ dev Search the list of g Tokens and selects the one for which the deposit will provide the best correction of deviation from its target share . @ param reserve Amount The total reserve amount used for calculation . @ return adjust Token The g Token to deposit to . @ return adjust Amount The amount to be deposited .
@ notice Transfers ownership to the desired address . The function is callable only by the owner .
This function allows governance to take unsupported tokens out of the contract . This is in an effort to make someone whole , should they seriously mess up . There is no guarantee governance will vote to return these . It also allows for removal of airdropped tokens .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns true if the sender corresponds to a token that is bound with the Compliance contract
@ dev Registers and enables a new module .
@ dev Returns the number of accounts that have role . Can be used together with { get Role Member } to enumerate all bearers of a role .
@ notice see how much funds is currently available for redemption @ return funds amount in 18 decimals
Standard function transfer similar to ERC20 transfer with no data . Added due to backwards compatibility reasons . standard function transfer similar to ERC20 transfer with no data added due to backwards compatibility reasons
@ notice preview estimated reward distribution for full unstake with no GYSR applied @ return estimated reward @ return estimated overall multiplier @ return estimated raw user share seconds that would be burned @ return estimated total unlocked rewards
Do flooding when timestamp reached
@ dev Subtracts two int256 variables and fails on overflow .
@ dev Sets the address of the owner
@ dev only locker can lock account
@ notice Returns the maximum amount of borrow amount available @ dev Due to rounding errors the result is 1 % wei from the exact amount @ param c Borrow Address Borrow token we are getting the max value of @ param account Users account @ return Returns the max . borrow amount in that token return sub ( liquidity In Token , ( liquidity In Token 100 ) ) ;
@ dev upgrades a multiple contract implementations
@ notice Proof of oracle iterator contract @ dev Verifies that contract is a oracle iterator contract @ return true if contract is a oracle iterator contract
@ dev Modifier to protect an initializer function from being invoked twice .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
NOTE Only use this call with a trusted spender contract
@ notice Claims distributions and allows to specify how many distributions to process . This allows limit gas usage . One can do this for others
Called when tokens are redeemed
@ return the token being held .
@ dev get Dai address
@ notice Internal function for withdrawing the total underlying asset balance from the corresponding d Token . Note that the requested balance may not be currently available on Compound , which will cause the withdrawal to fail . @ param asset uint256 The asset ' s ID , either Dai ( 0 ) or USDC ( 1 ) . Get d Token address for the asset type . ( No custom ETH withdrawal action . ) Try to retrieve the current d Token balance for this account . Something went wrong with the balance check log an External Error . Only perform the call to redeem if there is a non zero balance . Attempt to redeem the underlying balance from the d Token contract . Function selector is the same for all d Tokens , so just use d Dai ' s . Log an external error if something went wrong with the attempt .
@ notice Accepts transfer of gov rights . msg . sender must be pending Gov @ dev Gov function for pending gov to accept role and update gov @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ author james foley http : github . com realisation @ notice withdraws amount of shell tokens from the the pool equally from the numeraire assets of the pool with no slippage @ param tokens an array of the numeraire assets you will withdraw @ param amounts an array of the amounts in terms of partitioned shels you want to withdraw from that numeraire partition @ return withdrawals the amounts of the numeraire assets withdrawn
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev This function tells you if a given challenge has been completed by a given miner @ param challenge the challenge to search for @ param miner address that you want to know if they solved the challenge @ return true if the miner address provided solved the
Withdraw partial funds , normally used with a plate withdrawal require ( plate ! address ( 0 ) , " ! plate " ) ;
@ notice Accepts a withdrawal to the g Token using ETH . The g Token must have WETH as its reserve Token . This method will redeem the sender ' s required balance in shares ; which in turn will receive ETH . See G Token . sol and G Token Base . sol for further documentation . @ param growth Token The WETH based g Token . @ param gross Shares The number of shares to be redeemed .
@ notice withdraw funds after unbonding has finished @ param bonding the asset to withdraw from the bonding pool
@ notice Returns the symbol of the token , usually a shorter version of the name .
@ dev Multiplies value a by value b ( result is rounded towards zero ) . It ' s assumed that the value b is the significand of a number with 18 decimals precision .
Returns the previous contract registry address @ dev used when the setting the contract as a new registry to assure a valid registry @ return previous Contract Registry is the previous contract registry
Create Balancer trade call data
@ dev Sorts given array in place @ param self Storage array containing uint256 type variables
@ dev Returns the address of the current super admin
REMOVE LIQUIDITY
Only allows to withdraw non core strategy tokens ~ this is over and above normal yield This contract should never have value in it , but just incase since this is a public call
@ dev retrieve user ' s options ' id . user user ' s account .
@ notice Get channel status @ param c the channel being used @ return channel status
Last Same Rewards Amount And Block
@ notice Provides the target collateralization ratio and margin to be maintained by this contract . The amount is relative to the maximum collateralization available for the associated c Token on Compound . gc Token Type 2 uses the reserve token as collateral to borrow funds and revinvest into the g Token . @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization ( defaults to 66 % ) @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization margin ( defaults to 8 % )
@ notice clean geyser , expire old fundings , etc .
@ dev Returns true if the caller is the current Governor .
@ dev Returns the address of the underlying staked token . @ return IERC20 The address of the token .
To receive ETH after converting it from DAI
@ dev sets the onchain ID of the token @ param onchain ID the address of the onchain ID to set Only the owner of the token smart contract can call this function emits a Updated Token Information event
Calculate maxium amount of credit a depositer will get for their token
@ dev Multiplies value a by value b ( result is rounded up ) . It ' s assumed that the value b is the significand of a number with 18 decimals precision .
@ notice withdraw liquidity to get the amount of tokens required to borrow @ param asset the asset output required @ param amount the amount of asset required as output
@ dev Get withdraw fee for this pool
@ notice Utility method to recover any ERC20 token that was sent to the Feature by mistake . @ param token The token to recover .
@ dev Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens @ param index uint256 representing the index to be accessed of the tokens list @ return uint256 token ID at the given index of the tokens list
@ dev Calculates the how is gonna be a new cooldown timestamp depending on the sender receiver situation If the timestamp of the sender is " better " or the timestamp of the recipient is 0 , we take the one of the recipient Weighted average of from to cooldown timestamps if : # The sender doesn ' t have the cooldown activated ( timestamp 0 ) . # The sender timestamp is expired # The sender has a " worse " timestamp If the receiver ' s cooldown timestamp expired ( too old ) , the next is 0 @ param from Cooldown Timestamp Cooldown timestamp of the sender @ param amount To Receive Amount @ param to Address Address of the recipient @ param to Balance Current balance of the receiver @ return The new cooldown timestamp
@ dev Same as { xref Address function Call address bytes string } [ function Call ] , but performing a static call . Available since v3 . 3 . solhint disable next line avoid low level calls
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice Performs the burning of g Token shares upon the withdrawal of the reserve token . The actual amount of the reserve token to be received can be calculated using the calc Withdrawal Cost From Shares function . In every withdrawal , 1 % of the shares is retained in terms of withdrawal fee . Half of it is immediately burned and the other half is provided to the locked liquidity pool . @ param gross Shares The gross amount of this g Token shares being redeemed in the operation .
@ dev See { tax Fee } .
METHODS constructor stores initial daily limit and records the present day ' s index .
@ notice An event emitted when a proposal has been executed in the Timelock
@ return The address of the implementation .
notice Determine the prior number of votes for an account as of a block number dev Block number must be a finalized block or else this function will revert to prevent misinformation . param account The address of the account to check param block Number The block number to get the vote balance at return The number of votes the account had as of the given block
@ dev Emitted when an execute operation was approved and successfully performed . Specification : MUST be triggered when approve was called and the execution was successfully approved .
@ notice Set a new account on a given role and emit a Role Modified event if the role holder has changed . Only the owner may call this function . @ param role The role that the account will be set for . @ param account The account to set as the designated role bearer .
@ notice Used if an aggregator contract has been proposed . @ param round Id the round ID to retrieve the round data for @ return round Id is the round ID for which data was retrieved @ return answer is the answer for the given round @ return started At is the timestamp when the round was started . ( Only some Aggregator V3Interface implementations return meaningful values ) @ return updated At is the timestamp when the round last was updated ( i . e . answer was last computed ) @ return answered In Round is the round ID of the round in which the answer was computed .
Returns the governance vote Out status of a guardian . @ dev A guardian is voted out if voted Stake total Delegated Stake ( in percent mille ) > threshold @ param subject is the subject guardian address @ return voted Out indicates whether the subject was voted out @ return voted Stake is the total stake voting against the subject @ return total Delegated Stake is the total delegated stake
Called from remove liquidity
Sheriff ' s Vault
only people with tokens
@ notice Transfer dai Amount Dai for to the current primary recipient set by the owner . Only the owner or the designated withdrawal manager role may call this function . @ param dai Amount uint256 The amount of Dai to transfer to the primary recipient .
@ notice Gets the maximum amount of debt available to generate @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP
@ notice Pure function for getting the current Dharma Smart Wallet version . @ return The current Dharma Smart Wallet version .
@ notice Transfer tokens from msg . sender to another address and then call on Transfer Received on receiver @ param to address The address which you want to transfer to @ param value uint256 The amount of tokens to be transferred @ param data bytes Additional data with no specified format , sent in call to to @ return true unless throwing
@ dev Emitted when a call is performed as part of operation id .
TODO : Consider removing gas Price from here .
@ dev Integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; Solidity automatically throws when dividing by 0 uint256 c a b ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Getters and checkers
get symbol
@ dev Allows the liquidator to deposit proceeds from iquidated gov tokens . Transfers proceeds on a second by second basis to the Savings Contract over 1 week . @ param m Asset The m Asset to transfer and distribute @ param liquidated Units of m Asset to distribute
@ dev Unpack r , s and v from a bytes signature
@ notice Withdraw reward tokens to user @ dev called by Savings Module @ param token Reward token to withdraw @ param user Who should receive tokens @ param amount How many tokens to send
@ dev xref : ROOT : erc1155 . adoc # batch operations [ Batched ] version of { safe Transfer From } . Emits a { Transfer Batch } event . Requirements : ids and amounts must have the same length . If to refers to a smart contract , it must implement { IERC1155Receiver on ERC1155Batch Received } and return the acceptance magic value .
@ notice Converts a number to 18 decimal percision @ param join Addr Join address of the collateral @ param amount Number to be converted
Safe SR Mboost transfer
@ notice Returns the assets an account has entered @ param account The address of the account to pull assets for @ return A dynamic list with the assets the account has entered
Change vault of the contract to a new vault ( new Vault ) . Can only be called by the current owner .
Sets the default delegators staking reward portion @ dev governance function called only by the functional manager @ param default Delegators Staking Rewards Percent Mille is the default delegators portion in percent mille ( 0 max Delegators Staking Rewards Percent Mille )
@ dev remove addresses from whitelist
@ dev Returns true if self starts with needle . @ param self The slice to operate on . @ param needle The slice to search for . @ return True if the slice starts with the provided text , false otherwise .
solhint disable next line func name mixedcase
@ notice Provides the minimum and maximum amount of the mining token to be processed on every operation . If the contract balance is below the minimum it waits until more accumulates . If the total amount is beyond the maximum it processes the maximum and leaves the rest for future operations . The mining token accumulated via liquidity mining is converted to the underlying asset and used to mint the associated c Token . This range is used to avoid wasting gas converting small amounts as well as mitigating slipage converting large amounts . @ return mining Min Gulp Amount The minimum amount of the mining token to be processed per deposit withdrawal . @ return mining Max Gulp Amount The maximum amount of the mining token to be processed per deposit withdrawal .
@ notice Overrides the default total underlying reserve definition in order to account only for the diference between assets being lent and assets being borrowed . @ return total Reserve Underlying The amount of the underlying asset corresponding to this contract ' s worth .
Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
deprecated , backward compatibility
@ notice Provides the contract address for the G Exchange implementation currently being used to convert the mining token ( COMP ) , and the g Token reserve token ( DAI ) , into the underlying asset . @ return exchange A G Exchange compatible contract address , or address ( 0 ) if it has not been set .
External view Function Interface to implement on final contract
Functions The counter starts at one to prevent changing it from zero to a non zero value , which is a more expensive operation .
Returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not found . For long needles , use hashing
Returns the value of the string type that mapped to the given key .
withdraws asset to receiver
@ dev Add a delegate through an encoded signature
Return the sell price of 1 individual token .
@ dev Set the reward token liquidation threshold . @ param threshold Threshold amount in decimals of reward token that will cause the Vault to claim and liquidate on allocate ( ) calls .
@ dev msg . sender approves spender to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of wei to be approved for transfer @ return Always true if the call has enough gas to complete execution
@ dev external token transfer from a specific account @ param external Token the token contract @ param from the account to spend token from @ param to the destination address @ param value the amount of tokens to transfer @ return bool which represents success
@ dev Returns true if account supports the interface defined by interface Id . Support for { IERC165 } itself is queried automatically . See { IERC165 supports Interface } . query support of both ERC165 as per the spec and support of interface Id
@ notice Emitted when set new treasury
@ dev Emitted when the URI for token type id changes to value , if it is a non programmatic URI . If an { URI } event was emitted for id , the standard https : eips . ethereum . org EIPS eip 1155 # metadata extensions [ guarantees ] that value will equal the value returned by { IERC1155Metadata URI uri } .
@ param key the key for the contract address @ param value the contract address main map for cheap lookup keep track of contract address history
@ dev Allows the owners of the DMM Ecosystem to deposit funds into a DMMA . These funds are used to disburse interest payments and add more liquidity to the specific market . @ param dmm Token Id The ID of the DMM token whose underlying will be funded . @ param underlying Amount The amount underlying the DMM token that will be deposited into the DMMA .
Checks whether the caller is the migration manager
@ notice allows governance to slash a keeper based on a dispute @ param bonded the asset being slashed @ param keeper the address being slashed @ param amount the amount being slashed
Emergency Flow
Returns the initialization Admin address
@ dev bind a refer , if affcode invalid , use default refer
Forward ERC20 methods to upgraded contract if this one is deprecated
@ dev Burn fy Dai . Only callable by Controller contracts . This function can only be called by other Yield contracts , not users directly . @ param from Wallet to burn the fy Dai from . @ param fy Dai Amount Amount of fy Dai to burn .
State Mutations
@ dev Sets a new contract that implements the Dmm Token Factory interface . @ param new Dmm Token Factory The new contract that implements the Dmm Token Factory interface .
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . > It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ notice Whether member To Check is a member of role Id . @ dev Reverts if role Id does not correspond to an initialized role . @ param role Id the Role to check . @ param member To Check the address to check . @ return True if member To Check is a member of role Id .
settles and pays borrowers based on the fees generated by their interest payments
@ return true if the transaction can buy tokens
@ notice Checks whether the token vesting period has started or not @ return true If the token vesting period has started
@ dev Internal function to burn a specific token . Reverts if the token does not exist . Deprecated , use burn ( uint256 ) instead . @ param owner owner of the token to burn @ param token Id uint256 ID of the token being burned by the msg . sender Clear metadata ( if any )
@ dev See { IERC20 transfer From } . Note that operator and allowance concepts are orthogonal : operators cannot call transfer From ( unless they have allowance ) , and accounts with allowance cannot call operator Send ( unless they are operators ) . Emits { Sent } , { IERC20 Transfer } and { IERC20 Approval } events .
@ dev Internal function to set the token URI for a given token Reverts if the token ID does not exist @ param token Id uint256 ID of the token to set its URI @ param uri string URI to assign
@ dev Returns the string of the current version . version 1 . 0 . 0
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
deprecate current contract if favour of a new one
@ dev Fee is collected .
Returns the address of the underlying staked token @ return balance is the wallet balance
@ dev See { ERC20 before Token Transfer } .
Query to get the active stake of the user
@ dev Returns true if the key is in the map . O ( 1 ) .
@ dev get the address of the implementation contract . @ return implementation the address of the implementation contract
@ dev Helper function to handle ERC20 payments
modified for decimals from uint8 to uint256
@ notice Computes average of two signed integers , ensuring that the computation doesn ' t overflow . @ dev If the result is not an integer , it is rounded towards zero . For example , avg ( 3 , 4 ) 3
function to allow admin to claim other ERC20 tokens sent to this contract ( by mistake )
@ dev allows participants to withdraw their vested ETH @ param self Stored vesting from vesting contract if there is a bonus and it ' s before the end Time , cancel the bonus self . holding Amount [ msg . sender ] [ 0 ] 0 ; add bonus eth back into the contract balance if it ' s past the end Time then send everything left if we ' re here then it ' s before the end Time and no bonus , need to calculate transfer ETH to the sender
In case community decides to move the Rewards to another contract .
@ notice Sets the contract address for the G Exchange implementation to be used in converting the mining token ( COMP ) into the underlying asset . This is a priviledged function restricted to the contract owner . @ param exchange A G Exchange compatible contract address .
@ notice An event emitted when a vote has been cast on a proposal
@ dev Tokens can be moved only after if transfer enabled or if you are an approved operator .
@ notice { Token } WETH pair must be registered on Uniquote @ param asset The token address @ param amount Amount of tokens @ return Q112 encoded price of asset amount in USD
@ notice Set the Claims Manager address @ dev Only callable by Governance address @ param claims Manager Address address for new Claims Manager contract
approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol
@ notice Returns address of new EMP deployed with given params configuration . @ dev Caller will need to register new EMP with the Registry to begin requesting prices . Caller is also responsible for enforcing constraints on params . @ param params is a Constructor Params object from Expiring Multi Party . @ return address of the deployed Expiring Multi Party contract
KYBER NOTE ! code changed to comply with ERC20 standard
@ notice Increases the approval of the spender . @ dev This function is overridden to leverage transfer state feature . @ param spender The address which is approved to spend on behalf of the sender . @ param added Value The added amount of tokens approved to spend .
function get Stakesdata Length ( address account ) external view returns ( uint256 ) { return staking Storage . get Stakesdata Length ( account ) ; }
@ notice Divides one Unsigned by an unscaled uint256 , reverting on overflow or division by 0 . @ dev This will " floor " the quotient . @ param a a Fixed Point numerator . @ param b a uint256 denominator . @ return the quotient of a divided by b .
claim your purchased tokens solium disable next line update user and stats send owed tokens
@ dev Throws if called by a not whitelisted contract while we do not accept contract depositor .
@ notice Get the underlying balance of the owner @ dev This also accrues interest in a transaction @ param owner The address of the account to query @ return The amount of underlying owned by owner
@ notice Called by the delegator on a delegate to initialize it for duty @ dev Should revert if any issues arise which make it unfit for delegation @ param data The encoded bytes data for any initialization
@ dev Throws if account is blacklisted @ param account The address to check
@ dev Converts a given amount of the growth reserve token to the underlying token using the external exchange contract . Both amounts are deducted and credited , respectively , from the current contract . @ param input Amount The amount to be converted .
Called by the constructor this function deploys an instance of the Payment Handler that can be used by subsequent handler deployments via Proxy Deploy the new contract initialize the deployed Payment Handler set the payment Handler Logic Address
@ notice Get the balance of an account ' s Tokens . @ param owner The address of the token holder @ param id ID of the Token @ return The owner ' s balance of the Token type requested
Calculate x y rounding towards zero , where x and y are unsigned 256 bit integer numbers . Revert on overflow or when y is zero . @ param x unsigned 256 bit integer number @ param y unsigned 256 bit integer number @ return signed 64 . 64 bit fixed point number
helper for get ratio between assets in 1inch aggregator
Claim the given amount of the token to the given address . Reverts if the inputs are invalid .
@ dev We need to make sure the Factory address cannot be changed without wallet owner ' s explicit authorization .
@ dev set the token transfer switch
@ dev Returns the number of tokens in owner ' s account .
Returns the multiplier for user .
@ dev Returns sum of value locked in other contract and value stored in the pool .
Removes a managed contract address from the managed contracts list
@ dev Remaining tokens third party spender has to send @ param self Stored token from token contract @ param owner Address of token holder @ param spender Address of authorized spender @ return remaining Number of tokens spender has left in owner ' s account
@ dev Private function to remove a token from this extension ' s token tracking data structures . This has O ( 1 ) time complexity , but alters the order of the all Tokens array . @ param token Id uint256 ID of the token to be removed from the tokens list To prevent a gap in the tokens array , we store the last token in the index of the token to delete , and then delete the last slot ( swap and pop ) . When the token to delete is the last token , the swap operation is unnecessary . However , since this occurs so rarely ( when the last minted token is burnt ) that we still do the swap here to avoid the gas cost of adding an ' if ' statement ( like in remove Token From Owner Enumeration ) all Tokens [ token Index ] last Token Id ; all Tokens Index [ last Token Id ] token Index ; This also deletes the contents at the last position of the array
Notifies a delegated stake change event @ dev Called by : delegation contract @ param delegate is the delegate to update @ param self Delegated Stake is the delegate self stake ( 0 if not self delegating ) @ param delegated Stake is the delegate delegated stake ( 0 if not self delegating ) @ param total Delegated Stake is the total delegated stake
@ dev Gets the balance of the specified address . @ param owner The address to query the balance of . @ return An uint256 representing the amount owned by the passed address .
Public functions " Public " versions that can safely be called from Smart Pool Manager Allows only the contract itself to call them ( not the controller or any external account )
function can Transfer ( bytes4 function Sig , address operator , address from , address to , uint256 value , bytes calldata data , bytes calldata operator Data ) external view returns ( byte , bytes32 ) ;
@ dev Pauses or unpauses the execution of rebase operations . @ param paused Pauses rebase operations if this is true .
@ dev Returns the uri of the given token id @ param object Id the id of the token whose uri you want to know
@ return The tokens that the farm supports .
@ dev Calculate | x | . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Returns the number of values on the set . O ( 1 ) .
@ notice Determine if a claim is pending for this service provider @ param sp address of service provider @ return boolean indicating whether a claim is pending
withdrawal ( gross ) : price reserve supply net gross 0 . 99 # fee is assumed to be 1 % for simplicity cost net price fee gross net return cost , fee
Get the token balance for account token Owner
Withdraw LP tokens from Vox Master .
@ dev Tells the version name of the current implementation @ return uint256 representing the name of the current version
@ dev This function allows us to set a new Deity ( or remove it ) @ param new Deity address of the new Deity of the tellor system
Transfer From recipient recives amount , sender ' s account is debited amount + fee
@ notice Transfers from I Uniswap V2Pair at address addr now will mint an extra interest Rate Per Buy Thousandth 1000 DIV tokens per 1 Token for the recipient . @ param addr Address of an I Uniswap V2Pair Contract
@ param volcie ID the ID of the Volcie token eligible for claiming early bonus @ return uint256 the amount of early bonus for this volcie token . Since the amount of early bonus is the same for Kittie Fight Token and Super Dao Token , only one number is returned . @ dev KTY early bonus of the returned value and SDAO early bonus of the returned value are the early bonus accrued for the volcie token
@ notice Removed a job
@ dev Allows token holders to vote @ param dispute Id is the dispute id @ param supports Dispute is the vote ( true the dispute has basis false vote against dispute )
Destroy tokens from other account Remove value tokens from the system irreversibly on behalf of from . @ param from the address of the sender @ param value the amount of money to burn require ( balance Of [ from ] > value ) ; require ( value < allowance [ from ] [ msg . sender ] ) ; balance Of [ from ] value ; allowance [ from ] [ msg . sender ] value ; total Supply value ;
@ dev Updates the global protocol fee settings . This function can only be called by the owner of this contract . Warning : these new values will be used by existing and new Loopring exchanges .
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
EVENT TRACKING
@ return the cap of the crowdsale As long as the crowsale is running , v PURE is not yet delivered , so the capital will remain the same during the crowdsale .
@ notice Query if a contract implements an interface , does not check ERC165 support @ param account The address of the contract to query for support of an interface @ param interface Id The interface identifier , as specified in ERC 165 @ return true if the contract at account indicates support of the interface with identifier interface Id , false otherwise @ dev Assumes that account contains a contract that supports ERC165 , otherwise the behavior of this method is undefined . This precondition can be checked with { supports ERC165 } . Interface identification is specified in ERC 165 . success determines whether the staticcall succeeded and result determines whether the contract at account indicates support of interface Id
@ notice Allows the owner to revoke the vesting . Tokens already vested remain in the contract , the rest are returned to the owner . @ param token ERC20 token which is being vested
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Notifies an expected change in the committee membership of the guardian @ dev Called only by : the Committee contract @ dev called upon expected change in the committee membership of the guardian @ dev triggers update of the global rewards state and the guardian rewards state @ dev updates the rewards state based on the committee state prior to the change @ param guardian is the guardian who ' s committee membership is updated @ param weight is the weight of the guardian prior to the change @ param total Committee Weight is the total committee weight prior to the change @ param in Committee indicates whether the guardian was in the committee prior to the change @ param in Committee After indicates whether the guardian is in the committee after the change
@ dev Get reserved token by address .
this func need admin role . grant Role and revoke Role need admin role
@ dev Safely transfers the ownership of a given token ID to another address If the target address is a contract , it must implement on ERC721Received , which is called upon a safe transfer , and return the magic value bytes4 ( keccak256 ( " on ERC721Received ( address , address , uint256 , bytes ) " ) ) ; otherwise , the transfer is reverted . Requires the msg . sender to be the owner , approved , or operator @ param from current owner of the token @ param to address to receive the ownership of the given token ID @ param token Id uint256 ID of the token to be transferred @ param data bytes data to send along with a safe transfer check
@ dev Multiplies two numbers , throws on overflow . Gas optimization : this is cheaper than asserting ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
Set the latest Withdraw Storage contract address . Only the owner can execute this function .
@ notice A method to set reward claim fee . @ param fee Reward claim fee .
disable this charity so it can stop receive funding
@ dev Only fallback when the sender is not the admin . require ( msg . sender ! admin ( ) , " Transparent Upgradeable Proxy : admin cannot fallback to proxy target " ) ;
Modifier to verify that Eternal Storage is set .
@ dev Reverts if not in crowdsale time range .
@ dev Gets the balance of the specified address include freezing tokens . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but performing a delegate call . Available since v3 . 3 .
@ notice admin function to unpause the contract
@ dev Emitted when owner enables approved to manage the token Id token .
@ notice Update remove delegator lockup duration @ param duration new lockup duration
Maps a value of bool type to a given key . Only the owner can execute this function .
@ notice Transfers value amount of an id from the from address to the to address specified ( with safety call ) . @ dev Caller must be approved to manage the tokens being transferred out of the from account ( see " Approval " section of the standard ) . MUST revert if to is the zero address . MUST revert if balance of holder for token id is lower than the value sent . MUST revert on any other error . MUST emit the Transfer Single event to reflect the balance change ( see " Safe Transfer Rules " section of the standard ) . After the above conditions are met , this function MUST check if to is a smart contract ( e . g . code size > 0 ) . If so , it MUST call on ERC1155Received on to and act appropriately ( see " Safe Transfer Rules " section of the standard ) . @ param from Source address @ param to Target address @ param id ID of the token type @ param value Transfer amount @ param data Additional data with no specified format , MUST be sent unaltered in call to on ERC1155Received on to
@ dev MUST return " Asset " or " Debt " . SHOULD be implemented by the public constant state variable .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements : account cannot be the zero address . account must have at least amount tokens .
@ notice Calculates period Fee @ param amount Option amount @ param period Option period in seconds ( 1 days < period < 4 weeks ) @ param strike Strike price of the option @ param current Price Current price of ETH @ return fee Period fee amount amount < 1e30 | implied Vol Rate < 1e10 | > amount implied Vol Rate strike < 1e60 < 2 ^ uint256 strike < 1e20 ( $ 1T ) | in case amount implied Vol Rate strike > 2 ^ 256 transaction will be reverted by the Safe Math
@ dev This function must be called when the ENS Manager contract is replaced and the address of the new Manager should be provided . @ param new Owner The address of the new ENS manager that will manage the root node .
@ dev See { IERC721Enumerable token Of Owner By Index } .
@ dev Create a new token hold with expiration date .
@ notice Removes a bot address so it can ' t call repay boost @ param caller Bot address
@ notice Internal view function to ensure that a given to address provided as part of a generic action is valid . Calls cannot be performed to accounts without code or back into the smart wallet itself . Additionally , generic calls cannot supply the address of the Dharma Escape Hatch registry the specific , designated functions must be used in order to make calls into it . @ param to address The address that will be targeted by the generic call .
Only callers that hold FRT can rebase .
@ dev Returns true if the caller is the current owner .
@ dev See { IERC721 set Approval For All } .
This will withdraw the tokens from the contract based on their price , from lowest price to highest target Price 0 ; Find the lowest priced token to withdraw Determine the balance left Withdraw the entire balance of this token Withdraw a partial amount of this token Convert the withdraw amount to the token ' s decimal amount break ;
@ dev for set reward
@ dev Calculates the amount of fee based on elapsed time and repayment amount @ param asset The address of the main collateral token @ param user The address of a position ' s owner @ param amount The repayment amount @ return fee amount
@ notice Update the D App by creating a new token with new functionalities the msg . sender becomes the controller of this clone token @ param parent Token Address of the token being cloned @ param snapshot Block Block of the parent token that will determine the initial distribution of the clone token @ param token Name Name of the new token @ param decimal Units Number of decimals of the new token @ param token Symbol Token Symbol for the new token @ param transfers Enabled If true , tokens will be able to be transferred @ return The address of the new token contract
Withdraw all funds , normally used when migrating strategies TODO : add minimun mint amount if required require ( vault ! address ( 0 ) , " ! vault " ) ;
@ dev Function that is run as the first thing in the fallback function . Can be redefined in derived contracts to add functionality . Redefinitions must call super . will Fallback ( ) .
Loops over all tokens in the wrap and deposits them with allowance req successful transfer Transfer went OK this means we can add this balance we just took .
Change the owner of the token contract
@ notice A simple method that calculates the rewards for each stakeholder . @ param stake Amount The stakeholder staking amount to calculate rewards . @ param available Reward Pool available rewards .
Send yield on an LP token to the treasury
REVERT IF ETHEREUM SEND
@ dev Modifier to make a function callable only when the contract is paused .
NOTE : In MYSTIC , proposal Index ! proposal Id set highest index ( latest ) yes vote must be processed for member to ragequit set maximum of total shares encountered at a yes vote used to bound dilution for yes voters NOTE : subgraph indexes by proposal Id not proposal Index since proposal Index isn ' t set until it ' s been sponsored but proposal is created on submission
@ notice Set recipient as the new primary recipient for USDC withdrawals . Only the owner may call this function . @ param recipient address The new primary recipient . Set the new primary recipient .
@ dev ERC677 transfer callback function . @ param from address of tokens sender . @ param value amount of transferred tokens . @ param data additional transfer data , can be used for passing alternative receiver address . if on Token Transfer is called as a part of call to relay Tokens , this callback does nothing if msg . sender if not a valid token contract , this check will fail , since limits are zeros so the following check is not needed require ( is Token Registered ( token ) ) ;
@ notice Overrides the default total reserve definition in order to account , not only for the reserve asset being kept liquid by this contract , but also sum up the reserve portions delegated to all g Tokens that make up the portfolio . @ return total Reserve The amount of the reserve token corresponding to this contract ' s worth .
@ dev Creates a new m Token using the provided data . @ param underlying Token The token that should be wrapped to create a new DMMA @ param symbol The symbol of the new DMMA , IE m DAI or m USDC @ param name The name of this token , IE DMM : DAI @ param decimals The number of decimals of the underlying token , and therefore the number for this DMMA @ param min Mint Amount The minimum amount that can be minted for any given transaction . @ param min Redeem Amount The minimum amount that can be redeemed any given transaction . @ param total Supply The initial total supply for this market .
@ notice Get the balance of multiple account token pairs @ param owners The addresses of the token holders @ param ids ID of the Tokens @ return The owner ' s balance of the Token types requested ( i . e . balance for each ( owner , id ) pair )
@ dev PUBLIC FACING : Return a current lobby member queue entry . Only needed due to limitations of the standard ABI encoder . @ param member Addr TRX address of the lobby member @ param enter Day @ param entry Index @ return 1 : Raw amount that was entered with ; 2 : Referring TRX addr ( optional ; 0x0 for no referrer )
@ notice Withdraw a supported asset and burn all OUSD . unfortunately we have to do balance Of twice
PROPOSAL FUNCTIONS
@ dev Mints 300k Pool rewards Can only be called once
@ dev Creates amount token to to . Must only be called by the owner ( Mr Banker ) , used to mint farming rewards and nothing else
@ notice The sender liquidates the borrowers collateral . The collateral seized is transferred to the liquidator . @ param borrower The borrower of this a Token to be liquidated @ param a Token Collateral The market in which to seize collateral from the borrower @ param repay Amount The amount of the underlying borrowed asset to repay @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ return the number of token units a buyer gets per wei .
@ notice get data about a round . Consumers are encouraged to check that they ' re receiving fresh data by inspecting the updated At and answered In Round return values . Note that different underlying implementations of Aggregator V3Interface have slightly different semantics for some of the return values . Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them . @ param round Id the requested round ID as presented through the proxy , this is made up of the aggregator ' s round ID with the phase ID encoded in the two highest order bytes @ return round Id is the round ID from the aggregator for which the data was retrieved combined with an phase to ensure that round I Ds get larger as time moves forward . @ return answer is the answer for the given round @ return started At is the timestamp when the round was started . ( Only some Aggregator V3Interface implementations return meaningful values ) @ return updated At is the timestamp when the round last was updated ( i . e . answer was last computed ) @ return answered In Round is the round ID of the round in which the answer was computed . ( Only some Aggregator V3Interface implementations return meaningful values ) @ dev Note that answer and updated At may change between queries .
@ dev Allows the pending Owner address to finalize the transfer .
@ dev Unfreeze freezing tokens at the specified address . @ param from Address from which frozen tokens are to be released . @ param amount Amount of frozen tokens to release .
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Returns the address of the current Governor .
Returns a guardian ' s metadata property @ dev a property that wasn ' t set returns an empty string @ param guardian is the guardian to query @ param key is the name of the metadata property to query @ return value is the value of the queried property in a string format
@ notice Generates amount reputation that are assigned to owner @ param user The address that will be assigned the new reputation @ param amount The quantity of reputation generated @ return True if the reputation are generated correctly require ( cur Total Supply + amount > cur Total Supply ) ; require ( previous Balance To + amount > previous Balance To ) ;
@ dev Processing weekly prize pool
@ dev Divides x between y , rounding up to the closest representable number . Assumes x and y are both fixed point with decimals digits .
Deposit LP tokens to Master Chef for RAMBA allocation .
@ dev Returns list of transaction I Ds in defined range . @ param from Index start position of transaction array . @ param to Index end position of transaction array . @ param pending Include pending transactions . @ param executed Include executed transactions . @ return Returns array of transaction I Ds .
@ dev calculates the number of tokens or ETH available for the beneficiary to withdraw @ param self Stored vesting from vesting contract @ param beneficiary the sender , who will be withdrawing their balance figure out how many intervals have passed since the start multiply that by the percentage released every interval calculate the amount released by this time subtract the amount that has already been withdrawn
@ dev GET The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 Eth Items . Every Eth Item will have its own address , but the code will be cloned from this one .
Convert signed 256 bit integer number into signed 64 . 64 bit fixed point number . Revert on overflow . @ param x signed 256 bit integer number @ return signed 64 . 64 bit fixed point number
@ return The result of safely dividing x and y . The return value is as a rounded standard precision decimal . @ dev y is divided after the product of x and the standard precision unit is evaluated , so the product of x and the standard precision unit must be less than 2 256 . The result is rounded to the nearest increment .
@ dev Withdraws all balance and all rewards from the vault .
@ dev Removes an address value from a set . O ( 1 ) . Returns false if the value was not present in the set .
@ dev Updates the govenance address . Governance can be empty address which means renouncing the governance .
@ notice Emitted when implementation is changed
Exercises voting rights .
@ dev Calculates how much will be received for withdrawing the provided number of shares from a given g Token . @ param token The g Token to withdraw from . @ param gross Shares The number of shares to be provided . @ return underlying Cost The amount to be received .
@ dev gets freezing end date and freezing balance for the freezing portion specified by index . @ param addr Address of freeze tokens owner . @ param index Freezing portion index . It ordered by release date descending .
Token Redemption
@ dev Divides value a by value b ( result is rounded towards 0 ) .
@ notice Add non transferable votes for governance @ param voter to add the votes to @ param amount of votes to add
@ dev Return the pending interest that will be accrued in the next call . @ param msg Value Balance value to subtract off address ( this ) . balance when called from payable functions .
@ notice Allows for the beforehand calculation of shares to be given burned upon withdrawing the underlying asset from the contract . @ param underlying Cost The amount of the underlying asset being withdrawn . @ param total Reserve The reserve balance as obtained by total Reserve ( ) @ param total Supply The shares supply as obtained by total Supply ( ) @ param withdrawal Fee The current withdrawl fee as obtained by withdrawal Fee ( ) @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return gross Shares The total amount of shares being deducted , including fees . @ return fee Shares The fee amount of shares being deducted .
@ param reserve the address of the reserve for which the information is needed @ param user the address of the user for which the information is needed @ return the origination fee for the user
@ notice sets the migrator @ param migrator The address of the migrator contract to use for authentication .
sell method for ether .
Pool info
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Withdraws given stake amount from the pool @ param amount Units of the staked token to withdraw
Events triggered for incoming and outgoing transactions
@ return The result of safely multiplying x and y , interpreting the operands as fixed point decimals of a precise unit . @ dev The operands should be in the precise unit factor which will be divided out after the product of x and y is evaluated , so that product must be less than 2 256 . Unlike multiply Decimal , this function rounds the result to the nearest increment . Rounding is useful when you need to retain fidelity for small decimal numbers ( eg . small fractions or percentages ) .
ERC20 ERC20 Transfer function
@ dev Emitted when the implementation is upgraded .
@ notice Keeper unbound
@ dev Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT Based Eth Item . It raises the ' New Wrapped ERC1155Created ' event . @ param model Init Call Payload The ABI encoded input parameters to be passed to the model to phisically create the NFT . It changes according to the Model Version . @ param eth Item Address The address of the new Eth Item @ param eth Item Init Response The ABI encoded output response eventually received by the Model initialization procedure .
MANAGER FUNCTIONS
@ inheritdoc I Geyser
@ dev Calculates if conditions for creating new distribution are met
Harvest migrate only called by the migrate Stake For in the Migration Helper Reward Pool
Stake Good Accounting
@ dev Returns the total number of convertibles registered asn part of this exchange .
Returns the amount of tokens owned by account .
@ dev vest Detail : second unit
@ dev Gets balance of owner specified @ param user is the owner address used to look up the balance @ return Returns the balance associated with the passed in user
Transfer wad amount of cdp collateral from the cdp address to a dst address .
@ dev Adds two unsigned integers , reverts on overflow .
Set the latest Market Group contract address . Only the owner can execute this function .
Change the staking address
@ dev Checks if a circuit can still be used to commit new blocks . @ param block Type The type of the block @ param block Size The number of requests handled in the block @ param block Version The block version ( i . e . which circuit version needs to be used ) @ return True if the circuit is enabled , false otherwise
send ether to the fund collection wallet override to create custom fund forwarding mechanisms
@ dev Liquidate the given position by converting it to ETH and return back to caller . @ param id The position ID to perform liquidation 1 . Convert the position back to LP tokens and use liquidate strategy . 2 . Return all available ETH back to the operator .
@ notice Create a new token and return it to the caller . @ dev The caller will become the only minter and burner and the new owner capable of assigning the roles . @ param token Name used to describe the new token . @ param token Symbol short ticker abbreviation of the name . Ideally < 5 chars . @ param token Decimals used to define the precision used in the token ' s numerical representation . @ return new Token an instance of the newly created token interface .
@ dev Removes account from blacklist @ param account The address to remove from the blacklist
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ notice All Proposal Outcome states . In Progress Proposal is active and can be voted on . Rejected Proposal voting Period has closed and vote failed to pass . Proposal will not be executed . Approved Executed Proposal voting Period has closed and vote passed . Proposal was successfully executed . Quorum Not Met Proposal voting Period has closed and voting Quorum Percent was not met . Proposal will not be executed . Approved Execution Failed Proposal vote passed , but transaction execution failed . Evaluating Proposal vote passed , and evaluate Proposal Outcome function is currently running . This status is transiently used inside that function to prevent re entrancy . Vetoed Proposal was vetoed by Guardian . Target Contract Address Changed Proposal considered invalid since target contract address changed Target Contract Code Hash Changed Proposal considered invalid since code has at target contract address has changed

@ dev Only allow transfers to and from allowed addresses @ param from address the ether address of sender @ param to address the ether address of receiver @ return 0 if successful , positive integer if error occurred
@ dev The Ownable constructor sets the original owner of the contract to the sender account .
@ dev Function to set the base URI for all token I Ds . It is automatically added as a prefix to the token id in { token URI } to retrieve the token URI .
pay protocol Token reward to user
@ notice Withdraws amount from sender ' available liquidity pool back to sender address , preferring withdrawal from compound interest dimension of liquidity . @ param amount value to withdraw @ dev public access
@ dev Emitted when value tokens of token type id are transferred from from to to by operator .
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
@ dev Internal function to safely mint a new token . Reverts if the given token ID already exists . If the target address is a contract , it must implement on ERC721Received , which is called upon a safe transfer , and return the magic value bytes4 ( keccak256 ( " on ERC721Received ( address , address , uint256 , bytes ) " ) ) ; otherwise , the transfer is reverted . @ param to The address that will own the minted token @ param token Id uint256 ID of the token to be minted
@ dev Allows to change the number of required confirmations . Transaction has to be sent by wallet . @ param required Number of required confirmations .
@ dev Moves tokens amount from sender to recipient . This is public function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev returns the market borrow rate in ray
@ return the time when the tokens were released last time .
@ dev Allows the current owner to set the pending Owner address . @ param new Owner The address to transfer ownership to .
@ dev A copy from CVP token , only the event name changed
Notifies an expected change in a delegator and his guardian delegation state @ dev Called only by : the Delegation contract @ dev called upon expected change in a delegator ' s delegation state @ dev triggers update of the global rewards state , the guardian rewards state and the delegator rewards state @ dev on delegation change , updates also the new guardian and the delegator ' s last Delegator Rewards Per Token accordingly @ param guardian is the delegator ' s guardian prior to the change @ param guardian Delegated Stake is the delegated stake of the delegator ' s guardian prior to the change @ param delegator is the delegator about to change delegation state @ param delegator Stake is the stake of the delegator @ param next Guardian is the delegator ' s guardian after to the change @ param next Guardian Delegated Stake is the delegated stake of the delegator ' s guardian after to the change
Returns the confirmation status of a transaction . @ param transaction Id Transaction ID . @ return Confirmation status .
Resets the outstanding tokens to new start time @ dev governance function called only by the migration owner @ dev the next duration will be calculated starting from the given time @ param start Time is the time to set as the last withdrawal time
function that is called when transaction target is a contract
@ notice Approve spender to transfer up to amount from src @ dev This will overwrite the approval amount for spender and is subject to issues noted [ here ] ( https : eips . ethereum . org EIPS eip 20 # approve ) @ param spender The address of the account which may transfer tokens @ param amount The number of tokens that are approved ( 1 means infinite ) @ return Whether or not the approval succeeded
Returns the set Eternal Storage instance .
@ dev Increases decreases the burn rate Emits a { Token Burn Rate Updated } event which sets the transfer rate .
@ notice allows governance to slash a keeper based on a dispute @ param keeper the address being slashed @ param amount the amount being slashed
Withdraw partial funds , normally used with a vault withdrawal additional protection so we don ' t burn the funds
Stake funds into the pool Calculate tax and after tax amount Increment sender ' s balances and total supply Increment dev fund by tax Transfer funds
@ dev Starts earning and deposits all current balance into strategy . Anyone can call this function to start earning .
Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Efficiently delete from an unordered array by moving the last element to the " hole " and reducing the array length . Can change the order of the list and invalidate previously held indexes . @ notice stake List Ref length and stake Index are already ensured valid in stake End ( ) @ param stake List Ref Reference to stake Lists [ staker Addr ] array in storage @ param stake Index Index of the element to delete
Internal transfer , only can be called by this contract Prevent transfer to 0x0 address . Use burn ( ) instead require ( to ! 0x0 ) ; Check if the sender has enough Check for overflows Save this for an assertion in the future Subtract from the sender Add the same to the recipient Asserts are used to use static analysis to find bugs in your code . They should never fail
@ dev Set version in the MCD on chain changelog . @ param log Address of the chainlog contract @ param version Changelog version ( e . g . " 1 . 1 . 2 " )
Called by a Set Token to notify that this module was removed from the Set token . Any logic can be included in case checks need to be made or state needs to be cleared .
@ dev See { IERC1155Metadata URI uri } . This implementation returns the same URI for all token types . It relies on the token type ID substitution mechanism https : eips . ethereum . org EIPS eip 1155 # metadata [ defined in the EIP ] . Clients calling this function must replace the \ { id \ } substring with the actual token type ID . MODIFIED TO CONCAT THE ID TO THE END OF THE URL
Returns the contract registry address @ return contract Registry is the contract registry address
Deposit LP tokens to Master Chef for HOTC allocation .
@ return If the latest block timestamp is within the rebase time window it , returns true . Otherwise , returns false .
@ notice Allows governance to add new job systems @ param job address of the contract for which work should be performed
@ dev Gets the balance of the specified address which are not frozen and thus transferrable . @ param owner The address to query the the balance of . @ return balance An uint256 representing the amount owned by the passed address .
@ notice Add credit to a job to be paid out for work @ param credit the credit being assigned to the job @ param job the job being credited @ param amount the amount of credit being added to the job
@ dev Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens . @ param index uint256 representing the index to be accessed of the tokens list @ return uint256 token ID at the given index of the tokens list
@ dev Mints additional tokens , new tokens go to owner @ param self Stored token from token contract @ param amount Number of tokens to mint @ return True if completed
@ dev function to check if the crowdsale is currently active @ param self Stored crowdsale from crowdsale contract @ return success
@ dev Counts the number of values that have been submited for the request if called for the current Request being mined it can tell you how many miners have submitted a value for that request so far @ param request Id the request Id to look up @ return uint count of the number of values received for the request Id
@ dev Returns true if the caller is the admin role
@ dev Upgrade the implementation of the proxy , and then call a function from the new implementation as specified by data , which should be an encoded function call . This is useful to initialize new storage variables in the proxied contract . NOTE : Only the admin can call this function . See { Proxy Admin upgrade And Call } .
Called when contract is deprecated
@ dev Deposit an amount of Grg Tokens from staker into the vault . Note that only the Staking contract can call this . Note that this can only be called when not in Catastrophic Failure mode . @ param staker of Grg Tokens . @ param amount of Grg Tokens to deposit .
@ notice It will get the productivity of given user . @ dev it will return 0 if user has no productivity proved in the contract . @ return user ' s productivity and overall productivity .
Schedules a protocol version upgrade for the given deployment subset @ dev governance function called only by the functional manager @ param deployment Subset is the name of the deployment subset @ param next Version is the new protocol version to upgrade to , must be greater or equal to current version @ param from Timestamp is the time the new protocol version takes effect , must be in the future
@ dev Initalize Rating Agenct Distributor contract decides how much TRU is rewarded to stakers @ param trust Token TRU contract @ param distributor Distributor contract @ param factory Factory contract for deploying tokens
Calculates and returns active stake for address Active stake ( active deployer stake + active delegator stake ) active deployer stake ( direct deployer stake locked deployer stake ) locked deployer stake amount of pending decrease Stake Request for address active delegator stake ( total delegator stake locked delegator stake ) locked delegator stake amount of pending undelegate Request for address Amount directly staked by address , if any , in Service Provider Factory Amount of pending decreased Stake Request for address , if any , in Service Provider Factory active deployer stake ( direct deployer stake locked deployer stake ) Total amount delegated by address , if any , in Delegate Manager Amount of pending undelegate Request for address , if any , in Delegate Manager active delegator stake ( total delegator stake locked delegator stake ) active Stake ( active Deployer Stake + active Delegator Stake )
@ dev Updates the govenance address .
Deletes the value of the bool type that mapped to the given key . Only the owner can execute this function .
@ dev Integer division of two numbers , rounding up and truncating the quotient
@ dev Divides value a by value b ( result is rounded up or away from 0 ) .
Returns the contract registry that the contract is set to use @ return contract Registry is the registry contract address
Returns the contract locking status @ return is Locked is a bool indicating the contract is locked
@ dev Sets the implementer contract as account ' s implementer for interface Hash . account being the zero address is an alias for the caller ' s address . The zero address can also be used in implementer to remove an old one . See { interface Hash } to learn how these are created . Emits an { Interface Implementer Set } event . Requirements : the caller must be the current manager for account . interface Hash must not be an { IERC165 } interface id ( i . e . it must not end in 28 zeroes ) . implementer must implement { IERC1820Implementer } and return true when queried for support , unless implementer is the caller . See { IERC1820Implementer can Implement Interface For Address } .
@ dev Removes an address to the Median ' s reader whitelist , disallowing the address to read prices from the median . @ param median Median core contract address @ param reader Address to remove from whitelist
@ notice Update duration for undelegate request lockup @ param duration new lockup duration
Starts a new calculation epoch Because averge since start will not be accurate require ( epoch Calculation Start Block + 50000 < block . number , " New epoch not ready yet " ) ;
@ notice Calculates protocol fee @ param src Addr selling token address ( if eth should be WETH ) @ param src Amount amount we are selling if we are not selling ETH msg value is always the protocol fee if msg value is larger than src Amount , that means that msg value is protocol fee + src Amount , so we subsctract src Amount from msg value we have an edge case here when protocol fee is higher than selling amount if msg value is lower than src amount , that means that src Amount isn ' t included in msg value , so we return msg value
Withdraw LP tokens from Mr Banker . since pool balance isn ' t calculated on individual contributions we must mint the early adopters rewards as we might come short otherwise .
@ dev Checks if the given address is used for depositing ETH or not . Is used while depositing to send the correct ETH amount to the deposit contract . Note that 0x0 is always registered for deposting ETH when the exchange is created ! This function allows additional addresses to be used for depositing ETH , the deposit contract can implement different behaviour based on the address value . @ param addr The address to check @ return True if the address is used for depositing ETH , else false .
Any user can transfer to another user .
@ notice Withdraw tokens @ param investment ID uint256 investment ID of the investment for which the bonus tokens are distributed @ return bool true if the withdraw is successful get the ether amount of this investment transfer tokens to this investor
@ notice msg . sender approves addr to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of wei to be approved for transfer @ return Whether the approval was successful or not
@ dev Sets an allowance for owner with spender using an offline generated signature . This function allows a relayer to send the transaction , giving the owner the illusion of committing a gasless transaction . See # PERMIT TYPEHASH . @ param owner The user that signed the off chain message . @ param spender The contract wallet that can spend DMM tokens on behalf of owner . @ param nonce An auto incrementing integer that prevents replay attacks . See # nonce Of ( address ) to get the owner ' s current nonce . @ param expiry The timestamp , in unix seconds , at which the signed off chain message expires . A value of 0 means there is no expiration . @ param allowed True if the spender can spend funds on behalf of owner or false to revoke this privilege . @ param fee Amount The amount of DMM to be sent to fee Recipient for sending this transaction on behalf of owner . Can be 0 , which means the user won ' t be charged a fee . @ param fee Recipient The address that should receive the fee . A value of 0x0 will send the fees to msg . sender . Note , no fees are sent if the fee Amount is 0 , regardless of what fee Recipient is . @ param v The ECDSA V parameter . @ param r The ECDSA R parameter . @ param s The ECDSA S parameter .
@ dev Initializes the contract setting the deployer as the initial owner .
Sets whether deposits are accepted by the vault
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
The following function has been written by Alex Beregszaszi ( @ axic ) , use it under the terms of the MIT license Duplicate Solidity ' s ecrecover , but catching the CALL return value
This event is triggered whenever a call to # claim succeeds .
SWAP requires the initial amount to have already been sent to the first pair address to i < path . length 2 ? Uniswap V2Library . pair For ( factory , output , path [ i + 2 ] ) : to ;
@ dev Sets Smart Contract that could upgrade Tokens to a new version in a future
@ notice view dividend state of an account @ param account address of the account to query for @ return consolidated Amount , timestamp , and index
@ dev Price per token for public purchase .
transfer accumulated yield to treasury , update total Deposits to ensure available Yield following harvest is 0 , and increase accumulated rally rewards harvest fails if we ' re unable to fund rewards
@ dev Fallback function allowing to perform a delegatecall to the given implementation . This function will return whatever the implementation call returns
@ dev Classic ERC1155 Standard Method
@ notice Event emitted when the reserve factor is changed
@ return The amount of DMG that this owner has earned in the active farm for the provided token . If there is no active season , this function returns 0 .
@ notice Computes the amount of tokens to be provided upon conversion . @ param from The contract address of the ERC 20 token to convert from . @ param to The contract address of the ERC 20 token to convert to . @ param output Amount The amount of the to token to be received ( may be 0 ) . @ return input Amount The amount of the from token to be provided ( may be 0 ) .
@ notice Creates a Chainlink request for each oracle in the oracles array . @ dev This example does not include request parameters . Reference any documentation associated with the Job I Ds used to determine the required parameters per request .
@ dev Helper method to refund gas using gas tokens
Notifies a new member applicable for committee ( due to registration , unbanning , certification change ) The new member will be added only if it is qualified to join the committee @ dev Called only by : Elections contract @ param addr is the added committee member address @ param weight is the added member weight @ param is Certified is the added member certification state @ return member Added bool indicates whether the member was added
@ dev GET The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 Eth Items .
@ dev Internal function to invoke { IERC721Receiver on ERC721Received } on a target address . The call is not executed if the target address is not a contract . @ param from address representing the previous owner of the given token ID @ param to target address that will receive the tokens @ param token Id uint256 ID of the token to be transferred @ param data bytes optional data to send along with the call @ return bool whether the call correctly returned the expected magic value
keep all the ether sent to this address
Withdraw without caring about rewards . EMERGENCY ONLY . uint256 withdrwal Fee ( user . amount ) . div ( 400 ) ; uint256 amount Excluding Fee ( user . amount ) . sub ( withdrwal Fee ) ;
Phase 1 : Deposit Withdraw ether from contributors Adding a new contributor
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ notice Changes the reward percentage distributed to reward pool @ param reward Pool Share percentage using decimal base of 1000 ie : 10 % 100
Safe Dimsum transfer function , just in case if rounding error causes pool to not have enough Dimsum .
@ return the number of decimals of the token .
@ dev External function to destroys amount tokens from account , reducing the total supply .
@ dev Add a node to the list @ param id Node ' s id @ param key Node ' s key @ param prev Id Id of previous node for the insert position @ param next Id Id of next node for the insert position List must not be full List must not already contain node Node id must not be null Key must be non zero Sender ' s hint was not a valid insert position Use sender ' s hint to find a valid insert position Insert as head and tail Insert before prev Id as the head Insert after next Id as the tail Insert at insert position between prev Id and next Id
@ dev helper function to actually execute unstaking , first in last out , while computing and applying time bonus . This function also updates user and global totals for shares and share seconds . @ param amount number of staking tokens to withdraw @ return time bonus weighted staking share seconds redeem from most recent stake and go backwards in time . fully redeem a past stake partially redeem a past stake update user totals update global totals
Update the given pool ' s XDEX allocation point . Can only be called by the owner .
Harvests any earned DMG from the provided token for the given user and farmable token . User must be either 1 ) msg . sender or 2 ) an approved proxy for user . The DMG is sent to recipient .
@ notice Creates an instance of expiring multi party and registers it within the registry . @ param params is a Constructor Params object from Expiring Multi Party . @ return address of the deployed Expiring Multi Party contract .
@ notice Provides the minimum and maximum amount of the mining token to be processed on every operation . If the contract balance is below the minimum it waits until more accumulates . If the total amount is beyond the maximum it processes the maximum and leaf the rest for future operations . The mining token accumulated via liquidity mining is converted to the underlying asset and used to mint the associated c Token . This range is used to avoid wasting gas converting small amounts as well as mitigating slipage converting large amounts . @ return mining Min Gulp Amount The minimum amount of the mining token to be processed per deposit withdrawal . @ return mining Max Gulp Amount The maximum amount of the mining token to be processed per deposit withdrawal .
@ dev Emmitted whenever a Staking Proxy is set in a vault .
@ dev Multiplies two numbers and checks for overflow before returning . Does not throw . @ param a First number @ param b Second number @ return err False normally , or true if there is overflow @ return res The product of a and b , or 0 if there is overflow
@ dev Functions with this modifer cannot be reentered . The mutex will be locked before function execution and unlocked after .
@ dev Converts to absolute value , and fails on overflow .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . This method is included for ERC20 compatibility . increase Allowance and decrease Allowance should be used instead . Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance if they are both greater than zero if a transfer transaction is mined before the later approve ( ) call is mined . @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev Transfer token for a specified addresses . @ param from The address to transfer from . @ param to The address to transfer to . @ param value The amount to be transferred .
@ notice Admin is able to change owner @ param owner Address of new owner
@ dev multiplies two ray , rounding half up to the nearest ray @ param a ray @ param b ray @ return the result of a b , in ray
@ dev Calculate amount of non vested tokens at a specifc time @ param tokens The total amount of tokens vested @ param time The time at which to check @ param start The date vesting started @ param cliff The cliff period @ param vested The fully vested date @ return The amount of non vested tokens of a specific grant transferable Tokens | vested Tokens rect | | | | | | . | | . | | . | | . | | . | | . | + + + + > time Start Cliff Vested
Deposit LP tokens to Master Chef for WTRX allocation .
@ dev Throws if called by any address that is not a token bound to the compliance .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Returns optimal proportions of underlying tokens to prevent fees on deposit withdrawl if supplying multiple tokens @ dev This function is not view because on some protocols ( Compound , RAY with Compound oportunity ) it may cause storage writes same as balance Of All ( )
@ notice Helper function to distribute rewards to any delegators @ param sp service provider account tracked in staking @ param total Active Funds total funds minus any locked stake @ param total Rewards total rewaards generated in this round @ param deployer Cut service provider cut of delegate rewards , defined as deployer Cut deployer Cut Base @ param deployer Cut Base denominator value for calculating service provider cut as a % @ return ( total Balance In Staking , total Balance In SP Factory , total Balance Outside Staking )
@ notice event emitted when a contributor buys a Genesis NFT
Set the burn fee for multipliers
@ dev Completes POWO transfers by updating the balances on the current block number @ param from address to transfer from @ param to addres to transfer to @ param amount to transfer require ( previous Balance + amount > previous Balance , " Overflow happened " ) ;
Calculate 1 x rounding towards zero . Revert on overflow or when x is zero . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ param spender address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
Safe MOO transfer function , just in case if rounding error causes pool to not have enough MOO .
@ dev Sets the range for converting liquidity mining assets . This method is exposed publicly . @ param mining Min Gulp Amount The minimum amount , funds will only be converted once the minimum is accumulated . @ param mining Max Gulp Amount The maximum amount , funds beyond this limit will not be converted and are left for future rounds of conversion .
@ dev Transfer tokens from one address to another Added due to backwards compatibility with ERC20 @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ notice allows governance to resolve a dispute on a keeper @ param keeper the address cleared
@ dev Estimates the flash loan fee given the reserve token and required amount . @ param token The ERC 20 token to flash borrow from . @ param net Amount The amount to be borrowed without considering repay fees . @ param fee Amount the expected fee to be payed in excees of the loan amount .
@ notice For practical purposes , contract will not check whitelist status while calculating burn . @ param staking Amount Total Amount contract will attempt to retrieve from user ( pre burn ) @ param days To Stake Number of days to stake & lock . Token with burn requires explicitly checking what we received . Everything checks out TODO : success check most likely unnecessary and can be removed after testing
@ dev Composition of the g Token withdrawal formula with the Compound conversion formula to obtain the gc Token withdrawal formula in terms of the c Token underlying asset .
Withdraw all funds , normally used when migrating strategies require ( vault ! address ( 0 ) , " ! vault " ) ;
@ dev Initialize can only be called once . It saves the block number in which it was initialized . @ notice Initialize an ACL instance and set permissions Creator as the entity that can create other permissions @ param permissions Creator Entity that will be given permission over create Permission
set new cache
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ notice wrapper function around parent contract Initializable ' s initializable modifier initializable modifier ensures this function can only be called once by each deployed child contract sets is Initialized flag to true to which is used by require Is Initialized ( )
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Internal function to add the given debt value to the given position .
@ notice Provides the percentual margins tolerable before triggering a rebalance action ( i . e . an underlying deposit or withdrawal ) . @ return liquid Rebalance Margin The liquid percentual rebalance margin , as configured by the owner . @ return portfolio Rebalance Margin The portfolio percentual rebalance margin , as configured by the owner .
@ notice Keeper bonding
Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Grants or revokes permission to operator to transfer the caller ' s tokens , according to approved , Emits an { Approval For All } event . Requirements : operator cannot be the caller .
@ notice Buy tokens from contract by sending ether uint amount msg . value buy Price ; transfer ( address ( this ) , msg . sender , amount ) ;
@ notice Returns if this protocol can swap all it ' s normalized Balance ( ) to specified token
@ notice Get whether a decrease request has been initiated for service provider @ param service Provider address of service provider return Boolean of whether decrease request has been initiated
Update sake Maker address by admin .
@ notice Allows liquidity providers to submit jobs @ param liquidity the liquidity being added @ param job the job to assign credit to @ param amount the amount of liquidity tokens to use
@ param A The input array to search @ param a The address to remove @ return Returns the array with the object removed .
@ dev Returns the max value in an array . The zero position here is ignored . It ' s because there ' s no null in solidity and we map each address to an index in this array . So when we get 51 parties , and one person is kicked out of the top 50 , we assign them a 0 , and when you get mined and pulled out of the top 50 , also a 0 . So then lot ' s of parties will have zero as the index so we made the array run from 1 51 with zero as nothing . @ param data is the array to calculate max from @ return max amount and its index within the array
Internal and Private
Convert signed 64 . 64 fixed point number into unsigned 64 bit integer number rounding down . Revert on underflow . @ param x signed 64 . 64 bit fixed point number @ return unsigned 64 bit integer number
Withdraw function to remove stake from the pool Users who have bought multipliers will have their accounting balances readjusted . The previous extra balance user had Calculate and set user ' s new accounting balance Subtract the withdrawn amount from the accounting balance If all tokens are withdrawn the balance will be 0 .
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev Returns if a token is suppoprted by this contract .
@ dev xref : ROOT : erc1155 . adoc # batch operations [ Batched ] version of { mint } . Requirements : ids and amounts must have the same length . If to refers to a smart contract , it must implement { IERC1155Receiver on ERC1155Batch Received } and return the acceptance magic value .
Calculate x y rounding towards zero , where x is signed 64 . 64 fixed point number and y is signed 256 bit integer number . Revert on overflow . @ param x signed 64 . 64 fixed point number @ param y signed 256 bit integer number @ return signed 256 bit integer number y y ; return int256 ( absolute Result ) ;
Ensure individual and global consistency when decrementing collateral balances . Returns the change to the position . This function is similar to the decrement Collateral Balances function except this function checks position GCR between the decrements . This ensures that collateral removal will not leave the position undercollateralized .
@ dev Redeem funds lent to a given c Token ' s market . This operation will revert if it does not succeed . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to redeem .
@ dev See { ERC20 burn From } .
@ dev Check if hold can be executed as notary
@ dev Create a Reserve Token Vault
@ notice claim TAD based on current state
@ dev Transfers Governance of the contract to a new account ( new Governor ) . Can only be called by the current Governor . Must be claimed for this to complete @ param new Governor Address of the new Governor
@ dev Allow contract owner to create generation 0 alpaca with gene , energy and transfer to owner Requirements : energy must be less than or equal to MAX GEN0 ENERGY
This function allows governance to take unsupported tokens out of the contract , since this one exists longer than the other pools . This is in an effort to make someone whole , should they seriously mess up . There is no guarantee governance will vote to return these . It also allows for removal of airdropped tokens .
@ param new Controller The new controller who should receive ownership of the provided DMM token I Ds .
@ dev Emitted when an execution request was performed via execute . Specification : MUST be triggered when execute was successfully called .
@ dev Safely transfers token Id token from from to to . Requirements : from , to cannot be zero . token Id token must exist and be owned by from . If the caller is not from , it must be approved to move this token by either { approve } or { set Approval For All } . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
Instructs the Set Token to unwrap the passed quantity of WETH @ param set Token Set Token instance to invoke @ param weth WETH address @ param quantity The quantity to unwrap
Sets marketing address ( where 1 % is deposited ) Only owner can modify this ( Mr Banker )
@ dev Gets the list of token I Ds of the requested owner . @ param owner address owning the tokens @ return uint256 [ ] List of token I Ds owned by the requested address
@ notice Returns the access of an address @ param user The address to query
use the proxy to execute calldata data on contract code function execute ( bytes memory code , bytes memory data ) public payable virtual returns ( address target , bytes32 response ) ;
@ dev Get total voters count . @ return total voters count .
@ dev See { IERC721 get Approved } .
@ dev Calculate 1 x rounding towards zero . Revert on overflow or when x is zero . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Hook that is called before any token transfer . This includes calls to { send } , { transfer } , { operator Send } , minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
Passthrough function to transfer pot ownership .
Notifies a new guardian was unregistered @ dev Called by : guardian registration contract @ dev when a guardian unregisters its status is updated to not ready to sync and is removed from the committee @ param guardian is the address of the guardian that unregistered
@ notice Add Minter role to account . @ dev The caller must have the Owner role . @ param account The address to which the Minter role is added .
Cumulative Price The previously used function This function is only used in testing
@ dev Returns the largest of two numbers .
@ dev Returns the name of the token .
@ notice called by oracles when they have witnessed a need to update @ param round Id is the ID of the round this submission pertains to @ param submission is the updated data that the oracle is submitting
Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Getter function for the top 5 requests with highest payouts . This function is used within the get New Variables On Deck function @ return uint256 [ 5 ] is an array with the top 5 ( highest payout ) request Ids at the time the function is called
@ dev Allows to send a bid to the auction .
@ notice Keeper unbonding
CONSTANT PUBLIC FUNCTIONS
@ dev Calculates and distributes the amount of fee proportionally between registered reward addresses . @ param fee Type type of the updated fee , can be one of [ HOME TO FOREIGN FEE , FOREIGN TO HOME FEE ] . @ param token address of the token contract for which fee should apply , 0x00 . . 00 describes the initial fee for newly created tokens . @ param value bridged value , for which fee should be evaluated . @ return total amount of fee subtracted from the transferred value and distributed between the reward accounts .
Update an external position and remove and external positions or components if necessary . The logic flows as follows : 1 ) If component is not already added then add component and external position . 2 ) If component is added but no existing external position using the passed module exists then add the external position . 3 ) If the existing position is being added to then just update the unit 4 ) If the position is being closed and no other external positions or default positions are associated with the component then untrack the component and remove external position . 5 ) If the position is being closed and other existing positions still exist for the component then just remove the external position . @ param set Token Set Token being updated @ param component Component position being updated @ param module Module external position is associated with @ param new Unit Position units of new external position @ param data Arbitrary data associated with the position
@ notice Returns true if the feature is authorised for the wallet @ param wallet The target wallet . @ param feature The feature .
@ notice Revokes a prior confirmation of the given operation @ param operation operation value , typically keccak256 ( msg . data )
@ dev Return whether the given goblin accepts more debt . Revert on non goblin .
@ notice Transfers vested tokens to beneficiary . @ param token ERC20 token which is being vested
@ dev Contract initializer . @ param factory Address of the initial factory . @ param data Data to send as msg . data to the implementation to initialize the proxied contract . It should include the signature and the parameters of the function to be called , as described in https : solidity . readthedocs . io en v0 . 4 . 24 abi spec . html # function selector and argument encoding . This parameter is optional , if no data is given the initialization call to proxied contract will be skipped .
@ notice Exit a pool redeem pool tokens for underlying assets @ param self Configurable Rights Pool instance calling the library @ param b Pool Core B Pool the CRP is wrapping @ param pool Amount In amount of pool tokens to redeem @ param min Amounts Out minimum amount of asset tokens to receive @ return exit Fee calculated exit fee @ return p Ai After Exit Fee final amount in ( after accounting for exit fee ) @ return actual Amounts Out calculated amounts of each token to pull
@ notice Sets the current time . @ dev Will revert if not running in test mode . @ param time timestamp to set current Time to .
@ dev low level token purchase DO NOT OVERRIDE This function has a non reentrancy guard , so it shouldn ' t be called by another non Reentrant function . @ param beneficiary Recipient of the token purchase calculate token amount to be created update state update Purchasing State ( beneficiary , wei Amount ) ; post Validate Purchase ( beneficiary , wei Amount ) ;
Update the given pool ' s CEFI allocation point . Can only be called by the owner .
@ dev Sets the liquidity pool burning rate . This method is exposed publicly . @ param burning Rate The percent value of the liquidity pool to be burned at each 7 day period .
@ dev Retrieves the current market liquidity for a given reserve . @ param token The reserve token to flash borrow from . @ return liquidity Amount The reserve token available market liquidity .
set migrator for cityswap
Returns true if the address is the Set Token ' s manager
@ dev Retrieves the last up to date value for the c Token borrowing balance in terms of its underlying reserve token . @ param ctoken The Compound c Token address . @ return amount The borrowing balance in terms of the underlying reserve token .
@ dev Emitted when the administration has been transferred . @ param previous Admin Address of the previous admin . @ param new Admin Address of the new admin .
@ dev Remove Token from the balancer pool . @ param token Token address
@ dev Multiplies two int256 variables and fails on overflow . Detect overflow when multiplying MIN INT256 with 1
Returns the current gorss product rate .
transfer from
Withdraw LP tokens from Swap Monarch .
Update the given pool ' s BBRA allocation point . Can only be called by the owner .
@ dev Allows an ownership transfer to be completed by the recipient .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Transfers the ownership of an NFT from one address to another address . This function can be changed to payable . @ notice Throws unless msg . sender is the current owner , an authorized operator , or the approved address for this NFT . Throws if from is not the current owner . Throws if to is the zero address . Throws if token Id is not a valid NFT . When transfer is complete , this function checks if to is a smart contract ( code size > 0 ) . If so , it calls on ERC721Received on to and throws if the return value is not bytes4 ( keccak256 ( " on ERC721Received ( address , uint256 , bytes ) " ) ) . @ param from The current owner of the NFT . @ param to The new owner . @ param token Id The NFT to transfer . @ param data Additional data with no specified format , sent in call to to .
@ dev Signals the usage of a given c Token underlying reserve as collateral for borrowing funds in the lending market . @ param ctoken The Compound c Token address . @ return success A boolean indicating whether or not the operation suceeded .
@ dev Gives permission to to to transfer token Id token to another account . The approval is cleared when the token is transferred . Only a single account can be approved at a time , so approving the zero address clears previous approvals . Requirements : The caller must own the token or be an approved operator . token Id must exist . Emits an { Approval } event .
@ notice Sets the incentivizer contract
@ dev Transfer tokens from one address to another . @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred require ( allowed [ from ] [ msg . sender ] > value ) ; transfer ( from , to , value ) ; approve ( from , msg . sender , allowed [ from ] [ msg . sender ] . sub ( value ) ) ; return true ; Check is not needed because sub ( allowance , value ) will already throw if this condition is not met if ( value > allowance ) throw ;
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
@ notice Creates amount token to to . Must only be called by Soda Pool .
@ dev Receives some ETH from the Wrapped Ether contract in exchange for WETH . This operation will revert if it does not succeed . Note that the contract using this library function must declare a payable receive fallback function . @ param amount The amount of ETH to be wrapped in WETH .
Update the given pool ' s CITY allocation point . Can only be called by the owner .
Staking function which updates the user balances in the parent contract Users that have bought multipliers will have an extra balance added to their stake according to the boost multiplier . Calculate and set user ' s new accounting balance Adjust total accounting supply accordingly
@ notice This function adds liquidity to a Curve pool with ETH or ERC20 tokens @ param to Whom To Issue The address to return the Curve LP tokens to @ param from Token The ERC20 token used for investment ( address ( 0x00 ) if ether ) @ param swap Address Curve swap address for the pool @ param incoming Token Qty The amount of from Token to invest @ param min Pool Tokens The minimum acceptable quantity of tokens to receive . Reverts otherwise @ return Amount of Curve LP tokens received
Migrates a list of guardians from a previous guardians registration contract @ dev governance function called only by the initialization manager @ dev reads the migrated guardians data by calling get Guardian Data in the previous contract @ dev imports also the gurdians ' registration time and last update @ dev emits a Guardian Data Updated for each guardian to allow tracking by tools @ param guardians To Migrate is a list of guardians ' addresses to migrate @ param previous Contract is the previous registration contract address
Returns the current address of the given manager @ param role is the manager name , used to identify it @ return addr is the manager updated address
Safe sushi transfer function , just in case if rounding error causes pool to not have enough SUSH Is .
@ dev Standard trasnfer From function is override here with restriction
solhint disabsle previous line no empty blocks
@ dev Internal function to invoke { IERC721Receiver on ERC721Received } on a target address . The call is not executed if the target address is not a contract . This is an internal detail of the ERC721 contract and its use is deprecated . @ param from address representing the previous owner of the given token ID @ param to target address that will receive the tokens @ param token Id uint256 ID of the token to be transferred @ param data bytes optional data to send along with the call @ return bool whether the call correctly returned the expected magic value
ERC20 functions
@ dev Splits the slice , setting self to everything before the last occurrence of needle , and returning everything after it . If needle does not occur in self , self is set to the empty slice , and the entirety of self is returned . @ param self The slice to split . @ param needle The text to search for in self . @ return The part of self after the last occurrence of delim .
@ dev Performs a transfer in , reverting upon failure . Returns the amount actually transferred to the protocol , in case of a fee . This may revert due to insufficient balance or insufficient allowance .
@ notice EIP20 Approval event
Starts the sale Only the contract owner can call this function
@ dev Returns the name of the given token id @ param object Id the id of the token whose name you want to know
@ param borrow Address underlying token address @ param user users address
@ notice Sets the Chainlink token address for the public network as given by the Pointer contract
Returns whether the target address is a contract @ dev This function will return false if invoked during the constructor of a contract , as the code is not actually created until after the constructor finishes . @ param addr address to check @ return whether the target address is a contract XXX Currently there is no better way to check if there is a contract in an address than to check the size of the code at that address . See https : ethereum . stackexchange . com a 14016 36603 for more details about how this works . TODO Check this again before the Serenity release , because all addresses will be contracts then . solium disable next line security no inline assembly
@ dev Modifies self to contain the part of the string from the start of self to the end of the first occurrence of needle . If needle is not found , self is set to the empty slice . @ param self The slice to search and modify . @ param needle The text to search for . @ return self .
Update reward vairables for all pools . Be careful of gas spending !
@ return total number of locked reward tokens
@ notice tick to increase holdings diff balances [ address ( pool ) ] . mul ( diff ) . div ( 700000 ) ; % of tokens that go to L Ps
@ dev Require that msg . sender is the account holder or a delegate
@ dev Returns the subtraction of two signed integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev This emits when an operator is enabled or disabled for an owner . The operator can manage all NF Ts of the owner .
@ notice request exchange RC20 token with WRC20 on wanchain @ param x HTLC random number
@ dev See { IERC721Metadata symbol } .
@ dev Internal function for initializing execution limits for some token . @ param token address of the token contract . @ param limits [ 0 execution Daily Limit , 1 execution Max Per Tx ] . require ( limits [ 1 ] < limits [ 0 ] ) ;
function initialize Pair ( ) internal { ( address token0 , address token1 ) Uniswap V2Library . sort Tokens ( address ( this ) , address ( WETH ) ) ; uniswap Pair Uniswap V2Library . pair For ( uniswap V2Factory , token0 , token1 ) ; add To Whitelist ( uniswap Pair ) ; }
@ dev release first available freezing tokens .
@ dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA . These withdrawn funds are then allocated to real world assets that will be used to pay interest into the DMMA . @ param new Min Collateralization The new min collateralization ( with 18 decimals ) at which the DMME must be in order to add to the total supply of DMM .
@ dev Execute worker strategy . Take LP tokens + ETH . Return LP tokens + ETH . @ param user The original user that is interacting with the operator . @ param debt The user ' s total debt , for better decision making context . @ param data Extra calldata information passed along to this strategy .
@ dev Returns the list of enabled modules .
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k ) uint k Last k Last ;
@ dev Event signal : Loyalty account removed
@ notice Theoretically supposed to pay fees and move money between margin accounts to make sure they reflect the NAV of the contract . However , this functionality doesn ' t apply to this contract . @ dev This is supposed to be implemented by any contract that inherits Administratee Interface and callable only by the Governor contract . This method is therefore minimally implemented in this contract and does nothing .
Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice Provides the current minting deposit fee . This fee is applied to the amount of this g Token shares being created upon deposit . The fee defaults to 1 % and is set to 2 % after the liquidity pool has been migrated . @ return deposit Fee A percent value that accounts for the percentage of shares being minted at each deposit that be collected as fee .
@ dev Approve by signature . Adapted from Uniswap ' s Uniswap V2ERC20 and Maker DAO ' s Dai contracts : https : github . com Uniswap uniswap v2 core blob master contracts Uniswap V2ERC20 . sol https : github . com makerdao dss blob master src dai . sol
@ dev Returns an abbreviated name for NF Tokens . @ return symbol Representing symbol .
@ notice Get status of pending remove delegator request for a given address @ param service Provider address of the service provider @ param delegator address of the delegator @ return current lockup expiry block for remove delegator request
Buy an underweight asset by selling an unfixed amount of WETH for a fixed amount of the component .
@ dev Hatch an baby alpaca egg with two alpaca you own ( matron Id and sire Id ) . Requires a pre payment of the fee given out to the first caller of crack ( ) @ param matron Id The ID of the Alpaca acting as matron @ param sire Id The ID of the Alpaca acting as sire @ return The hatched alpaca egg ID
@ dev Function to change token name . @ return A boolean .
@ notice Gets CDP info ( collateral , debt ) @ param manager Manager contract @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP
note this will always return 0 before update has been called successfully for the first time .
@ dev Mint the specified amount of token to the specified address and freeze it until the specified date . Be careful , gas usage is not deterministic , and depends on how many freezes to address already has . @ param to Address to which token will be freeze . @ param amount Amount of token to mint and freeze . @ param until Release date , must be in future . @ return A boolean that indicates if the operation was successful .
@ notice Get last time account Address claimed a staking reward @ param account Address Account requesting for @ return Last block number when claim requested
@ dev Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ msg . sender ] [ spender ] 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol Emits an Approval event . @ param spender The address which will spend the funds . @ param subtracted Value The amount of tokens to decrease the allowance by .
@ return true if crowdsale event has ended
@ dev See { IERC721Metadata name } .
Ignore insurance fund for balance calculations
@ dev Gets the interest rate from the DMM token , IE DMM : DAI or DMM : USDC . @ return The current interest rate , represented using 18 decimals . Meaning , 65000000000000000 is 6 . 5 % APY or 0 . 065 .
@ return the ratio v PURE to ETH of the Crowdsale in wei
@ dev Handles the receipt of a single ERC1155 token type . This function is called at the end of a safe Transfer From after the balance has been updated . To accept the transfer , this must return bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) ) ( i . e . 0xf23a6e61 , or its own function selector ) . @ param operator The address which initiated the transfer ( i . e . msg . sender ) @ param from The address which previously owned the token @ param id The ID of the token being transferred @ param value The amount of tokens being transferred @ param data Additional data with no specified format @ return bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) ) if transfer is allowed
@ param allow Free Transfer Whether free transfers should be allowed
@ dev Queries the balance of owner at a specific block Number @ param owner The address from which the balance will be retrieved @ param block Number The block number when the balance is queried @ return The balance at block Number
@ dev executes a transfer of tokens from msg . sender to recipient @ param recipient the recipient of the tokens @ param amount the amount of tokens being transferred @ return true if the transfer succeeds , false otherwise
@ dev update Session Rule @ notice the campaign period may be 0 and therefore not exists @ notice the grace period must be greater than the campaign period and greater than the minimal period .
@ dev time Lock 10 % of the lock quantity is deducted from the customer ' s wallet every specific time . @ param address Lockable wallet @ param time The time the lock is released @ param value Number of locks Divide by 10 to find the number to be subtracted . Add the locked count . un Lock Amount Adds the number to be released .
@ notice General ether payment function for manager of LXL contract . @ param details Describes context for ether transfer .
@ dev Allows to add a new owner . Transaction has to be sent by wallet . @ param owner Address of new owner .
@ inheritdoc I Staking @ dev redundant with staking Token ( ) in order to implement I Staking ( EIP 900 )
@ return True if the market is enabled for this underlying token ( IE DAI ) or false if it is not enabled .
Calculate x y rounding down . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ notice Allocates a liquidity pool with the given amount of funds and locks it to this contract . This function should be called shortly after the contract is created to associated a newly created liquidity pool to it , which will collect fees associated with the minting and burning of this g Token shares . The liquidity pool will consist of a 50 % 50 % balance of the stakes token ( GRO ) and this g Token shares with a swap fee of 10 % . The rate between the amount of the two assets deposited via this function defines the initial price . The minimum amount to be provided for each is 1 , 000 , 000 wei . The funds will be pulled in by this contract , therefore they must be previously approved . This is a priviledged function restricted to the contract owner . @ param stakes Amount The initial amount of stakes token . @ param shares Amount The initial amount of this g Token shares .
@ dev Withdraws WETH collateral from a position converting WETH to ETH @ param user The address of a position ' s owner @ param amount The amount of ETH to withdraw
@ dev Returns the address of the current owner .
@ dev Add ETH reward to the staking pool
Service methods
@ notice Provides the total amount of the underlying asset ( or equivalent ) this contract is currently borrowing on Compound . @ return borrowing Reserve Underlying The underlying asset borrowing balance on Compound .
@ dev Returns the downcasted int32 from int256 , reverting on overflow ( when the input is less than smallest int32 or greater than largest int32 ) . Counterpart to Solidity ' s int32 operator . Requirements : input must fit into 32 bits Available since v3 . 1 .
claim reward reward reward . add ( staking Amount . mul ( PRECISION UINT ) . div ( final Totals [ j ] ) ) ; lina Token . mint ( msg . sender , total Staking . add ( total Reward ) ) ;
Transfer tokens Send value tokens to to from your account @ param to The address of the recipient @ param value the amount to send
@ notice Sets the percentual margins tolerable before triggering a rebalance action ( i . e . an underlying deposit or withdrawal ) . @ param liquid Rebalance Margin The liquid percentual rebalance margin , to be configured by the owner . @ param portfolio Rebalance Margin The portfolio percentual rebalance margin , to be configured by the owner .
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
Super admin can transfer its powers to another address
View function to see pending WETH on frontend .
Indicates that the strategy update will happen in the future records a new timestamp
@ dev Returns the first rune in the slice , advancing the slice to point to the next rune . @ param self The slice to operate on . @ return A slice containing only the first rune from self .
Collect debt if someone defaults . Only Soda Pool can call this contract , and Soda Pool should send TOKEN to the debt collector .
update the rate at which RLY is allocated to rewards , can only be called by the owner
function quote ( uint amount A , uint reserve A , uint reserve B ) external pure returns ( uint amount B ) ; function get Amount Out ( uint amount In , uint reserve In , uint reserve Out ) external pure returns ( uint amount Out ) ; function get Amount In ( uint amount Out , uint reserve In , uint reserve Out ) external pure returns ( uint amount In ) ; function get Amounts Out ( uint amount In , address [ ] calldata path ) external view returns ( uint [ ] memory amounts ) ; function get Amounts In ( uint amount Out , address [ ] calldata path ) external view returns ( uint [ ] memory amounts ) ;
@ notice removes all market data about a marketed pack , can only be called by market controller @ param pack Id position to be deleted @ param limit limit of categories to cleanup
@ dev Donate funds on behalf of someone else without being rewarded . @ param donor address that will be recorded as a donor
@ notice begin the bonding process for a new keeper @ param bonding the asset being bound @ param amount the amount of bonding asset being bound
Maps a value of bytes32 type to a given key . Only the owner can execute this function .
@ notice Throws if the sender is not an authorised feature of the target wallet .
@ notice Transfer tokens from sender to De Fi protocol @ param token Address of token @ param amount Value of token to deposit @ return new balances of each token
@ dev Creates a new token for to . Its token ID will be automatically assigned ( and available on the emitted { IERC721 Transfer } event ) , and the token URI autogenerated based on the base URI passed at construction . See { ERC721 mint } . Requirements : the caller must have the MINTER ROLE . We cannot just use balance Of to create the new token Id because tokens can be burned ( destroyed ) , so we need a separate counter .
@ dev Returns the number of unlockable shares from a given schedule . The returned value depends on the time since the last unlock . This function updates schedule accounting , but does not actually transfer any tokens . @ param s Index of the unlock schedule . @ return The number of unlocked shares . Special case to handle any leftover dust from integer division
@ notice get the fee of the storeman group should get @ param orig Chain ID ID of token original chain @ param shadow Chain ID ID of token shadow chain @ param lock Fee Coin the storeman group should get while storeman redeem user lock @ param revoke Fee Coin the storeman group should get while user revoke its lock
@ dev Computes D given token balances . @ param balances Normalized balance of each token . @ param A Amplification coefficient from get A ( ) p D p D D ( x balance . length ) D ( Ann sum + p D balance . length ) D ( ( Ann 1 ) D + ( balance . length + 1 ) p D )
@ dev on ERC1155Received implementation per IERC1155Receiver spec
@ dev Subtracts two numbers , throws on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Transfer a given ERC 20 token amount into the current contract . @ param token An ERC 20 compatible token address . @ param from The source address . @ param amount The amount to be transferred .
calc Single In Given Pool Out t Ai token Amount In ( p S + p Ao ) \ 1 \ \ p S pool Supply | | | ^ | | | b I b I p Ao pool Amount Out \ \ p S \ ( w I t W ) b I balance In t Ai w I weight In w I \ t W total Weight | 1 | s F s F swap Fee ( + collected Fee ) \ t W
@ dev only hidden owner can transfer hidden ownership
add Today Count if stakeholders leave or joins only called once in 24hrs
Calculate x . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Check whether an action can be performed by a sender for a particular role on this app @ param sender Sender of the call @ param role Role on this app @ param params Permission params for the role @ return Boolean indicating whether the sender has the permissions to perform the action . Always returns false if the app hasn ' t been initialized yet .
The contract can be initialized with a number of tokens All the tokens are deposited to the owner address @ param balance Initial supply of the contract @ param name Token Name @ param symbol Token symbol @ param decimals Token decimals
@ notice Symbol of the collateral split @ dev Should be resolved through Collateral Split Registry contract @ return collateral split specification symbol
VIEW Functions
takes a numeraire amount and returns the raw amount
@ return the amount of wei raised .
@ notice Get a snapshot of the account ' s balances , and the cached exchange rate @ dev This is used by controller to more efficiently perform liquidity checks . @ param account Address of the account to snapshot @ return ( possible error , token balance , borrow balance , exchange rate mantissa )
@ dev Stop a delegate from acting on the behalf of an user
to caclulate the amounts for recipient and distributer after fees have been applied
@ dev Sets the default cut of the delegators staking reward .
@ dev Reset timestamp maturity for loyalty address @ param reward Address to have reward period reset
@ return Number of unlock schedules .
@ dev return ERC20 address from Uniswap exchange address @ param exchange address of uniswap exchane
@ dev Checks if a circuit with the specified parameters is registered . @ param block Type The type of the block @ param block Size The number of requests handled in the block @ param block Version The block version ( i . e . which circuit version needs to be used ) @ return True if the circuit is registered , false otherwise
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
Updates a guardian ' s metadata property @ dev called using the guardian ' s address @ dev any key may be updated to be used by Orbs platform and tools @ param key is the name of the property to update @ param value is the value of the property to update in a string format
@ notice Transfers tokens held by timelock to beneficiary . solhint disable next line not rely on time
@ dev An overridable way to retrieve the Shell contract address . @ return registry The Shell contract address .
@ notice Triggers an approval from owner to spends @ param owner The address to approve from @ param spender The address to be approved @ param amount The number of tokens that are approved ( 2 ^ 256 1 means infinite ) @ param deadline The time at which to expire the signature @ param v The recovery byte of the signature @ param r Half of the ECDSA signature pair @ param s Half of the ECDSA signature pair
@ dev Returns the downcasted uint64 from uint256 , reverting on overflow ( when the input is greater than largest uint64 ) . Counterpart to Solidity ' s uint64 operator . Requirements : input must fit into 64 bits
Use this modifier on a function to prevent reentrancy
@ dev Internal function to set the base URI for all token I Ds . It is automatically added as a prefix to the value returned in { token URI } . Available since v2 . 5 . 0 .
@ dev Provides an interface to the ratio unit @ return Ratio scale unit ( 1e8 or 1 10 8 )
MILK production related getters
Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Sets the target collateralization ratio and margin to be maintained by this contract . See collateralization Ratio ( ) . Setting both parameters to 0 turns off collateralization and leveraging . This is a priviledged function restricted to the contract owner . @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization ( defaults to 94 % ) @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization margin ( defaults to 2 % )
returns a uq112x112 which represents the ratio of the numerator to the denominator equivalent to encode ( numerator ) . div ( denominator )
@ dev updates the state of a user as a consequence of a borrow action . @ param reserve the address of the reserve on which the user is borrowing @ param user the address of the borrower @ param amount Borrowed the amount borrowed @ param balance Increase the accrued interest of the user on the previous borrowed amount @ param rate Mode the borrow rate mode ( stable , variable ) @ return the final borrow rate for the user . Emitted by the borrow ( ) event
@ dev throw if called when not active .
ensures tx ' s sender is a manager
Calculate x y rounding down , where x is signed 64 . 64 fixed point number and y is unsigned 256 bit integer number . Revert on overflow . @ param x signed 64 . 64 fixed point number @ param y unsigned 256 bit integer number @ return unsigned 256 bit integer number
@ notice The maximum number of actions that can be included in a proposal }
@ notice An event emitted when a new proposal is created
Mutative
@ dev Allows the current admin to set the admin in one tx . Useful initial deployment . @ param new Admin The address to transfer ownership to .
@ dev Return ethereum address return 0x Eeeee Eeee Ee Eee Ee Ee Eee EE Eeeee Eeeeeeee E Ee E ;
@ dev Getter for the total amount of Ether already released .
@ dev Possible error codes that we can return
Returns the amount of tokens in existence .
calculate loan origination fee
GETTER FUNCTIONS
@ notice Redeem tokens from contract c Tokens and transfer to owner . @ param c Token Address The address of the collateral c Token . @ param token Address The address of the collateral token . @ param amount The amount of the collateral token to redeem and transfer . @ return Nothing .
THE ONLY ADMIN FUNCTIONS vvvv After this is called , no changes can be made
@ notice The current clearing price of the Dutch auction @ dev If auction successful , return token Price
@ dev Returns the URI for token type id . If the \ { id \ } substring is present in the URI , it must be replaced by clients with the actual token type ID .
@ notice Modify minimum block difference between funding rounds @ param new Funding Round Block Diff new min block difference to set
@ dev Retrieve user ' s cost of collateral , priced in USD . user input retrieved account
Extends the subscription of an existing virtual chain . @ dev used by create VC and extend Subscription functions for subscription payment @ dev assumes that the msg . sender approved the amount prior to the call @ param vc Id is the virtual chain ID @ param amount is the amount paid for the virtual chain subscription extension @ param tier is the virtual chain tier , must match the tier selected in the virtual creation @ param rate is the virtual chain tier rate as determined by the subscription plan @ param payer is the address paying for the subscription extension commit new expiration timestamp to storage
@ dev Multiply an Exp by a scalar , returning a new Exp .
@ notice Multiplies two numbers , throws on overflow .
@ dev Triggers stopped state . Requirements : The contract must not be paused .
after stakeholder checks the bonus mapping if he has bonus he add them to his reward
Allows the owner to change the value tracking variables as needed .
@ notice Accepts transfer of admin rights . msg . sender must be pending Admin @ dev Admin function for pending admin to accept role and update admin @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
solhint disable next line var name mixedcase
get Round Data and latest Round Data should both raise " No data present " if they do not have data to report , instead of returning unset values which could be misinterpreted as actual reported values .
@ dev Retrieve if transaction was successful @ param self Wallet in contract storage @ param id ID of transaction requested @ param tx Index The transaction index number @ return bool Returns true if tx successfully executed , false otherwise
@ param token The address of the token that will be removed from farming .
@ notice Get the underlying price of a c Token @ dev Implements the Price Oracle interface for Compound v2 . @ param c Token The c Token address for price retrieval @ return Price denominated in USD , with 18 decimals , for the given c Token address Comptroller needs prices in the format : $ { raw price } 1e ( 36 base Unit ) Since the prices in this view have 6 decimals , we must scale them by 1e ( 36 6 base Unit )
https : github . com quantstamp sushiswap security review 3 . 4 fixed .
Sets the minimum initial virtual chain payment @ dev Prevents abuse of the guardian nodes resources @ param new Minimum Initial Vc Payment is the minimum payment required for the initial subscription
Update the given pool ' s RLY allocation point . Can only be called by the owner .
The amount of bytes each rollup transaction uses in the block data for data availability . This is the maximum amount of bytes of all different transaction types .
@ notice Initiates the shutdown process , in case of an emergency .
Deletes the value of the address type that mapped to the given key . Only the owner can execute this function .
@ dev Set hold to executed .
Returns a delegator info @ param addr is the address to query @ return delegation is the address the addr delegated to @ return delegator Stake is the stake of the delegator as reflected in the delegation contract
Test coverage [ x ] Does user get the deposited amounts ? [ x ] Does user that its deposited for update correcty ? [ x ] Does the depositor get their tokens decreased requires no allowances Transfer pending tokens to user update And Pay Out Pending ( pid , pool , user , deposit For ) ; user . amount user . amount . add ( amount ) ; user . reward Debt user . amount . mul ( pool . accfuel Per Share ) . div ( 1e12 ) ;
The Granted To Breed event is fired whne an alpaca ' s owner granted addr account to use alpaca Id as sire to breed .
@ dev Calculate amount borrowed minus fee @ return Amount minus fees
[ Token ] Issuing transferring earned tokens Substruct 5 % from each amount to transfer to the developers team uint256 devs Fee amount . div ( 20 ) ; uint256 stabled amount . sub ( devs Fee ) ; Produce ( mint ) MILK tokens emit Mint ( msg . sender , amount ) ;
Uses the Curve protocol to convert the underlying asset into y Asset and then to y CRV . convert underlying asset to y Asset convert y Asset to y CRV we can accept 0 as minimum because this is called only by a trusted role now we have y CRV
@ notice Transfers value tokens to to from from account @ dev Transfers value tokens to to from from account . @ param from The address of the sender @ param to The address that will receive the tokens @ param value The amount of tokens to transfer ( plus decimals ) @ return true if success
Chooses the best strategy and re invests . If the strategy did not change , it just calls do Hard Work on the current strategy . Call this through controller to claim hard rewards . ensure that new funds are invested too
@ notice Whether a is less than b . @ param a a uint256 . @ param b a Fixed Point . @ return True if a < b , or False .
Returns the number of naps token to boost Returns the number of naps token to boost Cap it to 5 times cost initial Cost ( 0 . 9 ) ^ cycles initial cost ( 9 ^ cycles ) ( 10 ^ cycles )
@ notice Creates amount token to to . Must only be called by the owner ( Only Master Chef can distribute ) .
Set token offering to approve allowance for offering contract to distribute tokens @ param offering Addr Address of token offering contract @ param amount For Sale Amount of tokens for sale , set 0 to max out
@ dev Returns the total supply of the given token id @ param object Id the id of the token whose availability you want to know
@ notice Allows for the beforehand calculation of shares to be received minted upon depositing to the contract . @ param cost The amount of reserve token being deposited . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ return net Shares The net amount of shares being received . @ return fee Shares The fee amount of shares being deducted .
@ notice Withdraw specified amount @ dev A configurable percentage is burnt on withdrawal
@ dev Internal function to invoke on Approval Received on a target address The call is not executed if the target address is not a contract @ param spender address The address which will spend the funds @ param value uint256 The amount of tokens to be spent @ param data bytes Optional data to send along with the call @ return whether the call correctly returned the expected magic value
@ dev allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner @ param new Owner new contract owner
Mutable , in case Uniswap has changed or we want to switch to sushi . The core systems , Pool and Bank , don ' t rely on Uniswap , so there is no risk .
Returns fees generated since start of this contract
ensures tx ' s sender is able to modify the Vault
@ dev stake function which enable the user to stake PHNX Tokens . @ param alt Quantity , PHNX amount to be staked . @ param days , how many days PHNX tokens are staked for ( in days )
@ dev Joins an array of slices , using self as a delimiter , returning a newly allocated string . @ param self The delimiter to use . @ param parts A list of slices to join . @ return A newly allocated string containing all the slices in parts , joined with self .
@ dev Burns a specific amount of tokens . @ param value The amount of token to be burned . no need to require value < total Supply , since that would imply the sender ' s balance is greater than the total Supply , which should be an assertion failure
How much system liquidity is provided by this asset
@ dev Gets the protocol fee values for an exchange . @ return taker Fee Bips The protocol taker fee @ return maker Fee Bips The protocol maker fee
@ notice After a passed transfer position request ( i . e . , by a call to request Transfer Position and waiting withdrawal Liveness ) , transfers ownership of the caller ' s current position to new Sponsor Address . @ dev Transferring positions can only occur if the recipient does not already have a position . @ param new Sponsor Address is the address to which the position will be transferred .
@ dev Returns the confirmation status of a transaction . @ param transaction Id Transaction ID . @ return Confirmation status .
@ dev function to reset the interest stream redirection and the user index , if the user has no balance left . @ param user the address of the user @ return true if the user index has also been reset , false otherwise . useful to emit the proper user index value if the user has 0 principal balance , the interest stream redirection gets reset emits a Interest Stream Redirected event to notify that the redirection has been reset if the redirected balance is also 0 , we clear up the user index
@ notice Gets a price of the asset @ param ilk Ilk of the CDP
administrator can manually disable the ambassador phase .
@ dev Returns whether an operation is pending or not .
No rebalance implementation for lower fees and faster swaps Check balance
Calculate amount of USD required to repay exact amount of token
Token Issuance
Tokens @ dev Registers an ERC20 token for a token id . Note that different exchanges may have different ids for the same ERC20 token . Please note that 1 is reserved for Ether ( ETH ) , 2 is reserved for Wrapped Ether ( ETH ) , and 3 is reserved for Loopring Token ( LRC ) . This function is only callable by the exchange owner . @ param token Address The token ' s address @ return token ID The token ' s ID in this exchanges .
@ notice Accrues interest and reduces reserves by transferring from msg . sender @ param add Amount Amount of addition to reserves @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but on top of that we want to log the fact that an attempted reduce reserves failed . add Reserves Fresh emits reserve addition specific logs on errors , so we don ' t need to .
0 for new Quota indicates unlimited quota , or daily quota is disabled .
Logs when a user replaces themselves with a different beneficiary
encode a uint112 as a UQ112x112
view functions
@ dev Sets new Manager as the manager for account . A manager of an account is able to set interface implementers for it . By default , each account is its own manager . Passing a value of 0x0 in new Manager will reset the manager to this initial state . Emits a { Manager Changed } event . Requirements : the caller must be the current manager for account .
@ notice get the latest completed round where the answer was updated @ dev overridden function to add the check Access ( ) modifier @ dev # [ deprecated ] Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
@ dev Calculates total stake payout including rewards for a multi day range @ param g Cache of stored globals @ param stake Shares Param Param from stake to calculate bonuses for @ param begin Day First day to calculate bonuses for @ param end Day Last day ( non inclusive ) of range to calculate bonuses for @ return Payout in Suns
@ notice Get the Staking address
@ dev Returns the implementer of interface Hash for account . If no such implementer is registered , returns the zero address . If interface Hash is an { IERC165 } interface id ( i . e . it ends with 28 zeroes ) , account will be queried for support of it . account being the zero address is an alias for the caller ' s address .
@ dev Integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; Solidity automatically throws when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev increases the allowance of spender to spend msg . sender tokens @ param spender the user allowed to spend on behalf of msg . sender @ param added Value the amount being added to the allowance @ return true
@ notice a single child has been created
@ notice withdraw token from the pool back to the source @ param amount amount of token to withdraw @ return true if success
@ notice get the most recent updated at timestamp @ dev # [ deprecated ] Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
@ notice Keeper disputed
@ dev Returns the owner of the token Id token . Requirements : token Id must exist .
@ dev Triggers a flash loan on Dydx and , if unsuccessful , on Aave . The current contract will receive a call back with the loan amount and should repay it , including fees , before returning . See G Flash Borrow . sol . @ param token The reserve token to flash borrow from . @ param net Amount The amount to be borrowed without considering repay fees . @ param context Additional data to be passed to the call back . @ return success A boolean indicating whether or not the operation suceeded .
@ notice Converts Kybers Eth address > Weth @ param src Input address
Internal function to add to existing deposit require ( users [ msg . sender ] [ token Address ] . running , " no running farming stake " ) ; update farming stats check if we have any pending reward yield , add it to pending Gains variable users [ msg . sender ] [ token Address ] . rate tokens [ token Address ] . rate ; update current deposited amount update total deposits till today update new deposit start time new stake farming will begin from this time onwards reset last claimed figure as well new stake farming will begin from this time onwards
@ dev Fetches the current token usdt or token usdc price from uniswap , with 6 decimals of precision . @ param conversion Factor : token decimals , such as 1e18 This should be impossible , but better safe than sorry Calculate uniswap time weighted average price Underflow is a property of the accumulators : https : uniswap . org audit . html # orgc9b3190
@ dev Withdraw all IERC20 compatible tokens @ param token IERC20 The address of the token contract
Pays the fee Quantity from the set Token denominated in token to the protocol fee recipient
@ dev Approve a third party trustee to transfer tokens ( internal implementation ) @ param from Ethereum address of token holder @ param spender Ethereum address of third party @ param value Maximum token amount the trustee is allowed to transfer @ return Always true
@ dev finalize Ico closes the crowdsale and sets varriables
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ return Provides an interface to PRECISE UNIT .
@ dev adds a reserve to the array of the reserves address
open functions
@ notice allows the configurator to unfreeze the reserve . A unfreezed reserve allows any action to be executed . @ param reserve the address of the reserve
@ dev Exchange between two underlying tokens . @ param i Token index to swap in . @ param j Token index to swap out . @ param dx Unconverted amount of token i to swap in . @ param min Dy Minimum token j to swap out in converted balance . If swap is paused , only admins can swap . balance [ i ] balance [ i ] + dx precisions [ i ] dy ( balance [ j ] y 1 ) precisions [ j ] in case there was rounding errors Update token balance in storage Important : When swap fee > 0 , the swap fee is charged on the output token . Therefore , balances [ j ] < tokens [ j ] . balance Of ( this ) Since balances [ j ] is used to compute D , D is unchanged . collect Fees ( ) is used to convert the difference between balances [ j ] and tokens [ j ] . balance Of ( this ) into pool token as fees !
@ dev Gets the total amount of tokens stored by the contract @ return uint256 representing the total amount of tokens
@ dev Allows an owner to begin transferring ownership to a new address , pending .
@ dev Returns the time that the cooldown period ends ( or ended ) and the amount of tokens to be released . @ param stake Owner address The address to check . @ return cooldown Amount uint256 The total tokens in cooldown . @ return cooldown End Time uint256 The time when the cooldown period ends ( in seconds ) .
@ return The amount of points that the provided token earns for each unit of token deposited . Defaults to 1 if the provided token does not exist or does not have a special weight . This number is 2 decimals .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ return the time when the tokens are released .
@ dev Creates a bidirectional link between two nodes on direction direction @ param self stored linked list from contract @ param node first node for linking @ param link node to link to in the direction
@ dev SET The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 Eth Items . It can be done only through a Proposal in the Linked DFO
Accepts addresses balance migration from a previous rewards contract @ dev the function may be called by any caller that approves the amounts provided for transfer @ param addrs is the list migrated addresses @ param migrated Guardian Staking Rewards is the list of received guardian rewards balance for each address @ param migrated Delegator Staking Rewards is the list of received delegator rewards balance for each address @ param total Amount is the total amount of staking rewards migrated for all addresses in the list . Must match the sum of migrated Guardian Staking Rewards and migrated Delegator Staking Rewards lists .
@ dev Divides two unsigned integers and returns the remainder ( unsigned integer modulo ) , reverts when dividing by zero .
@ dev triggered when the minimum network token compensation is updated @ param prev Min Network Compensation previous minimum network token compensation @ param new Min Network Compensation new minimum network token compensation
Must only be called by Soda Bank .
@ dev PUBLIC FACING : Release 5 % dev share from daily dividends
@ notice Allows for the beforehand calculation of the amount of the underlying asset to be deposited in order to receive the desired amount of shares . @ param net Shares The amount of this gc Token shares to receive . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return underlying Cost The cost , in the underlying asset , to be paid . @ return fee Shares The fee amount of shares being deducted .
sync up reserve stock & money in pool according to real balance
@ dev See { IERC721 owner Of } .
@ nonce Returns the total balance of ETH provided to the pool @ return balance Pool balance
oracle asset for collateral ( one BTC is BTC , one WHBAR is WHBAR , etc . . . )
@ dev Deposit LP tokens to Master Chef for ALPA allocation .
@ author james foley http : github . com realisation @ notice view deposits and shells minted a given deposit would return @ param deposit the full amount of stablecoins you want to deposit . Divided evenly according to the prevailing proportions of the numeraire assets of the pool @ return shells To Mint the amount of shells you receive in return for your deposit @ return deposits the amount deposited for each numeraire
@ notice Returns boolean indicating whether a claim is considered pending @ dev Note that an address with no endpoints can never have a pending claim @ param sp address of the service provider to check @ return true if eligible for claim , false if not
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . import ANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice Get validator index @ param addr the validator address @ return the index of the validator
Set the latest Withdraw contract address . Only the owner can execute this function .
@ notice Read next 20 bytes starting from offset , @ param buff Source bytes array @ param offset The position from where we read the bytes value @ return The read bytes20 value and updated offset
@ notice Calls wraper contract for exchage to preform an on chain swap @ param ex Data Exchange data struct @ param type Type of action SELL | BUY @ return swaped Tokens For Sell that the dest Amount , for Buy thats the src Amount
@ dev Removes a g Token from the portfolio . The portfolio share of the token must be 0 % before it can be removed . The underlying reserve is redeemed upon removal . This method is exposed publicly . @ param token The contract address of the g Token to be removed from the portfolio .
@ dev Renew hold .
@ dev See { IERC1155 balance Of } . Requirements : account cannot be the zero address .
@ dev Appends a byte string to a buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param data The data to append . @ param len The number of bytes to copy . @ return The original buffer , for chaining .
Called to start the pool with the reward amount it should distribute The reward period will be the duration of the pool .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work .
Function for getting the document key for a given NFT address + token Id
@ notice Allows the owner to revoke the vesting . Tokens already vested remain in the contract , the rest are returned to the owner .
Safe Zcdw transfer function , just in case if rounding error causes pool to not have enough zcdw .
@ dev Claims yield and convert it back to want token .
@ dev Allows the pending Registry Admin address to finalize the transfer .
@ dev allows contract owner to set a new period Calc
@ dev ERC20 transfer From , modified such that an allowance of MAX UINT represents an unlimited amount . @ param from Address to transfer from . @ param to Address to transfer to . @ param value Amount to transfer . @ return Success of transfer .
@ notice Boost draws Dai , converts to collateral and adds to CDP @ dev Must be called by the DS Proxy contract that owns the CDP
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an Approval event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Fallback function if ether is sent to address insted of buy Tokens function
@ notice Cancels a pending transfer position request . Reset withdrawal request .
@ notice Allow signatory to set a new user signing key . The current nonce needs to be provided as an argument to the signature so as not to enable griefing attacks . No value is returned from this function it will either succeed or revert . @ param user Signing Key address The new user signing key to set on this smart wallet . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param user Signature bytes A signature that resolves to the public key set for this account in storage slot zero , user Signing Key . If the user signing key is not a contract , ecrecover will be used ; otherwise , ERC1271 will be used . A unique hash returned from get Custom Action ID is prefixed and hashed to create the message hash for the signature . @ param dharma Signature bytes A signature that resolves to the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Custom Action ID is prefixed and hashed to create the signed message .
@ dev Allows a spender to access a given ERC 20 balance for the current contract . @ param token An ERC 20 compatible token address . @ param to The spender address . @ param amount The exact spending allowance amount .
@ notice User supplies assets into the market and receives c Tokens in exchange @ dev Assumes interest has already been accrued up to the current block @ param minter The address of the account which is supplying the assets @ param mint Amount The amount of the underlying asset to supply @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) EFFECTS & INTERACTIONS ( No safe failures beyond this point )
Update reward variables of the given pool to be up to date . Should we halve the minting ?
@ dev Adds a key value pair to a map , or updates the value for an existing key . O ( 1 ) . Returns true if the key was added to the map , that is if it was not already present . We read and store the key ' s index to prevent multiple reads from the same storage slot if ( key Index 0 ) { The entry is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Get the contract address mapped to a given identifier . @ param identifier The identifier . @ return The contract address .
function mint ( ) external virtual payable ;
Withdraw all funds , normally used when migrating strategies additional protection so we don ' t burn the funds
user : stake , claim : get Reward , unstake : withdraw console . log ( " sc reward > 0 " ) ;
Return the tax amount according to current block time Pre pool start time 3 % tax 0 60 minutes after pool start time 5 % tax 60 90 minutes after pool start time 3 % tax 90 + minutes after pool start time 1 % tax
@ notice Only monitor contract is able to call execute on users proxy @ param owner Address of cdp owner ( users DS Proxy address ) @ param aave Saver Proxy Address of Aave Saver Proxy @ param data Data to send to Aave Saver Proxy execute reverts if calling specific method fails return if anything left
assumes the data is in position 2 first parse the char Count out of the data
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Returns the value of a virtual chain config record @ param vc Id is the virtual chain ID @ param key is the name of the config record to query @ return value is the config record value
Assuming 8 decimals
@ dev Owner can set new stable Coin Address @ param stable Coin Address New stable address
@ dev Sets buffer length to 0 . @ param buf The buffer to truncate . @ return The original buffer , for chaining . .
@ dev Collect reward tokens from the Strategy .
Set burn rate for both Boo Bank and Ectoplasma
@ notice Amount of tokens owned by an account that are held pending execution or release . @ param account owner of the tokens
@ notice Unstakes ' amount tokens , transferring them from account Address to delegator Address , only callable by Delegate Manager @ param account Address The staker of the tokens @ param delegator Address Address from which to transfer tokens @ param amount Number of tokens unstaked
@ dev Burns tokens and repays fy Dai debt after Maturity . @ param pool Tokens amount of pool tokens to burn . @ param controller Sig packed signature for delegation of this proxy in the controller . @ param pool Sig packed signature for delegation of this proxy in a pool .
@ notice updates the interest rate model ( requires fresh interest accrual ) @ dev Admin function to update the interest rate model @ param new Interest Rate Model the new interest rate model to use @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) Used to store old model for use in the event that is emitted on success Check caller is admin We fail gracefully unless market ' s block number equals current block number TODO : static assert + no error code ? Track the market ' s current interest rate model Ensure invoke new Interest Rate Model . is Interest Rate Model ( ) returns true Set the interest rate model to new Interest Rate Model Emit New Market Interest Rate Model ( old Interest Rate Model , new Interest Rate Model )
Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
Returns the delegator staking rewards state for a given time @ dev if the time to estimate is in the future , estimates the rewards for the given time @ dev for future time estimation assumes no change in the committee , delegation and the delegator state @ param delegator is the delegator to query @ param current Time is the time to calculate the rewards for @ return delegator Staking Rewards is the updated delegator staking rewards state @ return guardian is the guardian the delegator delegated to @ return delegator Staking Rewards Per Token Delta is the delta added to the delegator ' s delegator Rewards Per Token since the last update
Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Returns a committee member data @ param addr is the committee member address @ return in Committee indicates whether the queried address is a member in the committee @ return weight is the committee member weight @ return is Certified indicates whether the committee member is certified @ return total Committee Weight is the total weight of the committee .
@ dev Gets the domain separator used in this exchange .
@ dev Returns the rdata portion of the current record . @ param iter The iterator . @ return A new bytes object containing the RR ' s RDATA .
@ notice Get peer ' s ID @ param c the channel @ param peer address of peer @ return peer ' s ID
@ dev Returns the total amount of tokens stored by the contract .
@ dev Repays a loan taken from a given c Token ' s market . This operation will revert if it does not succeed . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to repay .
Setters
@ notice Getter for allowance : amount spender will be allowed to spend on behalf of owner @ param owner owner of the tokens @ param spender entity allowed to spend the tokens @ return uint remaining amount spender is allowed to transfer
@ dev mint mine Coin to account when account add collateral to collateral pool , only manager contract can modify database . account user ' s account amount the mine shared amount
emitted events
@ notice Calcs primary asset class ' share of collateral at settlement . @ dev Returns ranged value between 0 and 1 multiplied by 10 ^ 12 @ param underlying Start Round Hints specify for each oracle round of the start of Live period @ param underlying End Round Hints specify for each oracle round of the end of Live period @ return split primary asset class ' share of collateral at settlement @ return underlying Start underlying value in the start of Live period @ return underlying End underlying value in the end of Live period
@ dev Gets the amount that can be withdrawn immediately with withdraw From Approved Withdrawals . @ param owner The address of the account the withdrawal was done for . @ param token The token address @ return The amount withdrawable
@ dev Emitted when the implementation is upgraded . @ param implementation Address of the new implementation .
@ dev See { IERC20 balance Of } .
@ notice Get denominator for deployer cut calculations
@ dev Gets the approved address for a token ID , or zero if no address set Reverts if the token ID does not exist . @ param token Id uint256 ID of the token to query the approval of @ return address currently approved for the given token ID
Notifies a member removal for example due to vote Out or vote Unready @ dev Called only by : Elections contract @ param member Removed is the removed committee member address @ return member Removed indicates whether the member was removed from the committee @ return removed Member Weight indicates the removed member weight @ return removed Member Certified indicates whether the member was in the certified committee
Deposits @ dev Deposits Ether or ERC20 tokens to the specified account . This function is only callable by an agent of ' from ' . A fee to the owner is paid in ETH to process the deposit . The operator is not forced to do the deposit and the user can send any fee amount . @ param from The address that deposits the funds to the exchange @ param to The account owner ' s address receiving the funds @ param token Address The address of the token , use 0x0 for Ether . @ param amount The amount of tokens to deposit @ param auxiliary Data Optional extra data used by the deposit contract
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance .
@ return the address of the owner .
@ dev Throws if called by any account other than the registry Admin .
Internal functions
@ notice This function is used to zap out of the given balancer pool @ param From Balancer Pool Address The address of balancer pool to zap out @ param To Token Contract Address The Token address which will be zapped out @ param amount The amount of token for zapout @ return returned Tokens The amount of tokens received after zap out
@ notice Constructs an Unsigned from an unscaled uint , e . g . , b 5 gets stored internally as 5 18 . @ param a uint to convert into a Fixed Point . @ return the converted Fixed Point .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Implementation of IERC777Recipient .
Withdraw for other tokens if not Tellor
@ dev Splits the slice , setting self to everything after the first occurrence of needle , and returning everything before it . If needle does not occur in self , self is set to the empty slice , and the entirety of self is returned . @ param self The slice to split . @ param needle The text to search for in self . @ return The part of self up to the first occurrence of delim .
@ dev Burn liquidity tokens in exchange for dai and fy Dai . The liquidity provider needs to have called pool . approve . @ param from Wallet providing the liquidity tokens . Must have approved the operator with pool . add Delegate ( operator ) . @ param to Wallet receiving the dai and fy Dai . @ param tokens Burned Amount of liquidity tokens being burned . @ return The amount of reserve tokens returned ( dai Tokens , fy Dai Tokens ) .
Notifies a weight change of a member @ dev Called only by : Elections contract @ param addr is the committee member address @ param weight is the updated weight of the committee member
@ notice A method to remove a bearer from a role @ param account The account to remove as a bearer . @ param role The role to remove the bearer from .
Vote out Casts a vote Out vote by the sender to the given address @ dev the transaction is sent from the guardian address @ param subject is the subject guardian address apply Vote Out Votes For ( subject , vote Stake Added , 0 , total Stake , settings ) ;
Token holders can stake their tokens using this function @ param tokens number of tokens to stake distribute the staking fee accumulated before updating the user ' s stake add pending rewards to remainder to be claimed by user later , if there is any existing stake
@ dev borrowers can user this function to swap between stable and variable borrow rate modes . @ param reserve the address of the reserve on which the user borrowed
@ dev Set a collateral debt ceiling . Amount will be converted to the correct internal precision . @ param vat The address of the Vat core accounting contract @ param ilk The ilk to update ( ex . bytes32 ( " ETH A " ) ) @ param amount The amount to set in DAI ( ex . 10m DAI amount 10000000 ) require ( amount < Math Lib . WAD ) ;
notice Delegates votes from signatory to delegatee param delegatee The address to delegate votes to param nonce The contract state required to match the signature param expiry The time at which to expire the signature param v The recovery byte of the signature param r Half of the ECDSA signature pair param s Half of the ECDSA signature pair
Inits the wallet , any address can Init it must be called using another contract
@ dev Sets admin Role as role ' s admin role .
@ dev Retrieves the value for the particular fee type . @ param fee Type type of the updated fee , can be one of [ HOME TO FOREIGN FEE , FOREIGN TO HOME FEE ] . @ param token address of the token contract for which fee should apply , 0x00 . . 00 describes the initial fee for newly created tokens . @ return fee value associated with the requested fee type .
@ dev Adds addresseto whitelist . @ param beneficiary Address list to whitelist
@ dev Emitted when token Id token is transferred from from to to .
Update balance and or total supply snapshots before the values are modified . This is implemented in the before Token Transfer hook , which is executed for mint , burn , and transfer operations . mint burn transfer
@ dev PUBLIC FACING : Optionally update daily data for a smaller range to reduce gas cost for a subsequent operation @ param before Day Only update days before this day number ( optional ; 0 for current day )
Note that addresses Net Deposit does not get updated when transferring shares , since this is used for updating off chain data it doesn ' t affect the smart contract logic , but is an issue that currently exists
@ notice The event emitted when new prices are posted but the stored price is not updated due to the anchor
@ dev allow for view of balance of specified tokens
Change the price oracle contract used , in case of upgrades
@ dev Gets the underlying token for the provided DMM token . For example , sending DMM : DAI returns DAI .
Convert signed 128 . 128 fixed point number into signed 64 . 64 bit fixed point number rounding down . Revert on overflow . @ param x signed 128 . 128 bin fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Gets the 5 miners who mined the value for the specified request Id timestamp @ param request Id to look up @ param timestamp is the timestamp to look up miners for @ return the 5 miners ' addresses
SET MANAGER ONLY . Remove a reserve asset @ param set Token Instance of the Set Token @ param reserve Asset Address of the reserve asset to remove
Test coverage [ x ] Does allowance update correctly ?
@ dev Convert signed 64 . 64 fixed point number into unsigned 64 bit integer number rounding down . Revert on underflow . @ param x signed 64 . 64 bit fixed point number @ return unsigned 64 bit integer number
@ dev Unstake all token out of Rewarded Vault . @ param vault Id ID of the vault to unstake .
@ notice Initialize a new DFX token @ param account The initial account to grant all the tokens
pivate helper for approve arary of tokens spender can be Pool or Defi portals
@ notice Checks if the supplied address is able to perform transfers . @ param from The address to check against if the transfer is allowed .
@ dev Initializes the owner , admin and operator roles . @ param owner Address of the contract owner @ param initial Admins The list of addresses that are granted the admin role . Grant the admin role to the initial admins
Increase raw Collateral by a fee adjusted collateral To Add amount . Fee adjustment scales up collateral To Add by dividing it by cumulative Fee Multiplier . There is potential for this quotient to be floored , therefore raw Collateral is increased by less than expected . Because this method is usually called in conjunction with an actual addition of collateral to this contract , return the fee adjusted amount that the raw Collateral is increased by so that the caller can minimize error between collateral added and raw Collateral credited . NOTE : This return value exists only for the sake of symmetry with remove Collateral . We don ' t actually use it because we are OK if more collateral is stored in the contract than is represented by raw Total Position Collateral .
@ notice Internal function for depositing a given ERC20 asset and balance on the corresponding d Token . No value is returned , as no additional steps need to be conditionally performed after the deposit . @ param asset uint256 The ID of the asset , either Dai ( 0 ) or USDC ( 1 ) . @ param balance uint256 The amount of the asset to deposit . Note that an attempt to deposit " dust " ( i . e . very small amounts ) may result in fewer d Tokens being minted than is implied by the current exchange rate due to a lack of sufficient precision on the tokens in question . USDC deposits are also dependent on a flag being set on the Configuration Registry contract . Only perform a deposit if the balance is at least . 001 Dai or USDC . Attempt to mint the Dai balance on the d Dai Exchanger contract . Attempt to mint the USDC balance on the d UDSC contract . Log an external error if something went wrong with the attempt .
@ dev Returns the length of a null terminated bytes32 string . @ param self The value to find the length of . @ return The length of the string , from 0 to 32 .
@ notice Whether a is less than or equal to b . @ param a a uint256 . @ param b a Fixed Point . @ return True if a < b , or False .
View function to see all pending Piggy Token on frontend .
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice Sender redeems a Tokens in exchange for the underlying asset @ dev Accrues interest whether or not the operation succeeds , unless reverted @ param redeem Tokens The number of a Tokens to redeem into underlying @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ notice method to update the address which does external data validation . @ param new Validator designates the address of the new validation contract .
@ dev register a new proposal with the given parameters . Every proposal has a unique ID which is being generated by calculating keccak256 of a incremented counter . @ param num Of Choices number of voting choices @ param proposal Parameters defines the parameters of the voting machine used for this proposal @ param proposer address @ param organization address if this address is zero the msg . sender will be used as the organization address . @ return proposal ' s id .
@ dev Get total number of times rewards have been claimed for all users @ return Total number of times rewards have been claimed
@ dev Internal function that burns an amount of the token of a given account , deducting from the sender ' s allowance for said account . Uses the internal burn function . Emits an Approval event ( reflecting the reduced allowance ) . @ param account The account whose tokens will be burnt . @ param value The amount that will be burnt .
CONFIGURATIONS
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ notice This function returns already earned tokens by the staker @ return uint256 the accrued Kittie Fight Token rewards @ return uint256 the accrued Super Dao Fight Token rewards get rewards already claimed get rewards earned but yet to be claimed
@ dev Borrow funds from a given c Token ' s market . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to borrow . @ return success A boolean indicating whether or not the operation suceeded .
notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
@ nonce calls by Hegic Put Options to lock funds @ param amount Amount of funds that should be locked in an option
@ notice Events for adding and removing various roles
error message binary size optimization
@ notice Confirm channel withdrawal @ dev anyone can confirm a withdrawal intent @ param channel Id ID of the channel
@ dev See { ERC20 before Token Transfer } . Requirements : minted tokens must not cause the total supply to go over the cap .
@ dev Overrides delivery by minting tokens upon purchase . @ param beneficiary Token purchaser @ param token Amount Number of tokens to be minted
@ dev Utility function for heap Sort @ param index The index of parent node @ return lc I The index of left child
@ notice Changes the controller of the contract @ param new Controller The new controller of the contract
@ dev allows a participant to replace themselves in the vesting schedule with a new address @ param self Stored vesting from vesting contract @ param replacement Registrant new address to replace the caller with
@ notice The sender liquidates the borrowers collateral . The collateral seized is transferred to the liquidator . @ param borrower The borrower of this c Token to be liquidated @ param c Token Collateral The market in which to seize collateral from the borrower @ param repay Amount The amount of the underlying borrowed asset to repay @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Returns the number of key value pairs in the map . O ( 1 ) .
@ dev Whenever an { IERC721 } token Id token is transferred to this contract via { IERC721 safe Transfer From } by operator from from , this function is called . It must return its Solidity selector to confirm the token transfer . If any other value is returned or the interface is not implemented by the recipient , the transfer will be reverted . The selector can be obtained in Solidity with IERC721 . on ERC721Received . selector .
@ notice Implemented by jobs to show that a keeper performed work @ param keeper address of the keeper that performed the work @ param amount the amount of ETH sent to the keeper
@ dev Permanently burn tokens @ param self Stored token from token contract @ param amount Amount of tokens to burn @ return True if completed
Cumulative Locked Up Value
Update the given pool ' s ANTS allocation point . Can only be called by the owner .
Claim LP 75 % to User 20 % to Funding event 5 % to Dev Fee
Deposit LP tokens to Holy Knight for HOLY allocation . safe Token Transfer ( msg . sender , pending ) ; this condition would save some gas on harvest calls protect received tokens from moving to treasury
mints new ecto tokens , can only be called by Boo Bank contract during burns , no users or dev can call this
@ dev See IERC20 . total Supply .
@ dev See IERC20 . approve . Requirements : spender cannot be the zero address .
@ dev Returns the current ERC2612 nonce for owner . This value must be included whenever a signature is generated for { permit } . Every successful call to { permit } increases owner ' s nonce by one . This prevents a signature from being used multiple times .
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point .
@ dev Force transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Function to mint tokens @ param to The address that will receive the minted tokens . @ param amount The amount of tokens to mint . @ return A boolean that indicates if the operation was successful .
@ dev Creates amount tokens of token type id , and assigns them to account . Emits a { Transfer Single } event . Requirements : account cannot be the zero address . If account refers to a smart contract , it must implement { IERC1155Receiver on ERC1155Received } and return the acceptance magic value .
@ dev Returns the downcasted int16 from int256 , reverting on overflow ( when the input is less than smallest int16 or greater than largest int16 ) . Counterpart to Solidity ' s int16 operator . Requirements : input must fit into 16 bits Available since v3 . 1 .
@ dev Delegate call to decrease approval @ param spender spender to decrease approval for @ param subtracted Value value to subtract from approval @ param orig Sender original msg . sender on delegate contract @ return success
@ dev Checks whether a user is an operator of the contract . Since admin role can grant operator role and owner can grant admin role , we treat both admins and owner as operators ! @ param user Address Address to check whether it ' s an operator .
@ dev Calculates the collateralization ratio relative to the maximum collateralization ratio provided by the underlying asset . @ return collateralization Ratio The target absolute collateralization ratio .
@ notice Protected function that can only be called from execute Action With Atomic Batch Calls on this contract . It will attempt to perform each specified call , populating the array of results as it goes , unless a failure occurs , at which point it will revert and " return " the array of results as revert data . Otherwise , it will simply return the array upon successful completion of each call . Finally , note that this function must currently be implemented as a public function ( instead of as an external one ) due to an ABI Encoder V2 Unimplemented Feature Error . @ param calls Call [ ] A struct containing the target , value , and calldata to provide when making each call . @ return An array of structs signifying the status of each call , as well as any data returned from that call . Calls that are not executed will return empty data . If any of the calls fail , the array will be returned as revert data .
@ dev See { ERC20 mint } . Requirements : the caller must have the { Minter Role } .
Settings methods
@ dev Returns whether spender is allowed to manage token Id . Requirements : token Id must exist .
@ dev See { IERC2612 permit } . In cases where the free option is not a concern , deadline can simply be set to uint ( 1 ) , so it should be seen as an optional parameter
@ notice Allows for the beforehand calculation of the amount of the underlying asset to be withdrawn given the desired amount of shares . @ param gross Shares The amount of this gc Token shares to provide . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param withdrawal Fee The current withdrawal fee as obtained by withdrawal Fee ( ) . @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return underlying Cost The cost , in the underlying asset , to be received . @ return fee Shares The fee amount of shares being deducted .
@ notice Whether a is greater than or equal to b . @ param a a uint256 . @ param b a Fixed Point . @ return True if a > b , or False .
@ dev Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Create a new token pre hold .
@ return The growth coefficient for earning DMG while farming . Each unit represents how much DMG is earned per point
To calcuate the old staking in the new period rewards
Update reward variables of the given pool to be up to date . tsunami . mint ( devaddr , tsunami Reward . div ( 50 ) ) ;
amount : Unlocked tokens , total : Total locked tokens
@ dev Allows new owner to accept ownership of the contract .
The receiver always gets back an ERC20 ( even WETH )
@ notice Update status of a channel @ param self storage data of Celer Ledger contract @ param c the channel @ param new Status new channel status
@ notice Provides the Compound exchange rate since their last update . @ return exchange Rate The exchange rate between c Token and its underlying asset
Convert quadruple precision number into unsigned 256 bit integer number rounding towards zero . Revert on underflow . Note , that negative floating point numbers in range ( 1 . 0 . . 0 . 0 ) may be converted to unsigned integer without error , because they are rounded to zero . @ param x quadruple precision number @ return unsigned 256 bit integer number if ( exponent < 16383 ) return 0 ; require ( uint128 ( x ) < 0x80000000000000000000000000000000 ) ; require ( exponent < 16638 ) ;
@ notice The standard EIP 20 transfer event
@ notice Emitted when a minter is added by admin
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Transfer tokens from one address to another and then execute a callback on recipient . @ param from The address which you want to send tokens from @ param to The address which you want to transfer to @ param value The amount of tokens to be transferred @ return A boolean that indicates if the operation was successful .
@ param amount Number of deposit tokens to unstake withdraw . @ return The total number of distribution tokens that would be rewarded .
Invests all underlying assets into our y CRV vault . convert the entire balance not yet invested into y CRV first then deposit into the y CRV vault deposits the entire balance and also asks the vault to invest it ( public function )
@ dev Lend funds to a given c Token ' s market . This operation will revert if it does not succeed . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to lend .
@ dev Only the rewards distributor can notify about rewards
@ notice Read a single key from an authenticated source @ param source The verifiable author of the data @ param key The selector for the value to return @ return The claimed Unix timestamp for the data and the price value ( defaults to ( 0 , 0 ) )
Safe core transfer function , just in case if rounding error causes pool to not have enough COR Es . Avoids possible recursion loop proxy ?
@ notice Announces a token percent transfer before it can happen , signaling the intention to modify the porfolio distribution . @ param source Token The token address to provide the share . @ param target Token The token address to receive the share . @ param percent The percentual share to shift .
@ notice burn owned tokens @ param amount the amount of tokens to burn
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
Calculate x y rounding towards zero . Revert on overflow or when y is zero . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Removes duplicates from a given array . @ param self Storage array containing uint256 type variables
@ dev Prevent targets from sending or receiving tokens @ param targets Addresses to be frozen @ param is Frozen either to freeze it or not
@ dev enables a reserve to be used as collateral @ param reserve the address of the reserve
return the sender of this call . if the call came through our trusted forwarder , then the real sender is appended as the last 20 bytes of the msg . data . otherwise , return msg . sender should be used in the contract anywhere instead of msg . sender
@ dev xref : ROOT : erc1155 . adoc # batch operations [ Batched ] version of { burn } . Requirements : ids and amounts must have the same length .
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block First check most recent balance Next check implicit zero balance uint32 center upper ( upper lower ) 2 ;
@ notice get data about the latest round . Consumers are encouraged to check that they ' re receiving fresh data by inspecting the updated At and answered In Round return values . Consumers are encouraged to use this more fully featured method over the " legacy " latest Answer functions . Consumers are encouraged to check that they ' re receiving fresh data by inspecting the updated At and answered In Round return values . @ return round Id is the round ID for which data was retrieved @ return answer is the answer for the given round @ return started At is the timestamp when the round was started . This is 0 if the round hasn ' t been started yet . @ return updated At is the timestamp when the round last was updated ( i . e . answer was last computed ) @ return answered In Round is the round ID of the round in which the answer was computed . answered In Round may be smaller than round Id when the round timed out . answer In Round is equal to round Id when the round didn ' t time out and was completed regularly . @ dev overridden funcion to add the check Access ( ) modifier @ dev Note that for in progress rounds ( i . e . rounds that haven ' t yet received max Submissions ) answer and updated At may change between queries .
Compute b ^ ( e . w ) by splitting it into ( b ^ e ) ( b ^ 0 . w ) . Use bpowi for b ^ e and bpow K for k iterations of approximation of b ^ 0 . w
@ dev Triggers a transfer to account of the amount of Ether they are owed , according to their percentage of the total shares and their previous withdrawals .
Transfer tokens from other address Send value tokens to to on behalf of from @ param from The address of the sender @ param to The address of the recipient @ param value the amount to send require ( value < allowance [ from ] [ msg . sender ] ) ;
@ dev Add a new lp to the pool . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
event for EVM logging
@ dev Adds account to blacklist @ param account The address to blacklist
@ notice get full list of keepers in the system
Transfer tokens from other address Send value tokens to to in behalf of from @ param from the address of the sender @ param to the address of the recipient @ param value the amount to send Check allowance
@ notice Creates amount token to to . Must only be called by the owner ( Travel Agency ) .
@ dev Change the rewards Distributor only called by m Stable governor @ param rewards Distributor Address of the new distributor
@ dev Transfers amount tokens of token type id from from to to . Emits a { Transfer Single } event . Requirements : to cannot be the zero address . If the caller is not from , it must be have been approved to spend from ' s tokens via { set Approval For All } . from must have a balance of tokens of type id of at least amount . If to refers to a smart contract , it must implement { IERC1155Receiver on ERC1155Received } and return the acceptance magic value .
Redeem liquidity in c Tokens
Sell half of burned tokens , provides liquidity and locks it away forever can only be called when balance is > 1 and last lock is more than 2 hours ago bbra balance caller rewards subtract caller fee 2 % always calculate ratios of bbra eth for lp Eth Balance before swap due to price movements after selling it is likely that less than the amount of eth received will be used for locking instead of making the left over eth locked away forever we can call buy And Burn ( ) to buy back Bbra with leftover Eth only reward caller after trade to prevent any possible reentrancy check balance is still available in case LP takes more tokens than we are expecting reward caller Reward or balance Of ( this ) whichever is smallest
@ dev create specified number of tokens and transfer to destination
@ dev Mint If the Super Saiyan Token does not wrap a pre existent NFT , this call is used to mint new NF Ts , according to the permission rules provided by the Token creator . @ param amount The amount of tokens to be created . It must be greater than 1 unity . @ param object Uri The Uri to locate this new token ' s metadata .
@ dev modifier to allow actions only when the contract IS NOT paused
Calculate x ^ y assuming 0 ^ 0 is 1 , where x is signed 64 . 64 fixed point number and y is unsigned 256 bit integer number . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ param y uint256 value @ return signed 64 . 64 bit fixed point number We rely on overflow behavior here return int128 ( absolute Result ) ; return int128 ( absolute Result ) ;
@ dev get Aave Provider Address return 0x24a42f D28C976A61Df5D00D0599C34c4f90748c8 ; return 0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5 ; kovan
@ notice Used to check whether an address has the minter role @ param address EOA or contract being checked @ return bool True if the account has the role or false if it does not
@ dev Burns tokens and retuns deposited tokens or ETH value for those .
@ dev Multiplies two precise units , and then truncates by the given scale . For example , when calculating 90 % of 10e18 , ( 10e18 9e17 ) 1e18 ( 9e36 ) 1e18 9e18 @ param x Left hand input to multiplication @ param y Right hand input to multiplication @ param scale Scale unit @ return Result after multiplying the two inputs and then dividing by the shared scale unit
@ dev Returns array with owner addresses , which confirmed transaction . @ param transaction Id Transaction ID . @ return Returns array of owner addresses .
Withdraws all the asset to the vault Typically there wouldn ' t be any amount here however , it is possible because of the emergency Exit While we have the check above , we still using Safe Math below for the peace of mind ( in case something gets changed in between )
@ notice Provides the current burning withdrawal fee . This fee is applied to the amount of this g Token shares being redeemed upon withdrawal . The fee defaults to 1 % and is set to 0 % after the liquidity pool is migrated . @ return withdrawal Fee A percent value that accounts for the percentage of shares being burned at each withdrawal that be collected as fee .
@ dev GET The Double Proxy of the DFO linked to this Contract
Perform LP token migration from legacy Uniswap V2 to Sakura Swap . Take the current LP token address and return the new LP token address . Migrator should have full access to the caller ' s LP token . Return the new LP token address . XXX Migrator must have allowance access to Uniswap V2 LP tokens . Sakura Swap must mint EXACTLY the same amount of Sakura Swap LP tokens or else something bad will happen . Traditional Uniswap V2 does not do that so be careful !
@ dev restricts the permission to update the contract registry @ param only Owner Can Update Registry indicates whether or not permission is restricted to owner only change the permission to update the contract registry
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead .
@ dev simple function help track and calculate the rewards accrued between rewards windows . it uses stake Calc which is settable by admins with the STAKING role .
@ dev Checks if a module has been added to this wallet . @ param module The module to check . @ return True if the module exists ; False otherwise .
@ dev Deposits into the growth token contract . @ param cost The amount of thr growth reserve token to be deposited . @ return success A boolean indicating whether or not the action succeeded .
Imported from : https : github . com alianse777 solidity standard library blob master Math . sol @ dev Compute square root of x @ return sqrt ( x )
@ dev Integer division of two unsigned integers truncating the quotient , reverts on division by zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Mint is in constructor
@ notice Increase stake for service provider @ param increase Stake Amount amount to increase staked amount by @ return New total stake for service provider
@ dev Cleans up the answer record if all responses have been received . @ param answer Id The identifier of the answer to be deleted
@ dev Multiplies two signed integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Transfers tokens held by timelock to beneficiary . only owner can call this method as it will write new TVL metric value into the holder contract solhint disable next line not rely on time calculate amount that is possible to release
@ notice deposit amount amount of liquidity for user @ param amount the amount of liquidity to add for shares @ return success failure
returns sorted token addresses , used to handle return values from pairs sorted in this order
@ dev PUBLIC FACING : Return a current lobby member queue entry . Only needed due to limitations of the standard ABI encoder . @ param member Addr ETH address of the lobby member @ param enter Day @ param entry Index @ return 1 : Raw amount that was entered with ; 2 : Referring ETH addr ( optional ; 0x0 for no referrer )
@ dev Borrow Flashloan and Cast spells . @ param token Token Address . @ param amt Token Amount . @ param data targets & data for cast .
@ notice Get the Service Type Manager address
@ dev Withdraws from the growth token contract . @ param gross Shares The number of shares to be redeemed . @ return success A boolean indicating whether or not the action succeeded .
@ notice Event emitted when a borrow is repaid
@ dev Safely mints token Id and transfers it to to . Requirements : d token Id must not exist . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Internal function to set a token as sold . @ param origin Contract address of ERC721 contract . @ param token Id uin256 id of the token .
@ notice Event emitted when rebaser is changed
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
remove governor
@ dev Mints token Id and transfers it to to . WARNING : Usage of this method is discouraged , use { safe Mint } whenever possible Requirements : token Id must not exist . to cannot be the zero address . Emits a { Transfer } event .
@ dev Get the cover Id and claim Id of the token from the ynft contract . @ param ynft Token Id The Id of the token on the ynft contract .
@ dev Called by a pauser to unpause , returns to normal state .
@ dev Returns an URI for a given token ID Throws if the token ID does not exist . May return an empty string . @ param token Id uint256 ID of the token to query
Sets the delay between a virtual chain genesis reference time and the virtual chain creation time @ dev governance function called only by the functional manager @ dev the reference time delay allows the guardian to be ready with the virtual chain resources for the first block consensus @ param new Genesis Ref Time Delay is the delay time in seconds
Returns the current vote unready status of a subject guardian . @ dev the committee and certification data is used to check the certified and committee threshold @ param subject is the subject guardian address @ return committee is a list of the current committee members @ return weights is a list of the current committee members weight @ return certification is a list of bool indicating the committee members certification @ return votes is a list of bool indicating the members that votes the subject unready @ return subject In Committee indicates that the subject is in the committee @ return subject In Certified Committee indicates that the subject is in the certified committee
ERC20 Approve function
@ dev Updates the mint fee .
@ dev Triggers stopped state .
@ notice Updates LXL management settings . @ param manager Account that governs LXL contract settings . @ param swift Resolver Token Token to mark participants in swift resolution . @ param w ETH Standard contract reference to wrap ether . @ param MAX DURATION Time limit in seconds on token lockup default 63113904 ( 2 year ) . @ param resolution Rate Rate to determine resolution fee for locker ( e . g . , 20 5 % of remainder ) . @ param swift Resolver Token Balance Token balance required to perform swift resolution . @ param locker Terms General terms wrapping LXL .
@ dev Can by called by anyone to burn the stake of the exchange when certain conditions are fulfilled . Currently this will only burn the stake of the exchange if the exchange is in withdrawal mode .
@ dev Removes a NFT from owner . @ param token Id Which NFT we want to remove .
@ notice Tick event
@ dev Pause token
Returns the delegate address of the given address @ param addr is the address to query @ return delegation is the address the addr delegated to
Checks if a guardian is registered @ param guardian is the guardian to query @ return registered is a bool indicating a guardian address is registered
@ dev Integer division of two numbers truncating the quotient , reverts on division by zero . require ( b > 0 ) ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice Sends profits in RESERVE from the RESERVE pool to an option holder ' s address @ param option ID A specific option contract id
@ dev Prevent the token from ever being paused again
Withdraw rewards less fees
@ dev Sets the contract address for asset conversion delegation . This library converts the mining Token into the underlying Token and use the assets to back the reserve Token . See G Exchange . sol for further documentation . This method is exposed publicly . @ param exchange The address of the contract that implements the G Exchange interface .
Possible ways this could break addressed 1 ) No ageement to terms added require 2 ) Adding liquidity after generaion is over added require 3 ) Overflow from uint impossible there isnt that much ETH aviable 4 ) Depositing 0 not an issue it will just add 0 to tally eth Contributed [ msg . sender ] + msg . value ; total ETH Contributed total ETH Contributed . add ( msg . value ) ;
lina Token . burn ( msg . sender , amount ) ;
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent . To change the approve amount you first have to reduce the addresses allowance to zero by calling approve ( spender , 0 ) if it is not already 0 to mitigate the race condition described here : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729
@ notice Simulate a series of generic calls to other contracts . Signatures are not required , but all calls will be rolled back ( and calls will only be simulated up until a failing call is encountered ) . @ param calls Call [ ] A struct containing the target , value , and calldata to provide when making each call . @ return An array of structs signifying the status of each call , as well as any data returned from that call . Calls that are not executed will return empty data .
@ dev returns the product of multiplying x by y , reverts if the calculation overflows @ param x factor 1 @ param y factor 2 @ return product gas optimization
@ notice Full balance of account includes : balance of tokens account holds himself ( 0 for addresses of locking contracts ) balance of tokens locked in contracts tokens not yet claimed from distributions if ( account address ( this ) ) return 0 ;
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 . solhint disable next line avoid low level calls
@ return true if the token is revoked .
@ dev Returns true if the module is registered and enabled .
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred . Safe Math . sub will throw if there is not enough balance .
Update reward variables of the given pool to be up to date .
@ notice Burns part of the liquidity pool funds decreasing the supply of both the stakes token and this g Token shares . The amount to be burned is set via the function set Liquidity Pool Burning Rate and defaults to 0 . 5 % . After this function is called there must be a 7 day wait period before it can be called again . The purpose of this function is to burn the aproximate amount of fees collected from swaps that take place in the liquidity pool during the previous 7 day period . This function will emit a Burn Liquidity Pool Portion event upon success . This is a priviledged function restricted to the contract owner .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Get the APR for the Strategy .
@ dev Gets the token symbol @ return string representing the token symbol
@ dev Writes an integer to the buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param off The offset to write at . @ param data The data to append . @ param len The number of bytes to write ( right aligned ) . @ return The original buffer , for chaining . Memory address of the buffer data Address buffer address + off + sizeof ( buffer length ) + len Update buffer length if we extended it
CHANGE THESE VALUES FOR YOUR TOKEN make sure this function name matches the contract name above . So if you ' re token is called Tutorial Token , make sure the contract name above is also Tutorial Token instead of ERC20Token
@ notice get data about a round . Consumers are encouraged to check that they ' re receiving fresh data by inspecting the updated At and answered In Round return values . @ param round Id the round ID to retrieve the round data for @ return round Id is the round ID for which data was retrieved @ return answer is the answer for the given round @ return started At is the timestamp when the round was started . This is 0 if the round hasn ' t been started yet . @ return updated At is the timestamp when the round last was updated ( i . e . answer was last computed ) @ return answered In Round is the round ID of the round in which the answer was computed . answered In Round may be smaller than round Id when the round timed out . answered In Round is equal to round Id when the round didn ' t time out and was completed regularly . @ dev Note that for in progress rounds ( i . e . rounds that haven ' t yet received max Submissions ) answer and updated At may change between queries .
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev See { IERC721Metadata token URI } . If there is a base URI but no token URI , concatenate the token ID to the base URI .
Average dollar value of pool token
@ return The type of token this farm token is .
@ notice Checks if a module is authorised on the wallet . @ param module The module address to check . @ return true if the module is authorised , otherwise false .
@ dev GET The elements ( numerator and denominator ) useful to calculate the percentage fee to be transfered to the DFO for every Burned Eth Item
@ dev Creates a fresh new liquidity pool and deposits the initial amounts of the stakes token and the shares token . The pool if configure 50 % 50 % with a 10 % swap fee . This method is exposed publicly . @ param stakes Amount The amount of stakes token initially deposited into the pool . @ param shares Amount The amount of shares token initially deposited into the pool .
@ dev Function to set the marketplace fee percentage . @ param percentage uint256 fee to take from purchases .
Claim farming tokens function claim ( address vault ) external ;
@ notice Check if current round is initialized
Checks whether the provided collateral and num Tokens have a collateralization ratio above the global collateralization ratio .
Returns the users current multiplier level
@ notice Only Vault can mint USDP @ dev Mints ' amount ' of tokens to address ' to ' , and MUST fire the Transfer event @ param to The address of the recipient @ param amount The amount of token to be minted
@ dev lock and pause before transfer token
@ dev Hook that is called before any transfer of tokens . This includes supplying and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be supplyed for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ notice Provides the number of g Tokens that were added to this contract by the owner . @ return count The number of g Tokens that make up the portfolio .
Return reward multiplier over the given from to to block .
@ notice Get the Governance address
Wraps the coin amount in the array for interacting with the Curve protocol
@ dev Returns a positive number if other comes lexicographically after self , a negative number if it comes before , or zero if the contents of the two bytes are equal . Comparison is done per rune , on unicode codepoints . @ param self The first bytes to compare . @ param offset The offset of self . @ param len The length of self . @ param other The second bytes to compare . @ param otheroffset The offset of the other string . @ param otherlen The length of the other string . @ return The result of the comparison . Mask out irrelevant bytes and check again mask uint256 ( 1 ) ;
Provide a signal to the keeper that tend ( ) should be called . The keeper will provide the estimated gas cost that they would pay to call tend ( ) , and this function should use that estimate to make a determination if calling it is " worth it " for the keeper . This is not the only consideration into issuing this trigger , for example if the position would be negatively affected if tend ( ) is not called shortly , then this can return true even if the keeper might be " at a loss " ( keepers are always reimbursed by Yearn ) NOTE : call Cost must be priced in terms of want NOTE : this call and harvest Trigger should never return true at the same time .
@ dev Tells the mediator contract address from the other network . @ return the address of the mediator contract .
Instructs the Set Token to transfer the ERC20 token to a recipient . @ param set Token Set Token instance to invoke @ param token ERC20 token to transfer @ param to The recipient account @ param quantity The quantity to transfer
@ notice Checks whether a contract implements an ERC165 interface or not . If the result is not cached a direct lookup on the contract address is performed . If the result is not cached or the cached value is out of date , the cache MUST be updated manually by calling { update ERC165Cache } with the contract address . @ param account Address of the contract to check . @ param interface Id ERC165 interface to check . @ return True if account implements interface Id , false otherwise .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
Change the treasury address
Daily Data Update
@ notice Internal function for setting a new user signing key . Called by the initializer , by the set User Signing Key function , and by the recover function . A New User Signing Key event will also be emitted . @ param user Signing Key address The new user signing key to set on this smart wallet . Ensure that a user signing key is set on this smart wallet .
Stake LP tokens to Piggy Breeder for WPC allocation . update pool Info by pid if user ' s amount bigger than zero , transfer Piggy Token to user . if enable Claim Block after block . number , save the pending to user . pending Reward . transfer user . pending Reward if user . pending Reward > 0 , and update user . pending Reward to 0
function refund ( ) external only After ( end Time ) { require ( ! soft Cap Reached ) ; uint256 balance sold [ msg . sender ] ; require ( balance > 0 ) ; uint256 refund balance tokens Per USDT ; msg . sender . transfer ( refund ) ; delete sold [ msg . sender ] ; wei Refunded wei Refunded . add ( refund ) ; token . refund Presale ( msg . sender , balance ) ; Refunded ( msg . sender , refund ) ; }
@ dev Multiplies three exponentials , returning a new exponential .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
View function to see pending Recycles on frontend .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies on extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ notice Deposit Uniswap Liquidity tokens @ param amount LP the amount of Uniswap Liquidity tokens to be deposited @ param pair Code the Pair Code associated with the Pair Pool of which the Liquidity tokens are to be deposited @ return bool true if the deposit is successful @ dev Each new deposit of a staker makes a new deposit with Deposit Number for this staker . Deposit Number for each staker starts from 0 ( for the first deposit ) , and increment by 1 for subsequent deposits . Each deposit with a Deposit Number is associated with a Pair Code and a Batch Number . For each staker , each Batch Number in each Pair Pool associated with a Pair Code starts from 0 ( for the first deposit ) , and increment by 1 for subsequent batches each .
Admin : add ( address , n ) to list
UDONTOKEN hardcap 90000 ;
@ dev Multiplies two numbers , throws on overflow .
@ notice Return the withdraw intent info of the channel @ param c the channel to be viewed @ return receiver of the withdraw intent @ return amount of the withdraw intent @ return request Time of the withdraw intent @ return recipient Channel Id of the withdraw intent
@ dev Returns the fee pool share for a claimant . If the claimant is a transcoder , include transcoder fees as well . @ param earnings Pool Storage pointer to Earnings Pool struct @ param stake Stake of claimant @ param is Transcoder Flag indicating whether the claimant is a transcoder
only callable by owner
@ dev Increase the amount of tokens that an owner has allowed to a spender . This method should be used instead of approve ( ) to avoid the double approval vulnerability described above . @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ notice Returns the maximum amount of collateral available to withdraw @ dev Due to rounding errors the result is 1 % wei from the exact amount @ param c Coll Address Collateral we are getting the max value of @ param account Users account @ return Returns the max . collateral amount in that token return sub ( liq In Token , ( liq In Token 100 ) ) ;
@ dev This abstract method must be implemented by subcontracts in order to adjust the underlying reserve before a withdrawal takes place . The actual implementation depends on the strategy and algorithm used to handle the reserve . @ param cost The amount of the reserve token being withdrawn .
@ dev Returns the amount of tokens in existence .
@ dev Set the reward token address . @ param reward Token Address Address of the reward token
Logged when the TTL of a node changes
@ dev Gets the balance of the specified address . @ param account Address to query the balance of . @ return A uint256 representing the amount of base units owned by the specified address .
@ dev set the implementation for the admin , this needs to be in a base class else we cannot set it @ param new Impl address pf the implementation
called once by the factory at time of deployment require ( msg . sender factory , ' Uniswap V2 : FORBIDDEN ' ) ;
@ dev Join the pool by depositing currency tokens @ param amount amount of currency token to deposit first staker mints same amount deposited mint pool tokens
@ notice Grants the smart contract role to an address @ dev The sender must have the admin role @ param address EOA or contract receiving the new role
@ dev Writes up to 32 bytes to the buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param off The offset to write at . @ param data The data to append . @ param len The number of bytes to write ( left aligned ) . @ return The original buffer , for chaining . Right align data Memory address of the buffer data Address buffer address + sizeof ( buffer length ) + off + len Update buffer length if we extended it
Indicates when tokens are bought during the sale
@ dev Transfer tokens to a specified address and then execute a callback on recipient . @ param to The address to transfer to @ param value The amount to be transferred @ param data Additional data with no specified format @ return A boolean that indicates if the operation was successful .
@ dev Throws if called by any account other than the owner .
Returns 0 to indiciate unlimited quota
@ dev Incorporates the profits from growth into the reserve . Assets are converted to the underlying asset and then added to the reserve . If the amount available is below the minimum , or if the exchange contract is not set , nothing is done . Otherwise the operation is performed , limited to the maximum amount . Note that this operation will incorporate to the reserve all the growth reserve token balance including funds sent to it or left over somehow . @ return success A boolean indicating whether or not the action succeeded .
@ notice Allow the owner to update the minimum burn amount . @ param minimum Burn Amount The new min burn amount .
@ notice allows the owner to set the oracle address to use for value conversions setting the oracle Address to address ( 0 ) removes support for the token @ dev This will also call update to ensure at least one datapoint has been recorded .
calculates a percentage of tokens to hold as the fee
@ notice Set the Service Provider Factory address @ dev Only callable by Governance address @ param service Provider Factory Address address for new Service Provider Factory contract
Transfer recipient receives amount fee
@ notice Whether the price for identifier and time is available . @ dev Time must be in the past and the identifier must be supported . @ param identifier uniquely identifies the price requested . eg BTC USD ( encoded as bytes32 ) could be requested . @ param time unix timestamp for the price request . @ return bool if the DVM has resolved to a price for the given identifier and timestamp .
Returns the SECP256k1 public key associated with an ENS node . Defined in EIP 619 . @ param node The ENS node to query @ return x , y the X and Y coordinates of the curve point for the public key .
GETTERS function get Client Registrations ( address account ) external view returns ( uint256 [ ] memory ) {
@ dev Returns the admin of a proxy . Only the admin can query it . @ return The address of the current admin of the proxy . We need to manually run the static call since the getter cannot be flagged as view bytes4 ( keccak256 ( " admin ( ) " ) ) 0xf851a440
@ notice Recovers the source address which signed a message @ dev Comparing to a claimed address would add nothing , as the caller could simply perform the recover and claim that address . @ param message The data that was presumably signed @ param signature The fingerprint of the data + private key @ return The source address which signed the message , presumably
@ dev Method callable by the extension only and useful to release the control on the Eth Item , which from now on will run independently
to Eth Signed Message Hash @ dev prefix a bytes32 value with " \ x19Ethereum Signed Message : " and hash the result 32 is the length in bytes of hash , enforced by the type signature above
@ dev emitted when a flashloan is executed @ param target the address of the flash Loan Receiver @ param reserve the address of the reserve @ param amount the amount requested @ param total Fee the total fee on the amount @ param protocol Fee the part of the fee for the protocol @ param timestamp the timestamp of the action
@ notice Burns a Digitalax Garment NFT , releasing any composed 1155 tokens held by the token itseld @ dev Only the owner or an approved sender can call this method @ param token Id the token ID to burn If there are any children tokens then send them as part of the burn Transfer children to the burner Destroy token mappings Clean up designer mapping
@ dev Gets the balance of the specified address without freezing tokens . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ notice Approves C Token contract to pull underlying tokens from the DS Proxy @ param token Addr Token we are trying to approve @ param c Token Addr Address which will gain the approval
@ dev gets the reserve total borrows stable @ param reserve the reserve address @ return the total borrows stable
@ dev Returns the downcasted int128 from int256 , reverting on overflow ( when the input is less than smallest int128 or greater than largest int128 ) . Counterpart to Solidity ' s int128 operator . Requirements : input must fit into 128 bits Available since v3 . 1 .
@ dev release all available for release freezing tokens . Gas usage is not deterministic ! @ return how many tokens was released
@ notice the amount of payment yet to be withdrawn by oracles
Handler post process type . Others should not happen now .
Capture BAL tokens or any other tokens
@ notice Get the minimum staking pool of all validators @ return the minimum staking pool of all validators
To convert DAI to ETH
Perform LP token migration from legacy Uniswap V2 to Poring Swap . Take the current LP token address and return the new LP token address . Migrator should have full access to the caller ' s LP token . Return the new LP token address . XXX Migrator must have allowance access to Uniswap V2 LP tokens . Poring Swap must mint EXACTLY the same amount of Poring Swap LP tokens or else something bad will happen . Traditional Uniswap V2 does not do that so be careful !
Function to test scripts without signatures always reverts . It ' s even possible to test scripts without deployment if script deployed and dry run on a ganache if ( ! result ) { solium disable next line security no inline assembly let ptr : mload ( 0x40 ) returndatacopy ( ptr , 0 , returndatasize ) revert ( ptr , returndatasize )
@ dev Returns the keccak 256 hash of the slice . @ param self The slice to hash . @ return The hash of the slice .
@ dev Helper function to earn in all vaults .
@ dev An overridable way to retrieve the Eth2Dai Matching Market contract . @ return eth2dai Address The Eth2Dai Matching Market contract .
@ dev See { TRC20 allowance } .
Only smart contracts will be affected by this modifier ( msg . sender tx . origin ) | | then the requirement will pass ! I Controller ( controller ( ) ) . grey List ( msg . sender ) , " This smart contract has been grey listed "
@ dev Checks for uint variables in the dispute Uint Vars mapping based on the disupute Id @ param dispute Id is the dispute id ; @ param data the variable to pull from the mapping . data keccak256 ( " variable name " ) where variable name is the variables strings used to save the data in the mapping . The variables names are commented out under the dispute Uint Vars under the Dispute struct @ return uint value for the bytes32 data submitted
@ notice Initializes vault factory contract storage @ dev Used only once when vault factory is created for the first time
@ notice Total amount of tokens remaining
performs chained get Amount In calculations on any number of pairs
@ notice Update amount currently locked up for this service provider @ param service Provider address of service provider @ param updated Lockup Amount updated lock up amount
@ notice Transfers vested tokens to beneficiary .
SWAP requires the initial amount to have already been sent to the first pair
Calculate the new position unit given total notional values pre and post executing an action that changes Set Token state The intention is to make updates to the units without accidentally picking up airdropped assets as well . @ param set Token Supply Supply of Set Token in precise units ( 10 ^ 18 ) @ param pre Total Notional Total notional amount of component prior to executing action @ param post Total Notional Total notional amount of component after the executing action @ param pre Position Unit Position unit of Set Token prior to executing action @ return New position unit
@ dev pauses the Smart Contract .
@ dev Sets a new contract that implements the Underlying Token Valuator interface @ param new Underlying Token Valuator The new contract that implements the Underlying Token Valuator interface
Sets the minimum amount of CRV needed to trigger a sale .
@ notice deposit Dai and get back w Tokens @ param usd Amount amount of Dai to deposit @ return true if success
Validates passed address is included in an address set .
@ dev Transfers token Id token from from to to . WARNING : Usage of this method is discouraged , use { safe Transfer From } whenever possible . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must be owned by from . If the caller is not from , it must be approved to move this token by either { approve } or { set Approval For All } . Emits a { Transfer } event .
@ dev Transfer token for a specified address @ param from The address to transfer from . @ param to The address to transfer to . @ param value The amount to be transferred .
Refreshes the address of the other contracts the contract interacts with @ dev called by the registry contract upon an update of a contract in the registry
@ notice Calculates current exchange rate
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . Return data is optional solhint disable next line max line length
@ dev Unpauses all token transfers . See { ERC1155Pausable } and { Pausable unpause } . Requirements : the caller must have the PAUSER ROLE .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount . subtract send balanced calculate fee : update recipients balance : update distributers balance :
@ dev Allow owner to transfer all alpaca that didn ' t get adopted during presale
@ notice LXL client or provider can lock to freeze release and withdrawal of sum remainder until resolver calls resolve ( ) . @ dev lock ( ) can be called repeatedly to allow LXL parties to continue to provide context until resolution . @ param registration Registered LXL number . @ param details Context re : lock dispute .
Helper Functions There are many non compliant ERC20 tokens . . . this can handle most , adapted from Uni Swap V2 I ' m trying to make it a habit to put external calls last ( reentrancy ) You can put this in an internal function if you like . solium disable next line security no low level calls 0xa9059cbb bytes4 ( keccak256 ( " transfer From ( address , address , uint256 ) " ) ) require ( success & & ( data . length 0 | | abi . decode ( data , ( bool ) ) ) ) ;
@ dev Helper function to calculate fee pool share if the earnings pool has a separate transcoder fee pool @ param earnings Pool Storage pointer to Earnings Pool struct @ param stake Stake of claimant @ param is Transcoder Flag indicating whether the claimant is a transcoder
Sets the DMG growth coefficient to use the new parameter provided . This variable is used to define how much DMG is earned every second , for each dollar being farmed accrued .
@ dev See { IERC20 total Supply } .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ notice Transfer amount tokens from src to dst @ param src The address of the source account @ param dst The address of the destination account @ param amount The number of tokens to transfer
KEEP THIS FUNCTION IN CASE THE CONTRACT RECEIVES TOKENS !
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev returns the address of the Lending Pool Configurator proxy @ return the lending pool configurator proxy address
@ notice Validate that the total service provider balance is between the min and max stakes for all their registered services and validate direct stake for sp is above minimum @ param service Provider address of service provider
@ notice Transfer tokens from one address to another and then call on Transfer Received on receiver @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 The amount of tokens to be transferred @ param data bytes Additional data with no specified format , sent in call to to @ return true unless throwing
@ notice Transfers amount amount of an id from the from address to the to address specified @ param from Source address @ param to Target address @ param id ID of the token type @ param amount Transfered amount @ param data Additional data with no specified format , sent in call to to
@ notice Gets CDP info ( collateral , debt , price , ilk ) @ param cdp Id Id of the CDP
@ dev Flash mint fy Dai . Calls back on I Flash Minter . execute On Flash Mint ( ) @ param fy Dai Amount Amount of fy Dai to mint . @ param data User defined data to pass on to execute On Flash Mint ( )
@ notice Worked a job
Allows to withdraw from your account multiple times , up to the approved tokens .
@ dev Overrides ERC20Burnable burn From to allow unlimited transfers by Savings Module Skip decrease allowance
@ dev Multiplies two precise units , and then truncates by the full scale @ param x Left hand input to multiplication @ param y Right hand input to multiplication @ return Result after multiplying the two inputs and then dividing by the shared scale unit
@ dev Returns the contribution value and remainder from available ETH and required amount . @ param available The amount of ETH available for the contribution . @ param required Amount The amount of ETH required for the contribution . @ return taken The amount of ETH taken . @ return remainder The amount of ETH left from the contribution .
@ notice Return balance Limits Enabled @ return balance Limits Enabled
@ dev ZOS upgradable contract initialization method . It is called at the time of contract creation to invoke parent class initializers and initialize the contract ' s state variables .
@ dev Verifies that the deposits are not paused .
@ dev Hook that is called before falling back to the implementation . Can happen as part of a manual fallback call , or as part of the Solidity fallback or receive functions . If overriden should call super . before Fallback ( ) .
@ dev if there is any token stuck we will need governance support to rescue the fund
@ notice Events
@ notice withdraw balance to owner
@ dev Returns true if the contract is paused , and false otherwise .
Retrieve the stake for a stakeholder
@ dev Triggers a flash loan . The current contract will receive a call back with the loan amount and should repay it , including fees , before returning . See G Flash Borrow . sol . @ param token The reserve token to flash borrow from . @ param net Amount The amount to be borrowed without considering repay fees . @ param context Additional data to be passed to the call back . @ return success A boolean indicating whether or not the operation suceeded .
@ dev called by the owner to pause , triggers stopped state
@ dev Returns the downcasted int64 from int256 , reverting on overflow ( when the input is less than smallest int64 or greater than largest int64 ) . Counterpart to Solidity ' s int64 operator . Requirements : input must fit into 64 bits Available since v3 . 1 .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
EVENTS
@ dev Adds two numbers , throws on overflow .
Address of Uniswap Factory
force balances to match reserves address token0 token0 ; address token1 token1 ;
Update reward variables of the given pool to be up to date . sdoge . mint ( address ( this ) , sdoge Reward ) ; Marketing strategy , send SDOGE to the following contracts . Woof ! Wow ! YFI : 0x0bc529c00C6401a EF6D220BE8C6Ea1667F6Ad93e Master Chef of SUSHI : 0xc2Eda D668740f1a A35E4D8f227f B8E17dc A888Cd Master Chef of PICKLE : 0xb D17B1ce622d73b D438b9E658ac A5996dc394b0d MEME contract : 0x D5525D397898e5502075Ea5E830d8914f6F0affe sdoge . mint ( address ( 0x0bc529c00C6401a EF6D220BE8C6Ea1667F6Ad93e ) , sdoge Reward . div ( 10000 ) ) ; sdoge . mint ( address ( 0xc2Eda D668740f1a A35E4D8f227f B8E17dc A888Cd ) , sdoge Reward . div ( 10000 ) ) ; sdoge . mint ( address ( 0xb D17B1ce622d73b D438b9E658ac A5996dc394b0d ) , sdoge Reward . div ( 10000 ) ) ; sdoge . mint ( address ( 0x D5525D397898e5502075Ea5E830d8914f6F0affe ) , sdoge Reward . div ( 10000 ) ) ;
Unlocks the contract @ dev governance function called only by the migration manager or an admin @ dev typically called by the registry contract upon unlocking all managed contracts
@ dev Returns the address of the owner of the NFT . NF Ts assigned to zero address are considered invalid , and queries about them do throw . @ param token Id The identifier for an NFT . @ return Address of token Id owner .
View function to see pending BT Fs on frontend .
@ notice Allowed users are able to start procedure for changing monitor @ dev after CHANGE PERIOD needs to call confirm New Monitor to actually make a change @ param new Monitor address of new monitor
@ dev Add a supported asset to the contract , i . e . one that can be to mint OUSD . @ param asset Address of asset
@ dev Initialize function for upgradable proxy contracts . This function should be called via Proxy to initialize constants in the Proxy contract . keccak256 ( ) values are evaluated only once at the time of this function call . Hence , no need to assign hard coded values to these variables .
Opposite Count
@ dev Approve an address to spend another addresses ' tokens . @ param owner The address that owns the tokens . @ param spender The address that will spend the tokens . @ param value The number of tokens that can be spent .
@ dev Sets { burn Rate } to a value other than the initial one .
@ dev Upgrades the proxy to a new implementation . Emits an { Upgraded } event .
Accepts guardian ' s balance migration from a previous rewards contract @ dev the function may be called by any caller that approves the amounts provided for transfer @ param guardians is the list of migrated guardians @ param fees is the list of received guardian fees balance @ param total Fees is the total amount of fees migrated for all guardians in the list . Must match the sum of the fees list . @ param bootstrap is the list of received guardian bootstrap balance . @ param total Bootstrap is the total amount of bootstrap rewards migrated for all guardians in the list . Must match the sum of the bootstrap list .
@ dev Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf . @ param to operator address to set the approval @ param approved representing the status of the approval to be set
@ dev Calculate x y rounding towards zero , where x is signed 64 . 64 fixed point number and y is signed 256 bit integer number . Revert on overflow . @ param x signed 64 . 64 fixed point number @ param y signed 256 bit integer number @ return signed 256 bit integer number y y ; return int256 ( absolute Result ) ;
@ notice withdraw stuck funds
@ dev An overridable way to retrieve the GST Collector address . @ return collector The GST collector address .
@ dev Registers the contract as an implementer of the interface defined by interface Id . Support of the actual ERC165 interface is automatic and registering its interface id is not required . See { IERC165 supports Interface } . Requirements : interface Id cannot be the ERC165 invalid interface ( 0xffffffff ) .
@ notice Update minimum delegation amount @ param min Delegation Amount min new min delegation amount
@ dev Pauses all token transfers . See { ERC20Pausable } and { Pausable pause } . Requirements : the caller must have the PAUSER ROLE .
@ notice Handle the receipt of ERC1363 tokens @ dev Any ERC1363 smart contract calls this function on the recipient after a transfer or a transfer From . This function MAY throw to revert and reject the transfer . Return of other than the magic value MUST result in the transaction being reverted . Note : the token contract address is always the message sender . @ param operator address The address which called transfer And Call or transfer From And Call function @ param from address The address which are token transferred from @ param value uint256 The amount of tokens transferred @ param data bytes Additional data with no specified format @ return bytes4 ( keccak256 ( " on Transfer Received ( address , address , uint256 , bytes ) " ) ) unless throwing function on Transfer Received ( address operator , address from , uint256 value , bytes calldata data ) external returns ( bytes4 ) ;
@ dev Returns the remainder of dividing two unsigned integers , with a division by zero flag . Available since v3 . 4 .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Give the cdp ownership to a dst address .
@ dev Returns the token address that the strategy expects .
@ dev Removes a manager . @ param manager The manager to remove .
@ dev Transfer tokens from one address to another @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred Check is not needed because sub ( allowance , value ) will already throw if this condition is not met require ( value < allowance ) ;
Add a new external position from a previously untracked module . @ param set Token Set Token being updated @ param component Component position being updated @ param module Module external position is associated with @ param new Unit Position units of new external position @ param data Arbitrary data associated with the position
Safe ZEUS transfer function , just in case if rounding error causes pool to not have enough ZEU Ss .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Transfer tokens from msg . sender to another address and then call on Transfer Received on receiver @ param to address The address which you want to transfer to @ param value uint256 The amount of tokens to be transferred @ return true unless throwing
@ notice trustee will call the function to approve mint b Token @ param txid the transaction id of bitcoin @ param amount the amount to mint , 1BTC 1b BTC 1 10 18 weib BTC @ param to mint to the address
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
@ return The Address of the implementation .
@ dev Sets { burn Percentage } to a value .
@ notice allows governance to create a dispute for a given keeper @ param keeper the address in dispute
@ dev gets the reserve total borrows @ param reserve the reserve address @ return the total borrows ( stable + variable )
@ dev This function should be called as the final step of the flash loan to properly implement the repay of the loan . @ param provider The flash loan provider , either Aave or Dydx . @ param token The reserve token . @ param gross Amount The amount to be repayed including repay fees .
@ dev Returns the subtraction of two unsigned integers , reverting on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
@ dev Add new pair Pool @ dev This function can only be carreid out by the owner of this contract .
Update the given pool ' s zeus allocation point . Can only be called by the owner .
@ dev Gets mapped I Ds for child tokens
@ dev An admin function that lets the ecosystem ' s organizers deposit the underlying token around which this DMMA wraps to this contract . This is used to replenish liquidity and after interest payouts are made from the real world assets .
@ inheritdoc I Wallet
@ dev Simple c Token to token formula from Compound
@ author james foley http : github . com realisation @ notice view how much of the origin currency the target currency will take @ param origin the address of the origin @ param target the address of the target @ param target Amount the target amount @ return origin Amount the amount of target that has been swapped for the origin
Get COMP
Get total stacked amount
Withdraw partial funds , normally used with a vault withdrawal
@ notice Provides the timestamp for when the liquidity pool migration can be completed . @ return migration Unlock Time A timestamp that defines the end of the 7 day grace period for liquidity pool migration .
@ dev Add a strategy to the Vault . @ param addr Address of the strategy to add @ param target Weight Target percentage of asset allocation to strategy
@ dev Appends a byte array to the end of the buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param data The data to append . @ return buffer The original buffer . let bufptr : mload ( buf ) let buflen : mload ( bufptr ) dest : add ( add ( bufptr , buflen ) , 32 ) mstore ( bufptr , add ( buflen , mload ( data ) ) ) for ( ; len > 32 ; len 32 ) { uint mask 256 ( 32 len ) 1 ;
@ dev Get the trusted claim topics for the security token @ return Array of trusted claim topics
@ dev convert from HUSD to B Crv ( HUSD > 3Crv > DAI > B Crv ) convert to 3Crv convert 3Crv to DAI add DAI to bpool to get back B Crv
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Set the deposit paused flag to false to enable deposits .
@ dev Returns the burnrate .
@ notice sets the new admin address
View function to see pending Uni Sushi on frontend .
called to register any new actor in the system makes the ein to be a participant in the system
@ dev executes the ERC20 token ' s transfer function and reverts upon failure the main purpose of this function is to prevent a non standard ERC20 token from failing silently @ param token ERC20 token address @ param to target address @ param value transfer amount
@ dev Integer division of two numbers , rounding up and truncating the quotient Solidity only automatically asserts when dividing by 0
@ dev Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param subtracted Value The amount of tokens to decrease the allowance by .
Utilized during module initializations to check that the module is in pending state and that the Set Token is valid
Calculate binary exponent of x . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number require ( x < 0x400000000000000000 ) ; if ( x < 0x400000000000000000 ) return 0 ;
@ dev Abstracts the details of receiving a Flash Loan by decoding the extra parameters . @ param token The asset being borrowed . @ param amount The borrowed amount . @ param fee The fees to be paid along with the borrowed amount . @ param params Additional encoded parameters to be decoded . @ return success A boolean indicating whether or not the action succeeded .
Set the latest Allocator contract address . Only the owner can execute this function .
@ dev Transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
Set the latest Lockup Storage contract address . Only the owner can execute this function . NOTE : But currently , the Lockup Storage contract is not used as a stand alone because it is inherited from the Lockup contract .
@ dev Get the address of token for staking in this staking pool @ return The staking token address
@ dev Internal function to mint a new token Reverts if the given token ID already exists @ param to address the beneficiary that will own the minted token @ param token Id uint256 ID of the token to be minted
@ notice send value token to to from msg . sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev See { IERC721Enumerable total Supply } . token Owners are indexed by token Ids , so . length ( ) returns the number of token Ids
@ dev This method is overriden from G Token Base and sets up the reserve after a deposit comes along . It basically adjusts the collateralization to reflect the new increased reserve balance . This method uses the GC Delegated Reserve Manager to adjust the reserve . See GC Delegated Reserve Manager . sol . @ param cost The amount of reserve being deposited ( ignored ) . @ return success A boolean indicating whether or not the operation succeeded .
@ dev Gets the number of managers . @ return The numer of managers .
@ notice Register a sidechain by contract owner @ dev Owner can renounce Ownership if needed for this function @ param addr the sidechain contract address
@ dev Retrieves a given ERC 20 token balance for the current contract . @ param token An ERC 20 compatible token address . @ return balance The current contract balance of the given ERC 20 token .
Transfer the balance from owner ' s account to another account
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
function get Option Balances ( address user ) external view returns ( uint256 [ ] ) ;
@ dev Withdraws ETH from the Account contract . Only operators can withdraw ETH . @ param target Address Address to send the ETH to . @ param amount Amount of ETH to withdraw . Use address ( 1 ) to represent ETH .
@ dev get manager address .
@ dev Destoys amount tokens from the caller . See ERC20 . burn .
@ nonce Returns the amount of WBTC available for withdrawals @ return balance Unlocked amount
@ dev Modifier throws if called by any account other than the pending Manager .
@ dev Returns true if the slice is empty ( has a length of 0 ) . @ param self The slice to operate on . @ return True if the slice is empty , False otherwise .
@ dev Only fall back when the sender is not the admin .
Check block price user account only
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed prevent transfer to 0x0 , use burn instead
@ notice transfers the oracle ' s LINK to another address . Can only be called by the oracle ' s admin . @ param oracle is the oracle whose LINK is transferred @ param recipient is the address to send the LINK to @ param amount is the amount of LINK to send
This call is introduced to support reentrany check . The caller shall NOT have the non Reentrant modifier .
@ notice Checks if the join address is one of the Ether coll . types @ param join Addr Join address to check if it ' s dai join addr don ' t check gem ( ) it will fail if coll is weth it ' s and eth type coll
@ dev Safely transfers token Id token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked . data is additional data , it has no specified format and it is sent in call to to . This internal function is equivalent to { safe Transfer From } , and can be used to e . g . implement alternative mechanisms to perform token transfer , such as signature based . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must exist and be owned by from . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
Do common multisig verification for both eth sends and erc20token transfers @ param to Address the destination address to send an outgoing transaction @ param operation Hash see Data Formats @ param signature see Data Formats @ param expire Time the number of seconds since 1970 for which this transaction is valid @ param sequence Id the unique sequence id obtainable from get Next Sequence Id returns address that has created the signature
Only allows to withdraw non core strategy tokens ~ this is over and above normal yield
@ author james foley http : github . com realisation @ notice withdrawals amount of shell tokens from the the pool equally from the numeraire assets of the pool with no slippage @ param shells To Burn the full amount you want to withdraw from the pool which will be withdrawn from evenly amongst the numeraire assets of the pool @ return withdrawals To Happen the amonts of numeraire assets withdrawn from the pool
@ dev Returns the number of the first codepoint in the slice . @ param self The slice to operate on . @ return The number of the first codepoint in the slice . Load the rune into the MS Bs of b Check for truncated codepoints Invalid UTF 8 sequence
@ dev See { burn Percentage } .
@ dev Truncates the given exp to a whole number value . For example , truncate ( Exp { mantissa : 15 exp Scale } ) 15 Note : We are not using careful math here as we ' re performing a division that cannot fail
@ dev See { IERC777 operator Burn } . Emits { Burned } and { IERC20 Transfer } events .
decode a UQ112x112 into a uint112 by truncating after the radix point
