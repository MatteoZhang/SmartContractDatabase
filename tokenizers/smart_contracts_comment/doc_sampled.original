@ dev gets the a Token contract address for the reserve @ param reserve the reserve address @ return the address of the a Token contract
@ dev helper for sell pool in Bancor network dependse of converter version and type
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Operator interface Yield distribution step based on actual deposits ( excluding on hold ones ) should be performed from the Savings Module before other operator ' s actions On hold records can be cleared now Withdraw requests records can be cleared now one of two things should happen for the same token : deposit or withdraw simultaneous deposit and withdraw are applied to different tokens All just withdraw funds mark as claimable
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Disables the use of the specified circuit . This will stop NEW blocks from using the given circuit , blocks that were already committed can still be verified . @ param block Type The type of the block @ param block Size The number of requests handled in the block @ param block Version The block version ( i . e . which circuit version needs to be used )
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Mutative functions
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
Function to start the Game Only the owner can call this function The game can ' t be stopped after this action The game is starting
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev See { IERC20 balance Of } .
@ dev Returns the current size of the list @ return current size of the list
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Helper function to create stakes for a given address @ param address address The address the stake is being created for @ param amount uint256 The number of tokens being staked @ param lock In Duration uint256 The duration to lock the tokens for @ param data bytes optional data to include in the Stake event
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the amount of tokens in existence .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens in existence .
@ dev Mints token Id and transfers it to to . WARNING : Usage of this method is discouraged , use { safe Mint } whenever possible Requirements : token Id must not exist . to cannot be the zero address . Emits a { Transfer } event .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Gets the balance of the specified address without freezing tokens . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ return The total number of fragments .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Get the total amount of deposited token @ return uint256 total supply
The smart wallet recognizes DAI , USDC , ETH , and SAI as supported assets .
State Mutations stablecoin we want to convert to Collects crv tokens Don ' t bother voting in v1 x % is sent back to the rewards holder to be used to lock up in as ve CRV in a future date Adds liquidity to curve . fi ' s pool to get back want ( 3crv )
@ dev See { IERC20 allowance } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev from Returns B Sestimate first calculates the stddev of an array of price returns @ dev then uses that as the volatility param for the black Scholes Estimate @ param numbers uint256 [ ] array of price returns for volatility calculation @ param underlying uint256 price of the underlying asset @ param time uint256 days to expiration in years multiplied to remove decimals
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
call this when the locktime expired
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev Returns the amount of tokens in existence .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Checks if left Exp < right Exp .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev internal implementation of staking methods @ param staker address to do deposit of staking tokens @ param beneficiary address to gain credit for this stake operation @ param amount number of staking tokens to deposit
@ dev Returns the address of the current owner .
@ dev Returns the address of the current owner .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Creates amount tokens of token type id , and assigns them to account . Emits a { Transfer Single } event . Requirements : account cannot be the zero address . If to refers to a smart contract , it must implement { IERC1155Receiver on ERC1155Received } and return the acceptance magic value .
@ notice Return last Pay Resolve Deadline map of a duplex channel @ param c the channel to be viewed @ return peers ' addresses @ return last Pay Resolve Deadlines of two simplex channels
@ dev Returns whether an agent address is an agent of an account owner @ param owner The account owner . @ param agent The agent address @ return True if the agent address is an agent for the account owner , else false
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Throws if called by any account other than the owner .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
Don ' t accept ETH
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ notice blacklists a keeper from participating in the network @ param keeper the address being slashed
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice internal function to save on code size for the only Unfreezed Reserve modifier
@ dev Returns the number of NF Ts in owner ' s account .
Cumulative Locked Up Value
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev Private function to remove a token from this extension ' s token tracking data structures . This has O ( 1 ) time complexity , but alters the order of the all Tokens array . @ param token Id uint256 ID of the token to be removed from the tokens list To prevent a gap in the tokens array , we store the last token in the index of the token to delete , and then delete the last slot ( swap and pop ) . When the token to delete is the last token , the swap operation is unnecessary . However , since this occurs so rarely ( when the last minted token is burnt ) that we still do the swap here to avoid the gas cost of adding an ' if ' statement ( like in remove Token From Owner Enumeration ) all Tokens [ token Index ] last Token Id ; all Tokens Index [ last Token Id ] token Index ; This also deletes the contents at the last position of the array all Tokens . length ;
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies on extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Allows the current owner to transfer control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Get the i th config , according to the order they were passed in originally @ param i The index of the config to get @ return The config object
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
naps stuff
@ notice Helper method to return all the subscribed CD Ps @ return List of all subscribers
@ return true if msg . sender is the owner of the contract .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ notice Symbol of the collateral split @ dev Should be resolved through Collateral Split Registry contract @ return collateral split specification symbol
@ dev See { IERC20 total Supply } .
@ dev Function to check the amount of tokens that an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
Updates a manager address and emits a corresponding event @ dev governance function called only by the registry Admin @ dev the managers list is a flexible list of role to the manager ' s address @ param role is the managers ' role name , for example " functional Manager " @ param manager is the manager updated address
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ notice EIP20 Approval event
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev See { IERC20 balance Of } .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Getter function since constants can ' t be read directly from libraries .
@ dev Performs a delegatecall and returns whatever the delegatecall returned ( entire context execution will return ! ) @ param dst Destination address to perform the delegatecall @ param calldata Calldata for the delegatecall revert instead of invalid ( ) bc if the underlying call failed with invalid ( ) it already wasted gas . if the call returned error data , forward it
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot Equivalent to contains ( set , value ) To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the address of the current owner .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ notice Apply credit to a job
@ notice Internal method that preforms a buy on 0x on chain @ dev Usefull for other DFS contract to integrate for exchanging @ param ex Data Exchange data struct @ return ( address , uint ) Address of the wrapper used and src Amount if selling eth , convert to weth fallback to desired wrapper if 0x failed if anything is left in weth , pull it to user as eth
Logs when a user is registered in the system for vesting
@ dev Lock the user ' s tokens @ param of user ' s address .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ return the time when the 5M BIDS are released .
@ notice Provides the total amount of the underlying asset ( or equivalent ) this contract is currently borrowing on Compound . @ return borrowing Reserve Underlying The underlying asset borrowing balance on Compound .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens owned by account .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ notice Called by the admin to update the implementation of the delegator @ param implementation The address of the new implementation for delegation @ param allow Resign Flag to indicate whether to call resign Implementation on the old implementation @ param become Implementation Data The encoded bytes data to be passed to become Implementation
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Emitted when owner enables approved to manage the token Id token .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev See { IERC721Metadata token URI } . If there is no base URI , return the token URI . If both are set , concatenate the base URI and token URI ( via abi . encode Packed ) . If there is a base URI but no token URI , concatenate the token ID to the base URI .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
encode a uint112 as a UQ112x112
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Called by a participant who wishes to update its properties
@ notice Delegates votes from signatory to delegatee @ param delegatee The address to delegate votes to @ param nonce The contract state required to match the signature @ param expiry The time at which to expire the signature @ param v The recovery byte of the signature @ param r Half of the ECDSA signature pair @ param s Half of the ECDSA signature pair
@ dev Returns the name of the token .
@ dev Emitted when the pause is lifted by a pauser ( account ) .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Update service provider lockup duration
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ notice Mints new tokens , increasing total Supply , init Supply , and a users balance . @ dev Limited to only Minter modifier
@ dev emergency function to change beneficiary addresses if they pull a bozo and lose or compromise keys before the release time has been reached .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Destroys amount tokens from account , reducing the total supply . Emits a Transfer event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns true if account has been granted role .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev GET The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 Eth Items .
@ dev Returns the amount of tokens owned by account .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
Authorises a controller , who can register and renew domains .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . This method is included for ERC20 compatibility . increase Allowance and decrease Allowance should be used instead . Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance if they are both greater than zero if a transfer transaction is mined before the later approve ( ) call is mined . @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev Returns the name of the token .
Returns the redeem premium percentage . Virtual function that can be overridden in future versions of the module and can contain arbitrary logic to calculate the redemption premium .
@ notice Provides the timestamp for when the liquidity pool migration can be completed . @ return migration Unlock Time A timestamp that defines the end of the 7 day grace period for liquidity pool migration .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Multiplies two unsigned integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
Returns the list of contract addresses managed by the registry @ dev Managed contracts are updated on changes in the registry contracts addresses @ return addrs is the list of managed contracts
Target farming token of this strategy .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the amount of tokens owned by account .
Sets the vote unready threshold @ dev governance function called only by the functional manager @ param vote Unready Percent Mille Threshold is the minimum threshold in percent mille ( 0 100 , 000 )
@ dev Returns the name of the token .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the amount of tokens in existence .
multiply a UQ112x112 by a uint , returning a UQ144x112 reverts on overflow
@ notice send value token to to from from on the condition it is approved by from @ param from The address of the sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
Any user can transfer to another user .
Transfers the guardian bootstrap balance to their account @ dev One may withdraw for another guardian @ param guardian is the guardian address
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Triggers a flash loan on Dydx and , if unsuccessful , on Aave . The current contract will receive a call back with the loan amount and should repay it , including fees , before returning . See G Flash Borrow . sol . @ param token The reserve token to flash borrow from . @ param net Amount The amount to be borrowed without considering repay fees . @ param context Additional data to be passed to the call back . @ return success A boolean indicating whether or not the operation suceeded .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC721 approve } .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
deposit reverse ( net ) : price reserve supply gross net 0 . 99 # fee is assumed to be 1 % for simplicity cost gross price fee gross net return cost , fee
@ dev returns cap of tokens
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice Emitted when implementation is changed
@ dev See { IERC721Metadata symbol } .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
Returns the genesis reference time delay @ return genesis Ref Time Delay is the delay time in seconds
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Throws if called by any account other than the owner .
Returns the vote unready threshold @ return vote Unready Percent Mille Threshold is the minimum threshold in percent mille
@ notice Removes a party member from the calling contract . @ dev msg . sender will be used to determine the contract that this party is removed from . @ param party Address address to be removed from the calling contract . Index of the current location of the contract to remove . Store the last contract ' s address to update the lookup map . Swap the contract to be removed with the last contract . Update the lookup index with the new location . Pop the last contract from the array and update the lookup map .
Delete tokens only Owner function instead burn
@ dev Returns the largest of two numbers .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
INTERNAL FUNCTIONS
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ notice Called in the context of DS Proxy to authorize an address @ param contract Addr Address which will be authorized
@ notice Checks if a given account holds the Minter role . @ param account The address which is checked for the Minter role . @ return bool True if the provided account is a Minter .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Calls the function with selector 0x01ffc9a7 ( ERC165 ) and suppresses throw @ param account The address of the contract to query for support of an interface @ param interface Id The interface identifier , as specified in ERC 165 @ return success true if the STATICCALL succeeded , false otherwise @ return result true if the STATICCALL succeeded and the contract at account indicates support of the interface with identifier interface Id , false otherwise
@ dev Returns the amount of tokens in existence .
@ dev Emitted when the primary contract changes .
@ dev Returns the amount of tokens in existence .
@ dev Gives permission to to to transfer token Id token to another account . The approval is cleared when the token is transferred . Only a single account can be approved at a time , so approving the zero address clears previous approvals . Requirements : The caller must own the token or be an approved operator . token Id must exist . Emits an { Approval } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Update overall states of a duplex channel @ param self storage data of Celer Ledger contract @ param channel Id the channel ID
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the largest of two numbers .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Get the total number of tokens in circulation @ return The supply of tokens
@ dev Multiplies two numbers , throws on overflow .
@ dev Returns the amount of tokens in existence .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the total supply of the given token id @ param object Id the id of the token whose availability you want to know
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Throws if called by any account other than the Governor .
@ dev Simple c Token to token formula from Compound
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Subtracts two unsigned integers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Affects the reward rate . notify Reward Amount ( initreward ) ;
@ dev Adds two signed integers , reverts on overflow .
@ notice Sender supplies assets into the market and receives c Tokens in exchange @ dev Accrues interest whether or not the operation succeeds , unless reverted @ param mint Amount The amount of the underlying asset to supply @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
burnable
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev fallback implementation . Extracted to enable manual triggering .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev See { IERC1155 set Approval For All } .
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
Update dev address by the previous dev .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev returns if an account is a stakeholder and holds a staked position .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Withdraw partial funds , normally used with a vault withdrawal require ( vault ! address ( 0 ) , " ! vault " ) ;
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
self explanatory
@ notice Method for updating max children a token can hold @ dev Only admin @ param max Children Per Token uint256 the max children a token can hold
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns a DNS format name at the specified offset of self . @ param self The byte array to read a name from . @ param offset The offset to start reading at . @ return The name .
@ dev mint tokens . @ param amount amount of token to mint @ param beneficiary beneficiary address @ return bool which represents a success
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
solhint disable previous line no empty blocks
@ dev Multiply an Exp by a scalar , then truncate to return an unsigned integer .
Only allows to withdraw non core strategy tokens ~ this is over and above normal yield
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the total supply of the given token id @ param object Id the id of the token whose availability you want to know
@ dev Returns the address of the current owner .
@ dev See { IERC20 balance Of } .
@ dev Returns true if the value is in the set . O ( 1 ) .
Get the maximum LTV by the loan .
@ notice Event emitted when tokens are redeemed
@ dev Returns the smallest of two numbers .
@ dev Adds two numbers , reverts on overflow .
@ dev Grants or revokes permission to operator to transfer the caller ' s tokens , according to approved , Emits an { Approval For All } event . Requirements : operator cannot be the caller .
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
Only allows to withdraw non core strategy tokens ~ this is over and above normal yield This contract should never have value in it , but just incase since this is a public call
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Converts a given amount of the growth reserve token to the underlying token using the external exchange contract . Both amounts are deducted and credited , respectively , from the current contract . @ param input Amount The amount to be converted .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Modifier to use in the initializer function of a contract .
Set token offering to approve allowance for offering contract to distribute tokens @ param offering Addr Address of token offering contract @ param amount For Sale Amount of tokens for sale , set 0 to max out
@ dev Initializes the data structure . This method is exposed publicly . Note that the underlying borrowing token must match the growth reserve token given that funds borrowed will be reinvested in the provided growth token ( g Token ) . @ param reserve Token The ERC 20 token address of the reserve token ( c Token ) . @ param mining Token The ERC 20 token address to be collected from liquidity mining ( COMP ) . @ param borrow Token The ERC 20 token address of the borrow token ( c Token ) . @ param growth Token The ERC 20 token address of the growth token ( g Token ) .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Destroys amount tokens from account . amount is then deducted from the caller ' s allowance . See { burn } and { approve } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Check if an account has this role . @ return bool
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice The standard EIP 20 transfer event
@ dev helper for buying Bancor pool token by a certain converter version and converter type Bancor has 3 cases for different converter version and type
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Safe honey transfer function , just in case if rounding error causes pool to not have enough HONE Ys .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
performs chained get Amount Out calculations on any number of pairs
@ notice Performs the minting of g Token shares upon the deposit of the reserve token . The actual number of shares being minted can be calculated using the calc Deposit Shares From Cost function . In every deposit , 1 % of the shares is retained in terms of deposit fee . Half of it is immediately burned and the other half is provided to the locked liquidity pool . The funds will be pulled in by this contract , therefore they must be previously approved . @ param cost The amount of reserve token being deposited in the operation .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns true if the caller is the current owner .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev Calculate x y rounding towards zero , where x and y are unsigned 256 bit integer numbers . Revert on overflow or when y is zero . @ param x unsigned 256 bit integer number @ param y unsigned 256 bit integer number @ return unsigned 64 . 64 bit fixed point number if ( xc > 0x2 ) msb + 1 ; xl lo ; xl lo ;
@ dev Get the recovery vault for the app @ return Recovery vault address for the app Funds recovery via a vault is only available when used with a kernel return kernel ( ) . get Recovery Vault ( ) ;
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
multiply a UQ112x112 by a uint , returning a UQ144x112 reverts on overflow
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ notice Event emitted when pending Admin is accepted , which means admin is updated
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies on extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the amount of tokens in existence .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev Multiplies three exponentials , returning a new exponential .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ notice The standard EIP 20 transfer event
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Safely transfers the ownership of a given token ID to another address If the target address is a contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer , and return the magic value bytes4 ( keccak256 ( " on ERC721Received ( address , address , uint256 , bytes ) " ) ) ; otherwise , the transfer is reverted . Requires the msg . sender to be the owner , approved , or operator @ param from current owner of the token @ param to address to receive the ownership of the given token ID @ param token Id uint256 ID of the token to be transferred
@ dev Transfer tokens from one address to another @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ dev Function to check the amount of tokens that an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the element stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ notice Set the max number of concurrent In Progress proposals @ dev Only callable by self via execute Transaction @ param new Max In Progress Proposals new value for max In Progress Proposals
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ notice tries to calculate a rebase based on the configured oracle info . @ param limited passing true will limit the rebase based on the 5 % rule .
@ dev called by the owner to unpause , returns to normal state
Get the token balance for account token Owner
Set allowance for other address Allows spender to spend no more than value tokens in your behalf @ param spender The address authorized to spend @ param value the max amount they can spend
@ dev See { IERC20 balance Of } .
@ notice Update remove delegator evaluation window duration @ param duration new window duration
@ dev Disables a module
@ dev Remember that only owner can call so be careful when use on contracts generated from other contracts . @ param token Address The token contract address @ param token Amount Number of tokens to be sent
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev Emitted when a claim was added . Specification : MUST be triggered when a claim was successfully added .
@ dev Returns the amount of tokens owned by account .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev See ERC20 . mint . Requirements : the caller must have the Minter Role . equivalant number of PLOT will be transferred from sender to this contract
@ notice msg . sender approves addr to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of wei to be approved for transfer @ return Whether the approval was successful or not
@ dev Returns the amount of tokens owned by account .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ notice Do bulk transfers in one transaction .
Assumed that caller checks against available funds in vault deposit into musdc Bpt deposit into mstable pool deposit any MTA token in this contract into m Staking contract
Returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not found .
@ dev Transfers token Id from from to to . As opposed to { transfer From } , this imposes no restrictions on msg . sender . Requirements : to cannot be the zero address . token Id token must be owned by from . Emits a { Transfer } event . Clear approvals from the previous owner
Return reward multiplier over the given from to to block .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the name of the token .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the amount of tokens owned by account .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Modifier to make a function callable only when the contract is paused .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Modifier throws if called by any account other than the pending Owner .
@ inheritdoc I Geyser
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev See { IERC20 total Supply } .
@ dev Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param subtracted Value The amount of tokens to decrease the allowance by .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Emitted when the pause is lifted by account .
@ dev GET The address of the Smart Contract whose code will serve as a model for all the Eth Item ERC20Wrappers ( please see the eth item token standard for further information ) .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ notice An event thats emitted when an account changes its delegate
@ dev Multiplies two exponentials given their mantissas , returning a new exponential .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Overflow proof multiplication
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice Returns the maximum amount of collateral available to withdraw @ dev Due to rounding errors the result is 1 % wei from the exact amount @ param c Coll Address Collateral we are getting the max value of @ param account Users account @ return Returns the max . collateral amount in that token return sub ( liq In Token , ( liq In Token 100 ) ) ;
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns the amount of tokens owned by account .
deprecate current contract if favour of a new one
@ dev Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param subtracted Value The amount of tokens to decrease the allowance by .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Integer division of two numbers truncating the quotient , reverts on division by zero . require ( b > 0 ) ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the name of the token .
@ dev An overridable way to retrieve the Dai contract . @ return dai Address The Dai contract .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ notice The standard EIP 20 approval event
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev unbinds a token from the compliance contract @ param token address of the token to unbind Emits a Token Unbound event
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Divide a scalar by an Exp , then truncate to return an unsigned integer .
@ dev Throws if called by a not whitelisted contract while we do not accept contract depositor .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Draw a enft EOA only Reward reduced
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev See { IERC20 balance Of } .
Views
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ notice Symbol of the oracle iterator @ dev Should be resolved through Oracle Iterator Registry contract @ return oracle iterator symbol
@ dev Throws if called by any account other than the owner .
@ dev Returns the amount of tokens owned by account .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
checks that the address is valid
@ dev See { IERC20 allowance } .
@ notice Add reward to existing epoch or crete a new one @ param protocol Protocol for reward @ param token Reward token @ param epoch Epoch number can be 0 to create new Epoch @ param amount Amount of Reward token to deposit if ( epoch 0 ) epoch epochs Length ; if ( epoch End < block . timestamp ) epoch End block . timestamp ;
@ dev Modifier to check whether the msg . sender is the admin . If it is , it will run the function . Otherwise , it will delegate the call to the implementation .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Initializes a new buffer from an existing bytes object . Changes to the buffer may mutate the original value . @ param b The bytes object to initialize the buffer with . @ return A new buffer .
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
solhint disable previous line no empty blocks
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Gets the interest rate from the DMM token , IE DMM : DAI or DMM : USDC . @ return The current interest rate , represented using 18 decimals . Meaning , 65000000000000000 is 6 . 5 % APY or 0 . 065 .
Returns the rewards allocation activation status @ return reward Allocation Active is the activation status
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Sets the contract address for asset conversion delegation . This library converts the mining Token into the underlying Token and use the assets to back the reserve Token . See G Exchange . sol for further documentation . This method is exposed publicly . @ param exchange The address of the contract that implements the G Exchange interface .
@ dev Multiplies two numbers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ notice Allows the ERC pool contract to receive and send tokens
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Calculate geometric average of x and y , i . e . sqrt ( x y ) rounding down . Revert on overflow or in case x y is negative . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ notice An event thats emitted when an account changes its delegate
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Note that unlike { grant Role } , this function doesn ' t perform any checks on the calling account . [ WARNING ] This function should only be called from the constructor when setting up the initial roles for the system . Using this function in any other way is effectively circumventing the admin system imposed by { Access Control } .
takes raw amount of c Usdc , returns numeraire amount
@ dev returns the current committee
@ dev Updates the govenance address .
@ dev Converts a signed int256 into an unsigned uint256 . Requirements : input must be greater than or equal to 0 .
@ dev Throws if called by any account other than the owner .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Modifier to use in the initializer function of a contract .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the max value in an array . @ param self Storage array containing uint256 type variables @ return max Value The highest value in the array
@ dev Function to simply retrieve block number This exists mainly for inheriting test contracts to stub this result .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
Cumulative Locked Up Value
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the downcasted uint8 from uint256 , reverting on overflow ( when the input is greater than largest uint8 ) . Counterpart to Solidity ' s uint8 operator . Requirements : input must fit into 8 bits .
@ dev Mints token Id and transfers it to to . WARNING : Usage of this method is discouraged , use { safe Mint } whenever possible Requirements : token Id must not exist . to cannot be the zero address . Emits a { Transfer } event .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
View how much the Vault would increase this strategy ' s borrow limit , based on it ' s present performance ( since its last report ) . Can be used to determine expected Return in your strategy .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Total number of tokens in existence
@ notice Whether a is equal to b . @ param a a Fixed Point . @ param b a uint256 . @ return True if equal , or False .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the name of the token .
view functions
@ dev Throws if called by any account other than the owner .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Allows the owner to withdraw any tokens left in the contract Balance @ param self Stored vesting from vesting contract
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Set the latest Vote Times contract address . Only the owner can execute this function . NOTE : But currently , the Vote Times contract is not used .
@ dev Indicate whether the operator address is an operator of the token Holder address . @ param operator Address which may be an operator of ' token Holder ' . @ param token Holder Address of a token holder which may have the ' operator ' address as an operator . @ return ' true ' if ' operator ' is an operator of ' token Holder ' and ' false ' otherwise .
@ dev Modifier to use in the initializer function of a contract .
@ dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ notice view the current parameters of the shell @ return alpha the current alpha value @ return beta the current beta value @ return delta the current delta value @ return epsilon the current epsilon value @ return lambda the current lambda value @ return omega the current omega value
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Set of oracles that are relied upon to measure changes in the state of the world between the start and the end of the Live period @ dev Should be resolved through Oracle Registry contract @ return oracle symbols
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Transfers control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol
@ dev internal implementation of unstaking methods @ param amount number of tokens to unstake @ param gysr number of GYSR tokens applied to unstaking operation @ return number of reward tokens distributed
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev See { ERC20 before Token Transfer } . Requirements : the contract must not be paused .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the smallest of two numbers .
@ notice Emitted when borrow cap for a token is changed
@ notice Transfer tokens tokens from src to dst by spender @ dev Called by both transfer and transfer From internally @ param spender The address of the account performing the transfer @ param src The address of the source account @ param dst The address of the destination account @ param tokens The number of tokens to transfer @ return Whether or not the transfer succeeded EFFECTS & INTERACTIONS ( No safe failures beyond this point )
@ return staking token for this Geyser
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the amount of tokens owned by account .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
always push out token In ( already have )
@ dev GET The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 Eth Items . Every Eth Item will have its own address , but the code will be cloned from this one .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Validates a hash with the Wallet signature type . @ param hash Message hash that is signed . @ param signature Proof of signing . @ return magic Value bytes4 ( 0xb0671381 ) if the signature check succeeds .
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev See { IERC20 balance Of } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ notice Creates amount token to to . Must only be called by the owner ( Bartender ) .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Returns the number of tokens in owner ' s account .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ notice Checks if the account should be allowed to repay a borrow in the given market @ param c Token The market to verify the repay against @ param payer The account which would repay the asset @ param borrower The account which would borrowed the asset @ param repay Amount The amount of the underlying asset the account would repay @ return 0 if the repay is allowed , otherwise a semi opaque error code ( See Error Reporter . sol )
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ param staker address the staker who has deposited Uniswap Liquidity tokens @ param batch Number uint256 the batch number of which deposit the staker wishes to see the locked amount @ param pair Code uint256 Pair Code assocated with a Pair Pool @ return bool true if the batch with the batch Number in the pair Code of the staker is eligible for Early Bonus , false if it is not eligible . @ dev A batch needs to be locked within 7 days since contract deployment to be eligible for claiming yields .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Test coverage [ x ] Does user get the deposited amounts ? [ x ] Does user that its deposited for update correcty ? [ x ] Does the depositor get their tokens decreased requires no allowances Transfer pending tokens to user update And Pay Out Pending ( pid , deposit For ) ; user . amount user . amount . add ( amount ) ; user . reward Debt user . amount . mul ( pool . acc Core Per Share ) . div ( 1e12 ) ;
@ dev Returns the addresses that each personal stake was created for by an address @ dev These accessors functions are needed until https : github . com ethereum web3 . js issues 1241 is solved @ param address address that created the stakes @ return address [ ] array of amounts
@ dev Returns the owner of the NFT specified by token Id .
@ dev Revokes role from account . If account had been granted role , emits a { Role Revoked } event . Requirements : the caller must have role ' s admin role .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
returns a uq112x112 which represents the ratio of the numerator to the denominator equivalent to encode ( numerator ) . div ( denominator )
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ notice accrues interest and sets a new reserve factor for the protocol using set Reserve Factor Fresh @ dev Admin function to accrue interest and set a new reserve factor @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but on top of that we want to log the fact that an attempted reserve factor change failed . set Reserve Factor Fresh emits reserve factor specific logs on errors , so we don ' t need to .
Deposits
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ notice User supplies assets into the market and receives c Tokens in exchange @ dev Assumes interest has already been accrued up to the current block @ param minter The address of the account which is supplying the assets @ param mint Amount The amount of the underlying asset to supply @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) EFFECTS & INTERACTIONS ( No safe failures beyond this point )
@ dev Allows the current admin to set the admin in one tx . Useful initial deployment . @ param new Admin The address to transfer ownership to .
@ dev Returns the address of the current owner .
Returns whether the target address is a contract @ dev This function will return false if invoked during the constructor of a contract , as the code is not actually created until after the constructor finishes . @ param addr address to check @ return whether the target address is a contract XXX Currently there is no better way to check if there is a contract in an address than to check the size of the code at that address . See https : ethereum . stackexchange . com a 14016 36603 for more details about how this works . TODO Check this again before the Serenity release , because all addresses will be contracts then . solium disable next line security no inline assembly
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice function Emergency situation that requires @ notice contribution period to stop or not .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
@ dev Returns true if the caller is the current owner .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
weth > btf path
@ dev Returns a newly allocated string containing the concatenation of self and other . @ param self The first slice to concatenate . @ param other The second slice to concatenate . @ return The concatenation of the two strings .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a Transfer event .
@ dev Sets the implementation address of the proxy . @ param new Implementation Address of the new implementation .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
signer to Validator mapping
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Function to stop minting new tokens . @ return True if the operation was successful .
@ dev Returns a positive number if other comes lexicographically after self , a negative number if it comes before , or zero if the contents of the two slices are equal . Comparison is done per rune , on unicode codepoints . @ param self The first slice to compare . @ param other The second slice to compare . @ return The result of the comparison . Mask out irrelevant bytes and check again uint256 mask uint256 ( 1 ) ;
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
solhint disable previous line no empty blocks
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Transfer amount tokens from msg . sender to dst @ param dst The address of the destination account @ param amount The number of tokens to transfer
@ dev Internal function to invoke { IERC721Receiver on ERC721Received } on a target address . The call is not executed if the target address is not a contract . @ param from address representing the previous owner of the given token ID @ param to target address that will receive the tokens @ param token Id uint256 ID of the token to be transferred @ param data bytes optional data to send along with the call @ return bool whether the call correctly returned the expected magic value
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
uery to get the pending reward @ param caller address of the staker uint256 reward token second ( ( staking Rate ) . mul ( 10 21 ) ) . div ( 365 days ) ; uint256 reward ( ( users [ caller ] . active Deposit ) . mul ( total Staking Time . mul ( reward token second ) ) ) . div ( 10 23 ) ;
@ dev Calculate | x | . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Safely transfers the ownership of a given token ID to another address If the target address is a contract , it must implement on ERC721Received , which is called upon a safe transfer , and return the magic value bytes4 ( keccak256 ( " on ERC721Received ( address , address , uint256 , bytes ) " ) ) ; otherwise , the transfer is reverted . Requires the msg sender to be the owner , approved , or operator @ param from current owner of the token @ param to address to receive the ownership of the given token ID @ param token Id uint256 ID of the token to be transferred
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev check if an account has this role @ return bool
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
Transfer Function Type [ ] decode function
@ notice Get current unstake lockup duration
@ dev Internal function to determine if an address is a contract @ param addr The address being queried @ return True if addr is a contract
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Writes a new length to a byte array . Decreasing length will lead to removing the corresponding lower order bytes from the byte array . Increasing length may lead to appending adjacent in memory bytes to the end of the byte array . @ param b Bytes array to write new length to . @ param length New length of byte array .
@ dev Modifier to make a function callable only when the contract is not paused .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the smallest of two numbers .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev called by the owner to pause , triggers stopped state
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Mints liquidity with provided Dai by borrowing fy Dai with some of the Dai . Caller must have approved the proxy using controller . add Delegate ( yield Proxy ) Caller must have approved the dai transfer with dai . approve ( dai Used ) @ param dai Used amount of Dai to use to mint liquidity . @ param max FY Dai maximum amount of fy Dai to be borrowed to mint liquidity . @ return The amount of liquidity tokens minted . calculate needed fy Dai ) ; convert dai to chai and borrow needed fy Dai look at the balance of chai in dai to avoid rounding issues mint liquidity tokens
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the token collection symbol .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ notice Gets Dai amount in Vat which can be added to Cdp @ param vat Address of Vat contract @ param urn Urn of the Cdp @ param ilk Ilk of the Cdp
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Function to mint tokens @ param to The address that will receive the minted tokens . @ param amount The amount of tokens to mint . @ return A boolean that indicates if the operation was successful .
@ dev Renew hold .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Returns the current total borrows plus accrued interest @ return The total borrows with interest
@ dev Integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; Solidity automatically throws when dividing by 0 uint256 c a b ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice An event thats emitted when an account changes its delegate
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ dev See { ERC20 mint } . Requirements : the caller must have the { Minter Role } .
@ notice Updates LXL management settings . @ param manager Account that governs LXL contract settings . @ param swift Resolver Token Token to mark participants in swift resolution . @ param user Reward Token Token for LXL user rewards . @ param w ETH Standard contract reference to wrap ether . @ param MAX DURATION Time limit in seconds on token lockup default 63113904 ( 2 year ) . @ param resolution Rate Rate to determine resolution fee for locker ( e . g . , 20 5 % of remainder ) . @ param swift Resolver Token Balance Token balance required to perform swift resolution . @ param user Reward Reward amount granted to LXL users in user Reward Token . @ param locker Terms General terms wrapping LXL .
@ dev Throws if called by any account other than the owner .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev See { IERC20 balance Of } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Called by deposit ( ) , pass values to generate Volcie Token NFT with all atrributes as listed in params @ param to address who this Ethie Token NFT is minted to @ param L Paddress address of the uniswap pair contract of which the L Ps are @ param L Pamount uint256 the amount of L Ps associated with this NFT @ return uint256 ID of the LP Token NFT minted
Returns the initialization Admin address
@ notice Get the Staking address
@ notice the amount of future funding available to oracles
@ dev This function makes it easy to get the total number of reputation @ return The total number of reputation
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Returns true if the contract is paused , and false otherwise .
@ dev See { IERC20 balance Of } .
@ dev Emitted when the pause is lifted by account .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ return the token being held .
address public constant PROFIT 0x D8Ee69652E4e4838f2531732a46d1f7F584F0b7f ;
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Allows for the beforehand calculation of the c Token amount given the amount of the underlying token and an exchange rate . @ param underlying Cost The cost in terms of the c Token underlying asset . @ param exchange Rate The given exchange rate as provided by exchange Rate ( ) . @ return cost The equivalent cost in terms of c Token
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ notice Whether a is greater than b . @ param a a Fixed Point . @ param b a Fixed Point . @ return True if a > b , or False .
@ notice Operator should call this to exchange CRV to DAI revert ( add ( result , 32 ) , result ) new dai tokens will be transferred to the Vault , they will be deposited by the operator on the next round new LP tokens will be distributed automatically after the operator action
@ return the time when the tokens were released last time .
@ dev Returns the name of the token .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ return The EIP 1967 proxy admin
Withdraw tokens from Nanocore Vault .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ notice Function to initialize the contract @ param governance Address Governance proxy address
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Initializes the contract setting the deployer as the initial owner .
@ notice Throws if the sender is not the Version Manager .
@ dev Gently subtract b from a without revert Due to the use of integer arithmatic , imprecision may cause a tiny amount to be off when substracting the otherwise precise proportions .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
Safe bento transfer function , just in case if rounding error causes pool to not have enough BENT Os .
decode a UQ144x112 into a uint144 by truncating after the radix point
@ dev Receives some ETH from the Wrapped Ether contract in exchange for WETH . Note that the contract using this library function must declare a payable receive fallback function . @ param amount The amount of ETH to be wrapped in WETH . @ return success A boolean indicating whether or not the operation suceeded .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev gets freezing count @ param addr Address of freeze tokens owner .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the number of values on the set . O ( 1 ) .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Calculates the fee amount @ param amount Dai amount that is converted @ param gas Cost Used for Monitor , estimated gas cost of tx @ param owner The address that controlls the DS Proxy that owns the CDP fee can ' t go over 20 % of the whole amount
Create the contract , and sets the destination address to that of the creator
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev See IERC20 . transfer . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the admin role that controls role . See { grant Role } and { revoke Role } . To change a role ' s admin , use { set Role Admin } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev See { IERC721Enumerable token By Index } .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Finds the index of a given value in an array @ param self Storage array containing uint256 type variables @ param value The value to search for @ param is Sorted True if the array is sorted , false otherwise @ return found True if the value was found , false otherwise @ return index The index of the given value , returns 0 if found is false
@ dev See { IERC20 balance Of } .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev This emit when a users ' productivity has changed It emits with the user ' s address and the the value after the change .
@ dev Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param subtracted Value The amount of tokens to decrease the allowance by .
@ dev Gets the number of managers . @ return The numer of managers .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
Destroy tokens Remove value tokens from the system irreversibly @ param value the amount of money to burn require ( balance Of [ msg . sender ] > value ) ; balance Of [ msg . sender ] value ; total Supply value ;
Returns the settings of this contract @ return genesis Ref Time Delay is the delay time in seconds @ return minimum Initial Vc Payment is the minimum payment required for the initial subscription
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Gets the unlockable tokens of a specified address @ param of The address to query the the unlockable token count of
@ dev Borrow funds from a given c Token ' s market . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to borrow . @ return success A boolean indicating whether or not the operation suceeded .
@ dev Set a new owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Same as { get } , with a custom error message when key is not in the map .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a Transfer event with from set to the zero address . Requirements to cannot be the zero address .
Update reward variables for all pools . Be careful of gas spending !
@ dev Liquidate the given position to ETH . Send all ETH back to Bank .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Announces a token percent transfer before it can happen . @ param source Token The token address to provide the share . @ param target Token The token address to receive the share . @ param percent The percentual share to shift .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the amount of tokens owned by account .
Assisns super admint to address 0 , making it unreachable forever
@ dev mint tokens on a wallet Improved version of default mint method . Tokens can be minted to an address if only it is a verified address as per the security token . @ param to Address to mint the tokens to . @ param amount Amount of tokens to mint . This function can only be called by a wallet set as agent of the token emits a Transfer event
@ dev Allows withdrawing funds deposited to the contract in a deposit request when it was never processed by the owner within the maximum time allowed . Can be called by anyone . The deposited tokens will be sent back to the owner of the account they were deposited in . @ param owner The address of the account the withdrawal was done for . @ param token The token address
Withdraw LP tokens from Master Chef .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Sender borrows assets from the protocol to their own address @ param borrow Amount The amount of the underlying asset to borrow @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but we still want to log the fact that an attempted borrow failed borrow Fresh emits borrow specific logs on errors , so we don ' t need to
@ dev See { IERC20 total Supply } .
@ notice Returns token price in USD . @ param symbol . Asset symbol . For ex . " DAI " . @ return Price in USD with 6 decimal digits .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ notice Allows for the beforehand calculation of shares to be given burned upon withdrawing the underlying asset from the contract . @ param underlying Cost The amount of the underlying asset being withdrawn . @ param total Reserve The reserve balance as obtained by total Reserve ( ) @ param total Supply The shares supply as obtained by total Supply ( ) @ param withdrawal Fee The current withdrawl fee as obtained by withdrawal Fee ( ) @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return gross Shares The total amount of shares being deducted , including fees . @ return fee Shares The fee amount of shares being deducted .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Safely transfers token Id token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked . data is additional data , it has no specified format and it is sent in call to to . This internal function is equivalent to { safe Transfer From } , and can be used to e . g . implement alternative mechanisms to perform token transfer , such as signature based . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must exist and be owned by from . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the name of the token .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Allows a caller to sweep multiple handlers in one transaction Whitelist calls to only handlers Trigger sweep
Calculate x y rounding down . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Returns the amount of tokens in existence .
@ dev Adds a key value pair to a map , or updates the value for an existing key . O ( 1 ) . Returns true if the key was added to the map , that is if it was not already present .
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . > It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
solhint disable previous line no empty blocks
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the address of the current owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Cancels the liquidity pool migration by reseting the procedure to its original state . This method is exposed publicly . @ return migration Recipient The address of the former recipient .
@ dev Adds two unsigned integers , reverts on overflow .
@ notice an event emitted when deviation Threshold is changed
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Updates the block number of the time of DIP4 release .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Liquidates the sponsor ' s position if the caller has enough synthetic tokens to retire the position ' s outstanding tokens . Liquidations above a minimum size also reset an ongoing " slow withdrawal " ' s liveness . @ dev This method generates an ID that will uniquely identify liquidation for the sponsor . This contract must be approved to spend at least tokens Liquidated of token Currency and at least final Fee Bond of collateral Currency . @ param sponsor address of the sponsor to liquidate . @ param min Collateral Per Token abort the liquidation if the position ' s collateral per token is below this value . @ param max Collateral Per Token abort the liquidation if the position ' s collateral per token exceeds this value . @ param max Tokens To Liquidate max number of tokens to liquidate . @ param deadline abort the liquidation if the transaction is mined after this timestamp . @ return liquidation Id ID of the newly created liquidation . @ return tokens Liquidated amount of synthetic tokens removed and liquidated from the sponsor ' s position . @ return final Fee Bond amount of collateral to be posted by liquidator and returned if not disputed successfully .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
Update reward variables of the given pool to be up to date .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
@ dev Internal function to safely mint a new token . Reverts if the given token ID already exists . If the target address is a contract , it must implement on ERC721Received , which is called upon a safe transfer , and return the magic value bytes4 ( keccak256 ( " on ERC721Received ( address , address , uint256 , bytes ) " ) ) ; otherwise , the transfer is reverted . @ param to The address that will own the minted token @ param token Id uint256 ID of the token to be minted @ param data bytes data to send along with a safe transfer check
@ notice Full balance of account includes : balance of tokens account holds himself ( 0 for addresses of locking contracts ) balance of tokens locked in contracts tokens not yet claimed from distributions if ( account address ( this ) ) return 0 ;
@ notice Delegates votes from signatory to delegatee @ param delegatee The address to delegate votes to @ param nonce The contract state required to match the signature @ param expiry The time at which to expire the signature @ param v The recovery byte of the signature @ param r Half of the ECDSA signature pair @ param s Half of the ECDSA signature pair
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
Withdraw partial funds , normally used with a vault withdrawal additional protection so we don ' t burn the funds
@ dev See { IERC721 safe Transfer From } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
solhint disable previous line no empty blocks
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns true if the caller is the current owner .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev See { IERC20 allowance } .
@ dev Returns the amount of tokens in existence .
@ dev Returns the downcasted uint128 from uint256 , reverting on overflow ( when the input is greater than largest uint128 ) . Counterpart to Solidity ' s uint128 operator . Requirements : input must fit into 128 bits
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Transfers control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens in existence .
Forward ERC20 methods to upgraded contract if this one is deprecated
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
this low level function should be called from a contract which performs important safety checks ( uint112 reserve0 , uint112 reserve1 , ) get Reserves ( ) ; address token0 token0 ; address token1 token1 ; uint256 total Supply total Supply ; amount0 liquidity . mul ( balance0 ) total Supply ; amount1 liquidity . mul ( balance1 ) total Supply ; if ( fee On ) k Last uint256 ( reserve0 ) . mul ( reserve1 ) ;
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Manager fee
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the amount of tokens in existence .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Sender redeems c Tokens in exchange for a specified amount of underlying asset @ dev Accrues interest whether or not the operation succeeds , unless reverted @ param redeem Amount The amount of underlying to redeem @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Log entry upon closing time change event @ param previous Previous closing time of sale @ param current Current closing time of sale
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev registers multiple users at the same time @ param self Stored crowdsale from crowdsale contract @ param registrants addresses to register for the sale
Migrates a list of guardians from a previous guardians registration contract @ dev governance function called only by the initialization admin @ dev reads the migrated guardians data by calling get Guardian Data in the previous contract @ dev imports also the guardians ' registration time and last update @ dev emits a Guardian Data Updated for each guardian to allow tracking by tools @ param guardians To Migrate is a list of guardians ' addresses to migrate @ param previous Contract is the previous registration contract address
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Converts to absolute value , and fails on overflow .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Adds two unsigned integers , reverts on overflow .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ notice withdraw stuck funds
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Returns the address of the current owner .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
solhint disable previous line no empty blocks
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 . solhint disable next line avoid low level calls
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev See { IERC165 supports Interface } .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ inheritdoc I Staking @ dev redundant with staking Token ( ) in order to implement I Staking ( EIP 900 )
@ dev Called by a pauser to unpause , returns to normal state .
@ dev Return the number of assets suppported by the Vault .
@ dev Returns the subtraction of two unsigned integers , reverting on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
@ notice calculate current mining state if ( block Num > end Mining Block Num ) { uint ratio tad Accrued . mul ( 1e18 ) . div ( total Staked Power ) ; mining State Index mining State Index . add ( ratio ) ;
@ dev Function to check the amount of tokens than an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
Management functions callable only be Milker
@ dev Give an account access to this role .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 total Supply } .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Throws if called by any account other than the owner .
@ dev Returns true is a given subnode is available . @ param subnode The target subnode . @ return true if the subnode is available .
@ notice Provides the percentual share of a g Token in the composition of the portfolio . Note that the value returned is the desired percentual share and not the actual reserve share . @ param token The given token address . @ return percent The token percentual share of the portfolio , as configured by the owner .
@ notice Get information about pending decrease stake requests for service provider @ param service Provider address of service provider
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Sets the minimum and maximum amount of the mining token to be processed on every operation . See mining Gulp Range ( ) . This is a priviledged function restricted to the contract owner . @ param mining Min Gulp Amount The minimum amount of the mining token to be processed per deposit withdrawal . @ param mining Max Gulp Amount The maximum amount of the mining token to be processed per deposit withdrawal .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
open functions
@ dev See { IERC20 total Supply } .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do . chef is sleeping chef is cooking
@ dev Returns the amount of tokens owned by account .
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
this low level function should be called from a contract which performs important safety checks ( uint112 reserve0 , uint112 reserve1 , ) get Reserves ( ) ; { if ( amount0Out > 0 ) safe Transfer ( token0 , to , amount0Out ) ; if ( amount1Out > 0 ) safe Transfer ( token1 , to , amount1Out ) ; {
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the address of the current owner .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
Withdraws all assets from the vault . withdraw all from gauge convert the mix to WBTC , we want the entire balance we can transfer the asset to the vault
@ return adm The admin slot .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
Returns the total delegated stake @ dev delegated Stake the total stake delegated to an address that is self delegating @ dev the delegated stake of a non self delegated address is 0 @ return total Delegated Stake is the total delegated Stake of all the addresses
Returns the total rewards currently available for withdrawal . ( For calling from inside the contract )
Update reward variables for all pools . Be careful of gas spending !
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Throws if called by any account other than the owner .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender proposal . proposer proposal . flags [ 3 ] 1 ;
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Provides the percentual margins tolerable before triggering a rebalance action ( i . e . an underlying deposit or withdrawal ) . @ return liquid Rebalance Margin The liquid percentual rebalance margin , as configured by the owner . @ return portfolio Rebalance Margin The portfolio percentual rebalance margin , as configured by the owner .
basic check to return ein of the specific address
@ dev Returns true if the caller is the current owner .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the name of the token .
Withdrawal Limit Balance
@ dev Throws if called by any account other than a core
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Destroys amount tokens from account . amount is then deducted from the caller ' s allowance . See { burn } and { approve } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Sets admin Role as role ' s admin role . Emits a { Role Admin Changed } event .
@ notice Returns value of calculate the quantity to destory during transfer
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the owner of the token Id token . Requirements : token Id must exist .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ param user address of party with the balance @ param spender address of spender of parties said balance @ return Returns the remaining allowance of tokens granted to the spender from the user
@ dev Tells the address of the implementation where every call will be delegated . @ return address of the implementation to which it will be delegated
@ notice Provides the total amount of the underlying asset ( or equivalent ) this contract is currently borrowing on Compound . @ return borrowing Reserve Underlying The underlying asset borrowing balance on Compound .
@ dev Emitted when the pause is lifted by account .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Calculates the fee amount @ param amount Amount that is converted @ param user Actuall user addr not DS Proxy @ param gas Cost Ether amount of gas we are spending for tx @ param token Addr token addr . of token we are getting for the fee @ return fee Amount The amount we took for the fee fee can ' t go over 20 % of the whole amount
@ notice Creates amount token to to . Must only be called by the owner .
Update reward variables of the given pool to be up to date . city . mint ( devaddr , city Reward . div ( 20 ) ) ;
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
View function to see pending fuels on frontend .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
open functions
Returns an address effective stake The effective stake is derived from a guardian delegate stake and selfs stake @ return effective Stake is the guardian ' s effective stake
@ dev See { IERC20 allowance } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice msg . sender approves addr to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of wei to be approved for transfer @ return Whether the approval was successful or not
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ notice Converts Kybers Eth address > Weth @ param src Input address
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work .
@ dev See { IERC20 total Supply } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Set the migrator contract . Can only be called by the owner .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev check if an account has this role @ return bool
@ dev Returns the name of the token .
@ dev See { IERC20 total Supply } .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Initializes the contract setting the deployer as the initial owner .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
Ensuring an equitable public launch
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Delete a liquidation
@ dev Burns a specific amount of tokens . @ param value The amount of token to be burned . no need to require value < total Supply , since that would imply the sender ' s balance is greater than the total Supply , which should be an assertion failure
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the address of the current owner .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev See { IERC20 total Supply } .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
@ dev Returns true if the contract is paused , and false otherwise .
@ dev See { IERC20 total Supply } .
@ notice Event emitted when the reserves are added
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev See { IERC20 balance Of } .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Allows for the beforehand calculation of the c Token amount given the amount of the underlying token and an exchange rate . @ param underlying Cost The cost in terms of the c Token underlying asset . @ param exchange Rate The given exchange rate as provided by exchange Rate ( ) . @ return cost The equivalent cost in terms of c Token
Withdraw function to remove stake from the pool Users who have bought multipliers will have their accounting balances readjusted . The previous extra balance user had Calculate and set user ' s new accounting balance Subtract the withdrawn amount from the accounting balance If all tokens are withdrawn the balance will be 0 .
@ notice Address of the token being used by the staking interface @ return address The address of the ERC20 token used for staking
@ notice Checks if the join address is one of the Ether coll . types @ param join Addr Join address to check if it ' s dai join addr don ' t check gem ( ) it will fail if coll is weth it ' s and eth type coll
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Set the parameters of the market @ param market Params Set the new market params
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
Staking function which updates the user balances in the parent contract Users that have bought multipliers will have an extra balance added to their stake according to the boost multiplier . Calculate and set user ' s new accounting balance Adjust total accounting supply accordingly
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Gets the balance of the specified address without freezing tokens . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Modifier to make a function callable only when the contract is paused .
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev Creates amount tokens and assigns them to account , increasing the total supply . If a send hook is registered for account , the corresponding function will be called with operator , data and operator Data . See { IERC777Sender } and { IERC777Recipient } . Emits { Minted } and { IERC20 Transfer } events . Requirements account cannot be the zero address . if account is a contract , it must implement the { IERC777Recipient } interface .
@ dev Called by a crowdsale contract upon creation . @ param self Stored crowdsale from crowdsale contract @ param owner Address of crowdsale owner @ param sale Data Array of 3 item sets such that , in each 3 element set , 1 is timestamp , 2 is price in tokens eth at that time , 3 is address token purchase cap at that time , 0 if no address cap @ param end Time Timestamp of sale end time @ param percent Burn Percentage of extra tokens to burn @ param token Token being sold
@ notice How many tokens are not yet claimed from distributions @ param account Account to check @ return Amount of tokens available to claim
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . > Note : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens owned by account .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
Set the migrator contract . Can only be called by the owner .
@ notice Checks if Boost Repay could be triggered for the CDP @ dev Called by MCD Monitor to enforce the min max check @ param method Type of action to be called @ param user The actual address that owns the Compound position @ return Boolean if it can be called and the ratio check if cdp is subscribed check if boost and boost allowed
@ dev Returns the amount of tokens in existence .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Total supply
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
calculate trading fee
@ dev See { I Strategy V2 harvest } . require ( value Vault Master . is Vault ( vault ) , " ! vault " ) ; uint256 weth To Buy Token A weth Bal . sub ( reserved ) . div ( 2 ) ; this called by governance of vault , send directly to bank ( dont make profit )
Set the latest Vote Times contract address . Only the owner can execute this function . NOTE : But currently , the Vote Times contract is not used .
@ dev Throws if called by any account other than the owner .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Note that unlike { grant Role } , this function doesn ' t perform any checks on the calling account . [ WARNING ] This function should only be called from the constructor when setting up the initial roles for the system . Using this function in any other way is effectively circumventing the admin system imposed by { Access Control } .
@ dev Checks for uint variables in the dispute Uint Vars mapping based on the disupute Id @ param dispute Id is the dispute id ; @ param data the variable to pull from the mapping . data keccak256 ( " variable name " ) where variable name is the variables strings used to save the data in the mapping . The variables names are commented out under the dispute Uint Vars under the Dispute struct @ return uint value for the bytes32 data submitted
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev allows Tellor to read data from the address Vars mapping @ param data is the keccak256 ( " variable name " ) of the variable that is being accessed . These are examples of how the variables are saved within other functions : address Vars [ keccak256 ( " owner " ) ] address Vars [ keccak256 ( " tellor Contract " ) ] @ return address requested
@ dev Returns whether spender is allowed to manage token Id . Requirements : token Id must exist .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev See IERC20 . total Supply .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the address of the current owner .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the name of the token .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the implementer of interface Hash for account . If no such implementer is registered , returns the zero address . If interface Hash is an { IERC165 } interface id ( i . e . it ends with 28 zeroes ) , account will be queried for support of it . account being the zero address is an alias for the caller ' s address .
@ dev Returns the amount of tokens in existence .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Add fees to the earnings pool @ param earnings Pool Storage pointer to Earnings Pools struct @ param fees Amount of fees to add If the earnings pool has a separate transcoder fee pool , calculate the portion of incoming fees to put into the delegator fee pool and the portion to put into the transcoder fee pool If the earnings pool does not have a separate transcoder fee pool , put all the fees into the delegator fee pool
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev Returns an Ethereum Signed Message , created from a hash . This replicates the behavior of the https : github . com ethereum wiki wiki JSON RPC # eth sign [ eth sign ] JSON RPC method . See { recover } . 32 is the length in bytes of hash , enforced by the type signature above
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
Works like address . send but with a customizable gas limit Make sure your code is safe for reentrancy when using this function !
Functions
@ dev Returns the number of accounts that have role . Can be used together with { get Role Member } to enumerate all bearers of a role .
@ dev Transfer tokens to a specified address . @ param to The address to transfer to . @ param value The amount to be transferred . @ return True on success , false otherwise .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the addition of two unsigned integers , reverting with custom message on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the token identifier for the index th NFT assigned to owner . Sort order is not specified . It throws if index > balance Of ( owner ) or if owner is the zero address , representing invalid NF Ts . @ param owner An address where we are interested in NF Ts owned by them . @ param index A counter less than balance Of ( owner ) . @ return Token id .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Sets a new contract that implements the Underlying Token Valuator interface @ param new Underlying Token Valuator The new contract that implements the Underlying Token Valuator interface
@ dev called by the owner to pause , triggers stopped state
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns true if the caller is the current owner .
@ dev Call from . tokens To Send ( ) if the interface is registered @ param operator address operator requesting the transfer @ param from address token holder address @ param to address recipient address @ param amount uint256 amount of tokens to transfer @ param user Data bytes extra information provided by the token holder ( if any ) @ param operator Data bytes extra information provided by the operator ( if any )
@ dev See { IERC721Metadata symbol } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Converts a number to 18 decimal percision @ param join Addr Join address of the collateral @ param amount Number to be converted
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Returns true if the slice is empty ( has a length of 0 ) . @ param self The slice to operate on . @ return True if the slice is empty , False otherwise .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the name of the token .
@ notice Get the number of tokens held by the account @ param account The address of the account to get the balance of @ return The number of tokens held
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the amount of tokens owned by account .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev See { IERC20 total Supply } .
@ notice begin the bonding process for a new keeper @ param bonding the asset being bound @ param amount the amount of bonding asset being bound
Update reward vairables for all pools . Be careful of gas spending !
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the amount of tokens owned by account .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev See { IERC20 balance Of } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Divides value a by value b where rounding is towards the lesser number . ( positive values are rounded towards zero and negative values are rounded away from 0 ) .
Withdraw all funds , normally used when migrating strategies additional protection so we don ' t burn the funds
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ return The token users deposit as stake .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns true if account supports the interface defined by interface Id . Support for { IERC165 } itself is queried automatically . See { IERC165 supports Interface } . query support of both ERC165 as per the spec and support of interface Id
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev See { ERC20 mint } . Requirements : the caller must have the { Minter Role } .
@ dev Returns the amount of tokens owned by account .
@ dev Throws if called by any account other than the owner .
@ dev Returns the smallest of two numbers .
This famous algorithm is called " exponentiation by squaring " and calculates x ^ n with x as fixed point and n as regular unsigned . It ' s O ( log n ) , instead of O ( n ) for naive repeated multiplication . These facts are why it works : If n is even , then x ^ n ( x ^ 2 ) ^ ( n 2 ) . If n is odd , then x ^ n x x ^ ( n 1 ) , and applying the equation for even x gives x ^ n x ( x ^ 2 ) ^ ( ( n 1 ) 2 ) . Also , EVM division is flooring and floor [ ( n 1 ) 2 ] floor [ n 2 ] .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev called by the owner to pause , triggers stopped state
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the amount of tokens owned by account .
Controller only function for creating additional rewards from dust
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
fetches and sorts the reserves for a pair
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
Set the staking token for the contract
@ dev Modifier to make a function callable only when the contract is not paused .
create LP pair if one hasn ' t been created can be public , doesn ' t matter who calls it
@ dev Returns the integer division of two signed integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Throws if called by any account other than the owner .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev calculates the number of digits in a given number @ param number the number for which we ' re caluclating digits @ return digits the number of digits in number
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns true if the value is in the set . O ( 1 ) .
@ notice A method to distribute rewards to all stakeholders . Do reward halving Loop for all staking slots base on support stake token list Calculate stakeholder reward Add it to reward hub Add refer bonus Get 5 % bonus from user you refer to the pool Emit event 5 % of rewards will be add to pool dev address Update some pool information Minus 1 minute of the time
Pool actions , requires impersonation via delegatecall
@ dev Returns the amount of tokens in existence .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice Unbond liquidity for a pending keeper job
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens in existence .
A function used in case of strategy failure , possibly due to bug in theplatform our strategy is using , governance can stop using it quick current Strategy . exit ( ) ; timelock Type 0 ;
@ dev Returns the admin role that controls role . See { grant Role } and { revoke Role } . To change a role ' s admin , use { set Role Admin } .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev called by the owner to pause , triggers stopped state
@ dev sets new core Fund Asset NOTE : this works only for stable coins @ param coin Address New stable address
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the amount of tokens owned by account .
@ dev See { IERC20 total Supply } .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice Approve spender to transfer up to amount from src @ dev This will overwrite the approval amount for spender and is subject to issues noted [ here ] ( https : eips . ethereum . org EIPS eip 20 # approve ) @ param spender The address of the account which may transfer tokens @ param amount The number of tokens that are approved ( 2 ^ 256 1 means infinite ) @ return Whether or not the approval succeeded
@ dev gets the underlying asset balance of a user based on the corresponding a Token balance . @ param reserve the reserve address @ param user the user address @ return the underlying deposit balance of the user
solhint disable previous line no empty blocks
@ dev Modifier to make a function callable only when the contract is not paused . Requirements : The contract must not be paused .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the amount of tokens in existence .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ notice Overrides the default total reserve definition in order to account , not only for the reserve asset being kept liquid by this contract , but also sum up the reserve portions delegated to all g Tokens that make up the portfolio . @ return total Reserve The amount of the reserve token corresponding to this contract ' s worth .
@ return unit256 , uint256 the KTY and SDAO rewards in the months following the starting month until the end month , calculated based on starting month , ending month , and locked LP
@ notice Provides the total amount kept in the reserve in terms of the underlying asset . @ return total Reserve Underlying The underlying asset balance on reserve .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ notice Register a new endpoint to the account of msg . sender @ dev Transfers stake from service provider into staking pool @ param service Type type of service to register , must be valid in Service Type Manager @ param endpoint url of the service to register url of the service to register @ param stake Amount amount to stake , must be within bounds in Service Type Manager @ param delegate Owner Wallet wallet to delegate some permissions for some basic management properties @ return New service provider ID for this endpoint
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev See { IERC20 balance Of } .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Returns true if the feature is authorised for the wallet @ param wallet The target wallet . @ param feature The feature .
No rebalance implementation for lower fees and faster swaps
@ dev Adds multipled addresses to whitelist . @ param beneficiary Address list to whitelist
Tokens multisend from owner only by owner
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev called by the owner to unpause , returns to normal state
@ dev Give an account access to this role .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Constructor
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
View how much the Vault would increase this strategy ' s borrow limit , based on it ' s present performance ( since its last report ) . Can be used to determine expected Return in your strategy .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Subtracts two numbers and checks for underflow before returning . Does not throw but rather logs an Err event if there is underflow . @ param a First number @ param b Second number @ return err False normally , or true if there is underflow @ return res The difference between a and b , or 0 if there is underflow
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Registers the contract as an implementer of the interface defined by interface Id . Support of the actual ERC165 interface is automatic and registering its interface id is not required . See { IERC165 supports Interface } . Requirements : interface Id cannot be the ERC165 invalid interface ( 0xffffffff ) .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Controller only function for creating additional rewards from dust
@ dev Returns the smallest of two numbers .
Set the latest Metrics Group contract address . Only the owner can execute this function .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
pay protocol Token reward to user
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
returns sorted token addresses , used to handle return values from pairs sorted in this order
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Used later to calculate the number of confirmations needed for tx @ param required Number of sigs required @ param count Current number of sigs
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
calculates the CREATE2 address for a pair without making any external calls hex ' e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303 '
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Set Weth contract address @ dev This function can only be carreid out by the owner of this contract .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Redeem funds lent to a given c Token ' s market . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to redeem . @ return success A boolean indicating whether or not the operation suceeded .
@ dev Deposits into the growth token contract . @ param cost The amount of thr growth reserve token to be deposited . @ return success A boolean indicating whether or not the action succeeded .
@ dev Check whether an action can be performed by a sender for a particular role on this app @ param sender Sender of the call @ param role Role on this app @ param params Permission params for the role @ return Boolean indicating whether the sender has the permissions to perform the action . Always returns false if the app hasn ' t been initialized yet .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
this event is emitted when the wallet of an investor is frozen or unfrozen the event is emitted by set Address Frozen and batch Set Address Frozen functions user Address is the wallet of the investor that is concerned by the freezing status is Frozen is the freezing status of the wallet if is Frozen equals true the wallet is frozen after emission of the event if is Frozen equals false the wallet is unfrozen after emission of the event owner is the address of the agent who called the function to freeze the wallet
@ param dev Address dev address
@ dev Internal function to invoke { IERC721Receiver on ERC721Received } on a target address . The call is not executed if the target address is not a contract . This is an internal detail of the ERC721 contract and its use is deprecated . @ param from address representing the previous owner of the given token ID @ param to target address that will receive the tokens @ param token Id uint256 ID of the token to be transferred @ param data bytes optional data to send along with the call @ return bool whether the call correctly returned the expected magic value
@ return the time when the tokens are released .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See { IERC20 allowance } .
Returns the latest Address Config address .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Divides value a by value b ( result is rounded towards 0 ) .
@ dev Returns the name of the token .
Sending Functions @ notice send ether to stealth address @ param receiver receiver ' s address @ param iv initialization vector @ param x Coord ephemeral public key ( X coord ) @ param y Coord ephemeral public key ( Y coord ) @ param enc0 cipher text @ param enc1 cipher text @ param enc2 cipher text @ param mac message authentification tag
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Gets the current collateralization of the system assuming by dividing the total value of all the collateralized assets plus the value of the underlying tokens in each DMMA by the aggregate interest owed ( plus the principal ) , using the current usage of each DMMA . @ return The active collateralization of the system , as a number with 18 decimals . For example 1010000000000000000 is 101 % or 1 . 01 .
@ notice To transfer token contract ownership @ param new Owner The address of the new owner of this contract
Contract getters , return the address of a contract by calling the contract registry
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
this func need admin role . grant Role and revoke Role need admin role
@ notice Provides the current burning withdrawal fee . This fee is applied to the amount of this g Token shares being redeemed upon withdrawal . The fee defaults to 1 % and is set to 0 % after the liquidity pool is migrated . @ return withdrawal Fee A percent value that accounts for the percentage of shares being burned at each withdrawal that be collected as fee .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Note that unlike { grant Role } , this function doesn ' t perform any checks on the calling account . [ WARNING ] This function should only be called from the constructor when setting up the initial roles for the system . Using this function in any other way is effectively circumventing the admin system imposed by { Access Control } .
@ notice Get the number of tokens held by the account @ param account The address of the account to get the balance of @ return The number of tokens held
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint representing the amount owned by the passed address .
@ dev Converts a signed int256 into an unsigned uint256 . Requirements : input must be greater than or equal to 0 .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Return total bonded tokens @ return total active stake for the current round
@ dev Converts a signed int256 into an unsigned uint256 . Requirements : input must be greater than or equal to 0 .
@ dev Claims outstanding rewards for the sender . First updates outstanding reward allocation and then transfers .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the smallest of two numbers .
@ notice EIP20 Approval event
Change the treasury address
@ dev Returns the amount of tokens owned by account .
@ dev Grants or revokes permission to operator to transfer the caller ' s tokens , according to approved , Emits an { Approval For All } event . Requirements : operator cannot be the caller .
@ notice Performs the burning of g Token shares upon the withdrawal of the reserve token . The actual amount of the reserve token to be received can be calculated using the calc Withdrawal Cost From Shares function . In every withdrawal , 1 % of the shares is retained in terms of withdrawal fee . Half of it is immediately burned and the other half is provided to the locked liquidity pool . @ param gross Shares The gross amount of this g Token shares being redeemed in the operation .
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
@ dev Checks if the list is full @ return true if list is full
@ dev Returns the largest of two numbers .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
Generates the message to sign given the output destination address and amount . includes this contract ' s address and a nonce for replay protection . One option to independently verify : https : leventozturk . com engineering sha3 and select keccak the sequence should match generate Multi Sig V2 in JS
@ dev Multiplies two unsigned integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol
@ dev Returns the name of the token .
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev See { IERC20 balance Of } .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Moves the current balances ( if any ) of stakes and shares tokens to the liquidity pool . This method is exposed publicly .
@ dev Converts a given amount of the mining token to the underlying token using the external exchange contract . Both amounts are deducted and credited , respectively , from the current contract . @ param input Amount The amount to be converted .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the amount of burned tokens .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Update the given pool ' s GRIFFIN allocation point . Can only be called by the owner .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev Emitted when account grants or revokes permission to operator to transfer their tokens , according to approved .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Internal function to set the base URI for all token I Ds . It is automatically added as a prefix to the value returned in { token URI } , or to the token ID if { token URI } is empty .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Creates a new m Token using the already existing token . @ param dmm Token The token that should be added to this controller . @ param underlying Token The token that should be wrapped to create a new DMMA .
@ notice Only adding reward tokens is correctly supported now ( ! ! ! ) TODO : cleanup registered Reward Tokens if reward tokens removed
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Throws if called by any account other than the owner .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Sets total Stake and claimable Stake for an Earnings Pool @ param earnings Pool Storage pointer to Earnings Pool struct @ param stake Total stake of the transcoder during the earnings pool ' s round
@ dev Retrieves a given ERC 20 token balance for the current contract . @ param token An ERC 20 compatible token address . @ return balance The current contract balance of the given ERC 20 token .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Executed when a purchase has been validated and is ready to be executed . Doesn ' t necessarily emit send tokens . @ param beneficiary Address receiving the tokens @ param token Amount Number of tokens to be purchased
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ notice makes the access check unenforced
Update reward variables for all pools . Be careful of gas spending !
settle lender ( interest ) fee
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the amount of tokens in existence .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
Current number of pools
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Withdraw some tokens from the gauge .
@ notice Function to initialize the contract @ param governance Address Governance proxy address
@ dev Returns true if the slice is empty ( has a length of 0 ) . @ param self The slice to operate on . @ return True if the slice is empty , False otherwise .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ return Total number of locked distribution tokens .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
Calculate value in tokens the given hash credits are worth
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Divides value a by value b ( result is rounded down positive numbers toward 0 and negative away from 0 ) .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
Calculate x y rounding towards zero , where x and y are unsigned 256 bit integer numbers . Revert on overflow or when y is zero . @ param x unsigned 256 bit integer number @ param y unsigned 256 bit integer number @ return signed 64 . 64 bit fixed point number
Return reward multiplier over the given from to to block .
helper function that returns the current block timestamp within the range of uint32 , i . e . [ 0 , 2 32 1 ]
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens in existence .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ notice Sender repays a borrow belonging to borrower @ param borrower the account with the debt being payed off @ param repay Amount The amount to repay @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Set Uint value in Insta Memory Contract .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice accrues interest and sets a new reserve factor for the protocol using set Reserve Factor Fresh @ dev Admin function to accrue interest and set a new reserve factor @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but on top of that we want to log the fact that an attempted reserve factor change failed . set Reserve Factor Fresh emits reserve factor specific logs on errors , so we don ' t need to .
@ dev Function to check the amount of tokens that an owner has allowed to a spender . @ param owner The address which owns the funds . @ param spender The address which will spend the funds . @ return The number of tokens still available for the spender .
@ dev Returns the number of values on the set . O ( 1 ) .
Rescue tokens
@ dev Returns the name of the token .
@ notice EIP20 Transfer event
@ dev Provides an interface to the ratio unit @ return Ratio scale unit ( 1e8 or 1 10 8 )
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
Update reward variables of the given pool to be up to date .
@ notice Internal method that preforms a sell on 0x on chain @ dev Usefull for other DFS contract to integrate for exchanging @ param ex Data Exchange data struct @ return ( address , uint ) Address of the wrapper used and dest Amount if selling eth , convert to weth Try 0x first and then fallback on specific wrapper fallback to desired wrapper if 0x failed if anything is left in weth , pull it to user as eth
@ dev Returns the amount of tokens owned by account .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Update reward variables of the given pool to be up to date .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
Converter helper to int256
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the number of accounts that have role . Can be used together with { get Role Member } to enumerate all bearers of a role .
@ dev Check if token Amount of token can be transfered from from address to to address , initiatied by initiator address @ param from address the ether address of sender @ param to address the ether address of receiver @ param initiator ether address of the original transaction initiator @ param token Address ether address of the token contract @ param token Amount uint256 the amount of token you want to transfer @ return 0 if successful , positive integer if error occurred
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Claims rewards for a given group of epochs in all fee Handlers , distribute fees and its share to pool Master @ param epoch Group An array of epochs for which rewards are being claimed . Asc order and uniqueness is required .
Mint NFT and send those to the list of given addresses
Return reward multiplier over the given from to to block .
Setters
@ dev Sets the implementation address of the proxy . @ param new Implementation Address of the new implementation .
@ return true and 0 if now is pay day , false if now is not pay day and the time until next pay day @ dev Pay Day is the first day of each month , starting from the second month . @ dev After program ends , every day is Pay Day .
@ notice Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner @ dev external for gas optimization @ param new Owner address of new owner
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
To generate a new invite code
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice Event emitted when interest Rate Model is changed
@ dev See { max Transaction Amount } .
@ dev Transfers Governance of the contract to a new account ( new Governor ) . Can only be called by the current Governor . Must be claimed for this to complete @ param new Governor Address of the new Governor
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Emitted when the pause is lifted by account .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Destoys amount tokens from account , reducing the total supply . Emits a Transfer event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev See { IERC721Enumerable total Supply } . token Owners are indexed by token Ids , so . length ( ) returns the number of token Ids
@ notice The sender liquidates the borrowers collateral . The collateral seized is transferred to the liquidator . @ param borrower The borrower of this c Token to be liquidated @ param c Token Collateral The market in which to seize collateral from the borrower @ param repay Amount The amount of the underlying borrowed asset to repay @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but we still want to log the fact that an attempted liquidation failed accrue Interest emits logs on errors , but we still want to log the fact that an attempted liquidation failed liquidate Borrow Fresh emits borrow specific logs on errors , so we don ' t need to
@ dev Throws if called by any account other than the owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ return The result of safely multiplying x and y , interpreting the operands as fixed point decimals of a standard unit . @ dev The operands should be in the standard unit factor which will be divided out after the product of x and y is evaluated , so that product must be less than 2 256 . Unlike multiply Decimal , this function rounds the result to the nearest increment . Rounding is useful when you need to retain fidelity for small decimal numbers ( eg . small fractions or percentages ) .
@ dev Unstakes a certain amount of previously deposited tokens . User also receives their alotted number of distribution tokens . @ param amount Number of deposit tokens to unstake withdraw . @ return The total number of distribution tokens rewarded . checks Redeem from most recent stake and go backwards in time . fully redeem a past stake partially redeem a past stake Already set in update Accounting totals . last Accounting Timestamp Sec now ; 2 . Global Accounting Already set in update Accounting last Accounting Timestamp Sec now ; interactions
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Retrieves the total supply at the time snapshot Id was created .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev only to be used if you do not have minted tokens , i . e . what to change name & symbol for cotnract without assets all minted tokens will disappear
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
add governor
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
returns a uq112x112 which represents the ratio of the numerator to the denominator equivalent to encode ( numerator ) . div ( denominator )
[ Grey list ] An EOA can safely interact with the system no matter what . If you ' re using Metamask , you ' re using an EOA . Only smart contracts may be affected by this grey list . This contract will not be able to ban any EOA from the system even if an EOA is being added to the grey List , he she will still be able to interact with the whole system as if nothing happened . Only smart contracts will be affected by being added to the grey List . This grey list is only used in Vault . sol , see the code there for reference
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
View function to see pending NOV As on frontend .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the name of the token .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev This function updates AP Ion Q and the request Q when request Data or add Tip are ran @ param request Id being requested @ param tip is the tip to add if the request is not part of the request Q [ 51 ] array then add to the request Q [ 51 ] only if the payout tip is greater than the minimum ( tip ) in the request Q [ 51 ] array we have to zero out the old One if the payout is greater than the current minimum payout in the request Q [ 51 ] or if the minimum is zero then add it to the request Q array aand map its index information to the request Id and the api Uintvars else if the requestid is part of the request Q [ 51 ] then update the tip for it
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Transfers a specific NFT ( token Id ) from one account ( from ) to another ( to ) . Requirements : from , to cannot be zero . token Id must be owned by from . If the caller is not from , it must be have been allowed to move this NFT by either { approve } or { set Approval For All } .
Set a new governance address , can only be triggered by the old address
@ notice Provides the minimum and maximum amount of the gc Token Type 1 to be processed on every operation . This method applies only to gc Tokens Type 2 and is not relevant for gc Tokens Type 1 . @ return growth Min Gulp Amount The minimum amount of the gc Token Type 1 to be processed per deposit withdrawal ( always 0 ) . @ return growth Max Gulp Amount The maximum amount of the gc Token Type 1 to be processed per deposit withdrawal ( always 0 ) .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice This function is used to calculate and transfer goodwill @ param token Contract Address Token in which goodwill is deducted @ param tokens2Trade The total amount of tokens to be zapped in @ return The quantity of goodwill deducted
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Calculates settlement Fee @ param amount Option amount @ return fee Settlement fee amount
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev function to check if the crowdsale has ended @ param self Stored crowdsale from crowdsale contract @ return success
obtain the legacy vault sahres from the migration strategy
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the largest of two numbers .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ notice Triggers an approval from owner to spends @ param owner The address to approve from @ param spender The address to be approved @ param amount The number of tokens that are approved ( 2 ^ 256 1 means infinite ) @ param deadline The time at which to expire the signature @ param v The recovery byte of the signature @ param r Half of the ECDSA signature pair @ param s Half of the ECDSA signature pair
@ dev Returns the address of the current owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev change operator address @ param new Operator address of new operator
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Multiplies two int256 variables and fails on overflow . Detect overflow when multiplying MIN INT256 with 1
@ notice Removes an address from the access list @ param user The address to remove
Deletes the value of the bool type that mapped to the given key . Only the owner can execute this function .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the amount of tokens in existence .
@ dev Destroys amount tokens from account . amount is then deducted from the caller ' s allowance . See { burn } and { approve } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 balance Of } .
@ dev See { IERC20 total Supply } .
@ notice the amount of payment yet to be withdrawn by oracles
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev See { IERC20 total Supply } .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
Notifies a change in the certification of a member @ dev Called only by : Elections contract @ param addr is the committee member address @ param is Certified is the updated certification state of the member
@ notice Get the number of tokens spender is approved to spend on behalf of account @ param account The address of the account holding the funds @ param spender The address of the account spending the funds @ return The number of tokens approved
@ dev MUST return array of Component structs with underlying tokens rates for the given token . struct Component { address token ; Address of token contract string token Type ; Token type ( " ERC20 " by default ) uint256 rate ; Price per share ( 1e18 ) }
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Grants or revokes permission to operator to transfer the caller ' s tokens , according to approved , Emits an { Approval For All } event . Requirements : operator cannot be the caller .
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ dev This method is overriden from G Token Base and sets up the reserve before a withdrawal comes along . It basically calculates the the amount will be left in the reserve , in terms of c Token cost , and adjusts the collateralization leverage accordingly . This method uses the GC Leveraged Reserve Manager to adjust the reserve and this is done via flash loans . See GC Leveraged Reserve Manager ( ) . @ param cost The amount of reserve being withdrawn and that needs to be immediately liquid . @ return success A boolean indicating whether or not the operation succeeded . The operation may fail if it is not possible to recover the required liquidity ( e . g . low liquidity in the markets ) .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev See { I Strategy withdraw } .
Send the unsold tokens back to owner
Absorb any tokens that have been sent to this contract into the pool
@ dev Emitted when new Admin Role is set as role ' s admin role , replacing previous Admin Role DEFAULT ADMIN ROLE is the starting admin for all roles , despite { Role Admin Changed } not being emitted signaling this . Available since v3 . 1 .
@ dev Modifier to make a function callable only when the contract is not paused .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Convert from 18 decimals to token defined decimals . Default no conversion .
@ dev See { IERC20 total Supply } .
@ dev Returns NFT ID by its index . @ param index A counter less than total Supply ( ) . @ return Token id .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev See { IERC20 total Supply } .
@ notice withdraw stuck funds
Leave the bar . Claim back your STEAK .
@ dev Removes a key value pair from a map . O ( 1 ) . Returns true if the key was removed from the map , that is if it was present . We read and store the key ' s index to prevent multiple reads from the same storage slot if ( key Index ! 0 ) { To delete a key value pair from the entries array in O ( 1 ) , we swap the entry to delete with the last one in the array , and then remove the last entry ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the entry to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last entry to the index where the entry to delete is Update the index for the moved entry map . indexes [ last Entry . key ] to Delete Index + 1 ; Delete the slot where the moved entry was stored Delete the index for the deleted slot
@ dev Returns the smallest of two numbers .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Withdraw profit share
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the amount of tokens in existence .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Converts Kybers Eth address > Weth @ param src Input address
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Moves tokens amount from sender to recipient . Emits an Approval event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of ERC20 ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least value . the caller must have allowance for sender ' s tokens of at least amount .
@ notice The event emitted when the stored price is updated
@ notice Balance of account , which is counted for distributions It only represents already distributed balance . @ dev This function should be overloaded to include balance of tokens stored in proposals
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Approve spender to transfer tokens and then execute a callback on recipient . @ param spender The address allowed to transfer to . @ param value The amount allowed to be transferred . @ param data Additional data with no specified format . @ return A boolean that indicates if the operation was successful .
@ dev Throws if called by any account other than the owner .
Exit fees
@ dev allows admin with the STAKING role to set the Staking Contracts rewards Window which determines how long a user must wait before they can with draw in the form of a number of blocks that must pass since the users last Withdraw .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev give an account access to this role
@ dev Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol Emits an Approval event . @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ dev Returns whether the exchange is shutdown . @ return Returns true if the exchange is shutdown , else false .
solhint disable previous line no empty blocks
@ dev Reclaim ownership of a name in ENS , if you own it in the registrar .
@ dev Pauses all token transfers . See { ERC20Pausable } and { Pausable pause } . Requirements : the caller must have the PAUSER ROLE .
Returns the previous contract registry address @ dev used when the setting the contract as a new registry to assure a valid registry @ return previous Contract Registry is the previous contract registry
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens owned by account .
@ return the number of token units a buyer gets per wei .
@ dev Revoke operator role from an address . Only owner or admin can revoke operator roles . @ param account The operator address to revoke .
@ dev Returns the name of the token .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Transfer tokens from one address to another @ param to address The address which you want to transfer to @ param value uint the amount of tokens to be transferred @ return true if success
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
solhint disable previous line no empty blocks
@ notice calculate natural logarithm of x @ dev magic constant comes from ln ( 2 ) 2 ^ 128 > hex @ param x signed 64 . 64 bit fixed point number , require x > 0 @ return signed 64 . 64 bit fixed point number
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Divides two exponentials , returning a new exponential . ( a scale ) ( b scale ) ( a scale ) ( scale b ) a b , which we can scale as an Exp by calling get Exp ( a . mantissa , b . mantissa )
@ dev Returns the admin role that controls role . See { grant Role } and { revoke Role } . To change a role ' s admin , use { set Role Admin } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Check if an account has this role . @ return bool
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
ADMIN METHODS @ notice Admin function to unsubscribe a CDP @ param user The actual address that owns the Compound position
@ dev Getter function since constants can ' t be read directly from libraries .
@ dev Modifier to make a function callable only when the contract is not paused .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Hook that is called just after burning tokens . To be used i . e . if collateral stored in a different this contract needs to be transferred .
@ dev Internal function to set the base URI for all token I Ds . It is automatically added as a prefix to the value returned in { token URI } , or to the token ID if { token URI } is empty .
Withdraw accumulated yield @ param token Address address of the token asset @ required must pay yield claim fee Global stats update update the record transfer fee to the owner mint more tokens inside token contract equivalent to pending Yield
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Prepares the rebase by calling the volume oracle . get twap from uniswap v2 and save here for later ( i . e . the current price ) calls volume oracle
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Multiplies two signed integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ return Amount of FPT token on FNX the Option protocol by the given account . @ dev Implementation of Protocol Adapter interface function .
@ dev Returns total number of transactions after filers are applied . @ param pending Include pending transactions . @ param executed Include executed transactions . @ return Total number of transactions after filters are applied .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Used to initialize the protocol , mid season since the Protocol kept track of DMG balances differently on v1 .
@ notice Sets the Chainlink token address for the public network as given by the Pointer contract
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the amount of tokens in existence .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . to cannot be the zero address .
@ dev Returns the amount of tokens in existence .
@ dev Returns the amount of tokens in existence .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Fallback function . Implemented entirely in fallback .
@ dev Returns the amount of burned tokens .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
Get the token balance for account token Owner
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ notice Performs the burning of gc Token shares upon the withdrawal of the underlying asset . This function builds upon the G Token Base withdrawal function . See G Token Base . sol for further documentation . @ param gross Shares The gross amount of this gc Token shares being redeemed in the operation .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Collect accumulated reward token ( COMP ) and send to Vault .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Gets the maximum amount of debt available to generate @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP
Calculate natural exponent of x . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number require ( x < 0x400000000000000000 ) ; if ( x < 0x400000000000000000 ) return 0 ;
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ notice the version number representing the type of aggregator the proxy points to .
@ return False . This application does not support staking history .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
@ dev Returns the amount of tokens in existence .
@ dev Returns the amount of tokens in existence .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the subtraction of two unsigned integers , reverting on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
@ dev Returns true if the caller is the current owner .
@ dev Returns the address of the current owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Internal function to burn a specific token . Reverts if the token does not exist . @ param token Id uint256 ID of the token being burned
performs chained get Amount In calculations on any number of pairs
update dev mining rate
Sets marketing address ( where 1 % is deposited ) Only owner can modify this ( Mr Banker )
@ dev Returns the amount of tokens in existence .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Divides two unsigned integers and returns the remainder ( unsigned integer modulo ) , reverts when dividing by zero .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev See { BEP20 total Supply } .
@ dev Add a new reward tier to the contract for future proofing @ param index of the new reward tier to add @ param rate of the added reward tier @ param price of the added reward tier @ param enabled status of the added reward tier @ notice Test ( s ) Need rewrite
@ dev Throws if called by any account other than the owner .
@ dev Safely converts a uint256 to an int256 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice Allows for the beforehand calculation of the amount of reserve token to be deposited in order to receive the desired amount of shares . @ param net Shares The amount of this g Token shares to receive . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ return cost The cost , in the reserve token , to be paid . @ return fee Shares The fee amount of shares being deducted .
@ dev Grants or revokes permission to operator to transfer the caller ' s tokens , according to approved , Emits an { Approval For All } event . Requirements : operator cannot be the caller .
@ dev Exchange owner withdraws fees from the exchange . @ param token Fee token address @ param fee Recipient Fee recipient address
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev Returns the amount of tokens owned by account .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ return the name of the token .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns the name of the token .
@ notice An event thats emitted when an account changes its delegate
@ notice Add credit to a job to be paid out for work @ param credit the credit being assigned to the job @ param job the job being credited @ param amount the amount of credit being added to the job
View function to see pending ZEU Ss on frontend .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Handy definition to ensure that flash loans are only initiated from within the current contract .
@ dev Returns true if the caller is the current owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ notice Approve spender to transfer up to amount from src @ dev This will overwrite the approval amount for spender and is subject to issues noted [ here ] ( https : eips . ethereum . org EIPS eip 20 # approve ) @ param spender The address of the account which may transfer tokens @ param amount The number of tokens that are approved ( 1 means infinite ) @ return Whether or not the approval succeeded
@ dev Return ' s the function ' s logicial message sender . This method should be used to replace msg . sender for all meta tx enabled functions .
Update the given pool ' s VOTE allocation point . Can only be called by the owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
functions
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
@ dev Initializes the owner , admin and operator roles . @ param owner Address of the contract owner @ param initial Admins The list of addresses that are granted the admin role . Grant the admin role to the initial admins
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev See { IERC20 balance Of } .
@ dev Abstracts the details of dispatching the Flash Loan by encoding the extra parameters . @ param amount The amount to be borrowed . @ param which A flag indicating whether the funds are borrowed to 1 ) increase or 2 ) decrease the collateralization ratio . @ return success A boolean indicating whether or not the action succeeded .
@ notice allows governance to resolve a dispute on a keeper @ param keeper the address cleared
@ dev See { IERC20 balance Of } .
@ dev Emitted when owner enables approved to manage the token Id token .
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
@ dev Throws if called by any account other than the owner .
@ dev Returns the amount of tokens in existence .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
Convert signed 64 . 64 fixed point number into signed 64 bit integer number rounding down . @ param x signed 64 . 64 bit fixed point number @ return signed 64 bit integer number
@ dev Approve an address to spend another addresses ' tokens . @ param owner The address that owns the tokens . @ param spender The address that will spend the tokens . @ param value The number of tokens that can be spent .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Modifier to verify that Eternal Storage is set .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Throws if called by any account other than the owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns true if the slice ends with needle . @ param self The slice to operate on . @ param needle The slice to search for . @ return True if the slice starts with the provided text , false otherwise .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev See { IERC721 owner Of } .
@ dev A new Account contract is created .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Multiplies two numbers , throws on overflow . Gas optimization : this is cheaper than asserting ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
Update the given pool ' s CYN allocation point . Can only be called by the owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev See { IERC20 total Supply } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Repay draws collateral , converts to Dai and repays the debt @ dev Must be called by the DS Proxy contract that owns the CDP
view functions
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Throws if called by any account other than the owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Note that unlike { grant Role } , this function doesn ' t perform any checks on the calling account . [ WARNING ] This function should only be called from the constructor when setting up the initial roles for the system . Using this function in any other way is effectively circumventing the admin system imposed by { Access Control } .
@ dev Returns the amount of tokens in existence .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Wraps the coin amount in the array for interacting with the Curve protocol
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Deactivates the module for the given wallet ( msg . sender ) before the module is removed . Warning : this method shall ONLY be callable by a wallet .
CONSTANT PUBLIC FUNCTIONS
@ notice Calculates amount of account ' s tokens to be claimed from distributions
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ notice Utility method to recover any ERC20 token that was sent to the Feature by mistake . @ param token The token to recover .
@ notice Get the duration of a funding round in blocks
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work .
No rebalance implementation for lower fees and faster swaps Check balance
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ notice LXL client or client Oracle can withdraw sum remainder after termination . @ dev release ( ) can still be called by client or client Oracle after termination to preserve extension option . @ param registration Registered LXL number .
Converts TUSD to ETH and returns how much ETH has been received from Uniswap swap Exact Tokens For ETH ( uint amount In , uint amount Out Min , address [ ] calldata path , address to , uint deadline ) ' amounts ' is an array where [ 0 ] is input TUSD amount and [ 1 ] is the resulting ETH after the conversion even tho we ' ve specified the WETH address , we ' ll receive ETH since that ' s how it works on uniswap https : uniswap . org docs v2 smart contracts router02 # swapexacttokensforeth
@ dev See { IERC20 allowance } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Checks whether the caller is a specific manager role or and Admin @ dev queries the registry contract for the up to date manager assignment
Update the given pool ' s upcores allocation point . Can only be called by the owner . Note contract owner is meant to be a governance contract allowing upcore governance consensus
@ dev Updates the govenance address .
Set allowance for other address Allows spender to spend no more than value tokens on your behalf @ param spender The address authorized to spend @ param value the max amount they can spend
@ dev Same as { xref Address function Call address bytes string } [ function Call ] , but performing a delegate call . Available since v3 . 3 . solhint disable next line avoid low level calls
@ dev Adds a key value pair to a map , or updates the value for an existing key . O ( 1 ) . Returns true if the key was added to the map , that is if it was not already present .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens owned by account .
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
@ notice Creates amount token to to . Must only be called by the owner ( Travel Agency ) .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Convert signed 128 . 128 fixed point number into signed 64 . 64 bit fixed point number rounding down . Revert on overflow . @ param x signed 128 . 128 bin fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Emitted when the pause is lifted by account .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See { IERC721 approve } .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Private function to add a token to this extension ' s ownership tracking data structures . @ param to address representing the new owner of the given token ID @ param token Id uint256 ID of the token to be added to the tokens list of the given address
@ dev used when locked token is unlocked
decode a uq112x112 into a uint with 18 decimals of precision we only have 256 224 32 bits to spare , so scaling up by ~ 60 bits is dangerous instead , get close to : ( x 1e18 ) > > 112 without risk of overflowing , e . g . : ( x ) 2 ( 112 lg ( 1e18 ) )
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Claims reward as a Nexus Mutual staker . @ param staked Contract contract the staker has a stake on . @ param sponsor Sponsor providing the reward funds . @ param token Address address of the ERC20 token of the reward funds . @ return reward Amount amount rewarded
@ dev Sets the contract address for asset conversion delegation . This library converts the mining Token into the underlying Token and use the assets to back the reserve Token . See G Exchange . sol for further documentation . This method is exposed publicly . @ param exchange The address of the contract that implements the G Exchange interface .
@ notice Provides the contract address for the G Exchange implementation currently being used to convert the mining token ( COMP ) , and the g Token reserve token ( DAI ) , into the underlying asset . @ return exchange A G Exchange compatible contract address , or address ( 0 ) if it has not been set .
Set the migrator contract . Can only be called by the owner .
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
@ dev give an account access to this role
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens in existence .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Mutative function stake ( uint256 amount ) external ;
@ dev only locker can add time lock
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Reset the state of the channel @ param self storage data of Celer Ledger contract @ param c the channel
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ notice Get a snapshot of the account ' s balances , and the cached exchange rate @ dev This is used by controller to more efficiently perform liquidity checks . @ param account Address of the account to snapshot @ return ( possible error , token balance , borrow balance , exchange rate mantissa )
@ dev See IERC20 . total Supply .
@ dev Function to create new contract @ param tx Data Transaction data @ param value Amount of eth sending to new contract
@ notice Accrue interest to updated borrow Index and then calculate account ' s borrow balance using the updated borrow Index @ param account The address whose balance should be calculated after updating borrow Index @ return The calculated balance
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Multiplies value a by value b ( result is rounded up ) . It ' s assumed that the value b is the significand of a number with 18 decimals precision .
Update reward vairables for all pools . Be careful of gas spending !
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns to normal state . Requirements : The contract must be paused .
function ERC20Preset Minter Pauser init unchained ( string memory name , string memory symbol ) internal initializer { Removed args to prevent compiler warning
@ dev Splits the slice , setting self to everything before the last occurrence of needle , and returning everything after it . If needle does not occur in self , self is set to the empty slice , and the entirety of self is returned . @ param self The slice to split . @ param needle The text to search for in self . @ return The part of self after the last occurrence of delim .
@ dev returns the SDAO KTY price on uniswap , that is , how many KT Ys for 1 SDAO uint256 KT Ybalance kittie Fight Token . balance Of ( pair KTY SDAO ) ; uint256 SDA Obalance super Dao Token . balance Of ( pair KTY SDAO ) ; return KT Ybalance . mul ( base18 ) . div ( SDA Obalance ) ; uint256 amount SDAO 1e18 ;
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Destroys amount tokens from account . amount is then deducted from the caller ' s allowance . See { burn } and { approve } .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Gets the balance of the specified address which are not frozen and thus transferrable . @ param owner The address to query the the balance of . @ return balance An uint256 representing the amount owned by the passed address .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
Works like call but is slightly more efficient when data needs to be copied from memory to do the call .
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
Special case for transact Call to support approvals on " bad " ERC20 tokens
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Notifies a member removal for example due to vote Out or vote Unready @ dev Called only by : Elections contract @ param member Removed is the removed committee member address @ return member Removed indicates whether the member was removed from the committee @ return removed Member Weight indicates the removed member weight @ return removed Member Certified indicates whether the member was in the certified committee
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
MODIFIERS
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Transfer tokens from one address to another . Note that while this function emits an Approval event , this is not required as per the specification , and other compliant implementations may not emit the event . @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ dev Returns the amount of tokens in existence .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ notice Withdawn event for creditor LP
@ dev See IERC20 . balance Of .
@ notice The maximum number of actions that can be included in a proposal function proposal Max Operations ( ) public pure returns ( uint256 ) { return 10 ; }
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Modifier throws if called by any account other than the pending Owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
Events
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ notice Unstakes tokens from a stake account to a transfer account @ param stake Account Account that staked funds will be transferred from @ param transfer Account Account that funds will be transferred to @ param amount amount to unstake
@ notice Get channel status @ param channel Id ID of the channel to be viewed @ return channel status
@ dev Calculates how many shares are required to withdraw so much from a given g Token . @ param token The g Token to withdraw from . @ param underlying Cost The desired amount to be withdrawn . @ return gross Shares The number of shares required to withdraw the desired amount .
@ dev Returns the smallest of two numbers .
@ dev Returns true if the contract is paused , and false otherwise .
@ dev Returns true if the caller is the current owner .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Transfers control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev Returns the amount of tokens in existence .
@ notice Gets the balance of the specified address @ param owner The address from which the balance will be retrieved @ return The balance
@ dev See { IERC721Metadata symbol } .
@ dev Returns the address of the current owner .
Events
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when the administration has been transferred . @ param previous Admin Address of the previous admin . @ param new Admin Address of the new admin .
Don ' t accept ETH
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev use this when reporting an opaque error from an upgradeable collaborator contract
@ dev Change the validator fee ( new Owner ) . Can only be called by the current owner .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ notice send value token to to from from on the condition it is approved by from @ param from The address of the sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice The standard EIP 20 approval event
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Get the number of tokens spender is approved to spend on behalf of account @ param account The address of the account holding the funds @ param spender The address of the account spending the funds @ return The number of tokens approved
Withdraws all of user token from the farm to recipient . This function reverts if there is an active farm and the token is NOT removed . user must be either 1 ) msg . sender or 2 ) an approved proxy ; else this function reverts . @ return The amount of tokens sent to recipient
@ dev called by the owner to unpause , returns to normal state
Returns the committee members and their weights @ return addrs is the committee members list @ return weights is an array of uint , indicating committee members list weight @ return certification is an array of bool , indicating the committee members certification status
@ dev Throws unless msg . sender is the current owner , an authorized operator , or the approved address for this NFT . Throws if from is not the current owner . Throws if to is the zero address . Throws if token Id is not a valid NFT . @ notice The caller is responsible to confirm that to is capable of receiving NF Ts or else they mayb be permanently lost . @ param from The current owner of the NFT . @ param to The new owner . @ param token Id The NFT to transfer .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Returns the amount of tokens owned by account .
@ dev Returns the amount of tokens in existence .
@ notice Event emitted when the reserves are reduced
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
Change the owner of the token contract
@ dev Fallback function allowing to perform a delegatecall to the given implementation . This function will return whatever the implementation call returns solhint disable previous line no complex fallback
@ dev See { IERC20 total Supply } .
@ dev Returns the amount of tokens in existence .
This event is triggered whenever a call to # claim succeeds .
@ nonce calls by Hegic Call Options to send funds to liquidity providers after an option ' s expiration @ param to Provider @ param amount Funds that should be sent

@ notice Allows for a request which was created on another contract to be fulfilled on this contract @ param oracle The address of the oracle contract that will fulfill the request @ param request Id The request ID used for the response
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
Calculate 1 x rounding towards zero . Revert on overflow or when x is zero . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
SWAP requires the initial amount to have already been sent to the first pair
@ dev Returns the address of the current owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ return The result of safely multiplying x and y , interpreting the operands as fixed point decimals of a precise unit . @ dev The operands should be in the precise unit factor which will be divided out after the product of x and y is evaluated , so that product must be less than 2 256 . Unlike multiply Decimal , this function rounds the result to the nearest increment . Rounding is useful when you need to retain fidelity for small decimal numbers ( eg . small fractions or percentages ) .
Check if the current price is within the deviation threshold for rebasing .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
pay protocol Token reward to user
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Method to be called when a bridged message execution failed . It will generate a new message requesting to fix roll back the transferred assets on the other network . @ param message Id id of the message which execution failed .
@ dev See { IERC20 balance Of } .
returns sorted token addresses , used to handle return values from pairs sorted in this order
@ dev See IERC20 . total Supply .
Validates passed address is included in an address set .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
admin : reset period Finish , last Update Time , reward Rate
@ dev Subtracts two unsigned integers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Integer division of two numbers truncating the quotient , reverts on division by zero . require ( b > 0 ) ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the number of tokens in owner ' s account .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ param staker address the staker who has received the rewards @ return uint256 the total amount of Kittie Fight Token that have been claimed by this staker @ return uint256 the total amount of Super Dao Token that have been claimed by this staker
@ dev Tells the address of the implementation where every call will be delegated . @ return address of the implementation to which it will be delegated
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Allows ' spender ' to withdraw from your account multiple times , up to the ' amount ' amount . If this function is called again it overwrites the current allowance with ' amount ' . @ param spender The address of the account able to transfer the tokens @ param amount The amount of tokens to be approved for transfer
Send yield on an LP token to the treasury
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Emitted when the URI for token type id changes to value , if it is a non programmatic URI . If an { URI } event was emitted for id , the standard https : eips . ethereum . org EIPS eip 1155 # metadata extensions [ guarantees ] that value will equal the value returned by { IERC1155Metadata URI uri } .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Update reward variables for all pools . Be careful of gas spending !
@ notice Sets the minimum and maximum amount of the mining token to be processed on every operation . See mining Gulp Range ( ) . This is a priviledged function restricted to the contract owner . @ param mining Min Gulp Amount The minimum amount of the mining token to be processed per deposit withdrawal . @ param mining Max Gulp Amount The maximum amount of the mining token to be processed per deposit withdrawal .
@ dev Returns the amount of tokens owned by account .
Private
@ notice Sets the reserve contract
Deposit tokens to a farm to yield more tokens .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ return unit256 the current month @ dev There are 6 months in this program in total , starting from month 0 to month 5 .
@ dev Returns the amount of tokens owned by account .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Sets the default delegators staking reward portion @ dev governance function called only by the functional manager @ param default Delegators Staking Rewards Percent Mille is the default delegators portion in percent mille ( 0 max Delegators Staking Rewards Percent Mille )
@ notice Gets the current amount of reserves token held by this contract
@ notice Submit a Phase 0 Deposit Data object . @ param pubkey A BLS12 381 public key . @ param withdrawal credentials Commitment to a public key for withdrawals . @ param signature A BLS12 381 signature . @ param deposit data root The SHA 256 hash of the SSZ encoded Deposit Data object . Used as a protection against malformed input .
Calculate x y rounding towards zero . Revert on overflow or when y is zero . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address . If the account is non rebasing and doesn ' t have a set credits Per Token then set it i . e . this is a mint from a fresh contract
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ dev Burns a specific amount of tokens from the target address and decrements allowance @ param from address The address which you want to send tokens from @ param value uint256 The amount of token to be burned
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice Keeper unbound
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev See { ERC20 before Token Transfer } . Requirements : the contract must not be paused .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev allows the owner to send vested ETH to participants @ param self Stored vesting from vesting contract @ param beneficiary registered address to send the ETH to if there is a bonus and it ' s before the end Time , cancel the bonus add bonus eth back into the contract balance if it ' s past the end Time then send everything left if we ' re here then it ' s before the end Time and no bonus , need to calculate transfer ETH to the beneficiary
@ dev This abstract method must be implemented by subcontracts in order to adjust the underlying reserve after a deposit takes place . The actual implementation depends on the strategy and algorithm used to handle the reserve . @ param cost The amount of the reserve token being deposited .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
This generates a public event on the blockchain that will notify clients
@ dev See { IERC20 balance Of } .
@ notice Add Burner role to account . @ dev The caller must have the Owner role . @ param account The address to which the Burner role is added .
@ dev See { IERC20 allowance } .
@ dev Transfers token Id token from from to to . WARNING : Usage of this method is discouraged , use { safe Transfer From } whenever possible . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must be owned by from . If the caller is not from , it must be approved to move this token by either { approve } or { set Approval For All } . Emits a { Transfer } event .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
Immutable once set .
Removes specified index from array @ param A The input array to search @ param index The index to remove @ return Returns the new array and the removed entry
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
function called by populate factors
@ notice Allows for the beforehand calculation of the amount of the underlying asset to be withdrawn given the desired amount of shares . @ param gross Shares The amount of this gc Token shares to provide . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param withdrawal Fee The current withdrawal fee as obtained by withdrawal Fee ( ) . @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return underlying Cost The cost , in the underlying asset , to be received . @ return fee Shares The fee amount of shares being deducted .
@ dev Returns true if the caller is the current owner .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ notice Get channel status @ param c the channel being used @ return channel status
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
Set the migrator contract . Can only be called by the owner .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Returns list of transaction I Ds in defined range . @ param from Index start position of transaction array . @ param to Index end position of transaction array . @ param pending Include pending transactions . @ param executed Include executed transactions . @ return Returns array of transaction I Ds .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev Function to check the amount of tokens that an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
returns Q112 encoded value
@ dev Integer division of two numbers , truncating the quotient .
1 Monday , 7 Sunday
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Changes the percentual amount of the funds to be burned from the liquidity pool at each 7 day period . This is a priviledged function restricted to the contract owner . @ param burning Rate The percentage of the liquidity pool to be burned .
@ notice An event thats emitted when a delegate account ' s vote balance changes
Notifies a new guardian was unregistered @ dev Called by : guardian registration contract @ dev when a guardian unregisters its status is updated to not ready to sync and is removed from the committee @ param guardian is the address of the guardian that unregistered
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
@ dev Adds two numbers , throws on overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Transfer tokens from sender to De Fi protocol @ param token Address of token @ param amount Value of token to deposit @ return new balances of each token
@ notice Provides the address of the liquidity pool contract . @ return liquidity Pool An address identifying the liquidity pool .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
after migrate , mint Lp Token ' s Yad to address
@ param grpl Policy The address of the GRPL policy contract to use for authentication .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Provides the target collateralization ratio and margin to be maintained by this contract . The amount is relative to the maximum collateralization available for the associated c Token on Compound . gc Token Type 2 uses the reserve token as collateral to borrow funds and revinvest into the g Token . @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization ( defaults to 66 % ) @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization margin ( defaults to 8 % )
Update reward variables of the given pool to be up to date .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
multiply a UQ112x112 by a uint , returning a UQ144x112 reverts on overflow
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the total amount of tokens stored by the contract .
solhint disable previous line no empty blocks
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
Notifies all the pools , safe guarding the notification amount .
@ notice sets the delay @ param delay the new delay
@ dev Returns the amount of ORBS tokens in the staking wallet that were allocated but not yet claimed . The staking wallet balance must always larger than the allocated value .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Revokes role from account . If account had been granted role , emits a { Role Revoked } event . Requirements : the caller must have role ' s admin role .
@ notice Returns the current total borrows plus accrued interest @ return The total borrows with interest
@ dev Subtracts two unsigned integers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Returns the address of the current registry Admin .
@ dev Creates a fresh new liquidity pool and deposits the initial amounts of the stakes token and the shares token . The pool if configure 50 % 50 % with a 10 % swap fee . This method is exposed publicly . @ param stakes Amount The amount of stakes token initially deposited into the pool . @ param shares Amount The amount of shares token initially deposited into the pool .
ensures tx ' s sender is able to modify the Vault
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice Allows for the beforehand calculation of the amount of reserve token to be withdrawn given the desired amount of shares . @ param gross Shares The amount of this g Token shares to provide . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param withdrawal Fee The current withdrawal fee as obtained by withdrawal Fee ( ) . @ return cost The cost , in the reserve token , to be received . @ return fee Shares The fee amount of shares being deducted .
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ dev Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance .
@ dev Returns the name of the token .
@ notice Gets the maximum amount of debt available to generate @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Set up this wallet by assigning an original owner Note that calling this method more than once will throw . @ param initial Owner The owner of this wallet , must not be address ( 0 ) .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
Drop off your chickens at the Hatchery
@ dev Verifies that the caller is the Savings Manager contract
@ dev Withdraws ETH from the Account contract . Only operators can withdraw ETH . @ param target Address Address to send the ETH to . @ param amount Amount of ETH to withdraw . Use address ( 1 ) to represent ETH .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Modifier to verify that Eternal Storage is set .
@ notice Admin is set by owner first time , after that admin is super role and has permission to change owner @ param admin Address of multisig that becomes admin
amount : Unlocked tokens , total : Total locked tokens
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Remove an account ' s access to this role .
@ return The address of the proxy admin .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ notice Change Status of the staking . If this is set to true then portion of transfer amount goes to stacking pool .
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
Convert signed 256 bit integer number into signed 64 . 64 bit fixed point number . Revert on overflow . @ param x signed 256 bit integer number @ return signed 64 . 64 bit fixed point number
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ notice Allows for the beforehand calculation of shares to be given burned upon withdrawing from the contract . @ param cost The amount of reserve token being withdrawn . @ param total Reserve The reserve balance as obtained by total Reserve ( ) @ param total Supply The shares supply as obtained by total Supply ( ) @ param withdrawal Fee The current withdrawal fee as obtained by withdrawal Fee ( ) @ return gross Shares The total amount of shares being deducted , including fees . @ return fee Shares The fee amount of shares being deducted .
@ notice msg . sender approves addr to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of wei to be approved for transfer @ return Whether the approval was successful or not
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Returns the set Eternal Storage address .
@ dev Handles the receipt of a single ERC1155 token type . This function is called at the end of a safe Transfer From after the balance has been updated . To accept the transfer , this must return bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) ) ( i . e . 0xf23a6e61 , or its own function selector ) . @ param operator The address which initiated the transfer ( i . e . msg . sender ) @ param from The address which previously owned the token @ param id The ID of the token being transferred @ param value The amount of tokens being transferred @ param data Additional data with no specified format @ return bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) ) if transfer is allowed
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Returns to normal state . Requirements : The contract must be paused .
@ param owner The address from which the balance will be retrieved @ return The balance
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev See { IERC20 allowance } .
@ dev Returns the number of values on the set . O ( 1 ) .
@ notice send value token to to from from on the condition it is approved by from @ param from The address of the sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Retrieves the total supply at the time snapshot Id was created .
@ dev Returns the amount of tokens owned by account .
@ notice Fallback to allow LXL party to suggest new resolver to counterparty . @ dev LXL provider calls to update resolver selection if matches client suggestion or confirmed , resolver updates . @ param proposed Resolver Proposed account to resolve LXL . @ param registration Registered LXL number . @ param details Context re : proposed resolver .
@ dev See { IERC20 allowance } .
@ notice Converts a number to 18 decimal percision @ param join Addr Join address of the collateral @ param amount Number to be converted
Address of Uniswap Factory
@ dev Subtracts two numbers , returns an error on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Claim SODA ( and potentially other tokens depends on strategy ) .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev Returns the largest of two numbers .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Function to check the amount of tokens that an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
@ notice Proof of oracle iterator contract @ dev Verifies that contract is a oracle iterator contract @ return true if contract is a oracle iterator contract
@ dev internal implementation of update method @ param addr address for user accounting update global accounting user accounting
@ dev Returns true if the caller is the current owner .
Calculate trade size and whether trade is buy . Trade size is the minimum of the max size and components left to trade . Reverts if target quantity is already met . Target unit is adjusted based on ratio of position multiplier when target was defined and the current position Multiplier .
@ notice send value token to to from msg . sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
@ return the release Time set by the token Owner .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev emitted during a redeem action . @ param reserve the address of the reserve @ param user the address of the user @ param amount the amount to be deposited @ param timestamp the timestamp of the action
@ dev Executes a call on address target with calldata call Data and asserts that either nothing was returned or a single boolean was returned equal to true . @ param target The call target . @ param call Data The abi encoded call data .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . > Note : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Throws if called by any account other than the owner .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Throws if called by any account other than the owner .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
@ dev Withdraws main collateral from a position @ param asset The address of the main collateral token @ param user The address of a position ' s owner @ param amount The amount of tokens to withdraw
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Updates the country corresponding to a user address . Requires that the user should have an identity contract already deployed that will be replaced . This function can only be called by a wallet set as agent of the smart contract @ param user Address The address of the user @ param country The new country of the user emits Country Updated event
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns if the operator is allowed to manage all of the assets of owner . See { set Approval For All }
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the address of the current owner .
events
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed require ( tokens < allowed [ from ] [ msg . sender ] ) ;
@ param new Controller The new controller who should receive ownership of the provided DMM token I Ds .
@ dev Hook that is called before any transfer of tokens .
@ notice Transfer amount tokens from msg . sender to dst @ param dst The address of the destination account @ param amount The number of tokens to transfer @ return Whether or not the transfer succeeded
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
returns sorted token addresses , used to handle return values from pairs sorted in this order
@ dev Multiplies two precise units , and then truncates by the given scale . For example , when calculating 90 % of 10e18 , ( 10e18 9e17 ) 1e18 ( 9e36 ) 1e18 9e18 @ param x Left hand input to multiplication @ param y Right hand input to multiplication @ param scale Scale unit @ return Result after multiplying the two inputs and then dividing by the shared scale unit
@ dev Returns the address of the current owner .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Removes the minter role from an address @ dev The sender must have the admin role @ param address EOA or contract affected
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev See { IERC20 allowance } .
performs chained get Amount Out calculations on any number of pairs
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Governance functions
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . > Note : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Give an account access to this role .
@ dev Returns the amount of tokens in existence .
@ dev Transfer tokens to a specified address and then execute a callback on recipient . @ param to The address to transfer to . @ param value The amount to be transferred . @ return A boolean that indicates if the operation was successful .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Perform a series of generic calls to other contracts . If any call fails during execution , the preceding calls will be rolled back , but their original return data will still be accessible . Calls that would otherwise occur after the failed call will not be executed . Note that accounts with no code may not be specified , nor may the smart wallet itself or the escape hatch registry . In order to increment the nonce and invalidate the signatures , a call to this function with valid targets , signatutes , and gas will always succeed . To determine whether each call made as part of the action was successful or not , either the corresponding return value or the corresponding Call Success or Call Failure event can be used note that even calls that return a success status will have been rolled back unless all of the calls returned a success status . Finally , note that this function must currently be implemented as a public function ( instead of as an external one ) due to an ABI Encoder V2 Unimplemented Feature Error . @ param calls Call [ ] A struct containing the target and calldata to provide when making each call . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param user Signature bytes A signature that resolves to the public key set for this account in storage slot zero , user Signing Key . If the user signing key is not a contract , ecrecover will be used ; otherwise , ERC1271 will be used . A unique hash returned from get Custom Action ID is prefixed and hashed to create the message hash for the signature . @ param dharma Signature bytes A signature that resolves to the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Custom Action ID is prefixed and hashed to create the signed message . @ return An array of structs signifying the status of each call , as well as any data returned from that call . Calls that are not executed will return empty data .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to transfer , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a Transfer event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the amount of tokens owned by account .
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice An event thats emitted when an account changes its delegate
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Give a ruling for a dispute . Must be called by the arbitrator . The purpose of this function is to ensure that the address calling it has the right to rule on the contract . @ param dispute ID ID of the dispute in the Arbitrator contract . @ param ruling Ruling given by the arbitrator . Note that 0 is reserved for " Not able wanting to make a decision " .
@ notice blacklists a keeper from participating in the network @ param keeper the address being slashed
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Throws if called by any account other than the owner .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the largest of two numbers .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
Update reward variables for all pools . Be careful of gas spending !
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Returns normalized ( to USD with 18 decimals ) summary balance of pool using all tokens in this protocol
@ dev Modifier to make a function callable only when the contract is not paused . Requirements : The contract must not be paused .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address . HINT : This function is ' internal ' and therefore can only be called from another function inside this contract !
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Provide a signal to the keeper that harvest ( ) should be called . gas Cost is expected gas use gas price ( keepers are always reimbursed by y Earn ) NOTE : this call and tend Trigger should never return true at the same time . Should not trigger if strategy is not activated Should trigger if hadn ' t been called in a while after enough comp has accrued we want the bot to run check value of COMP in wei check if vault wants lots of money back dont return dust Check for profits and losses if ( total > params . total Debt ) profit total . sub ( params . total Debt ) ;
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
Query to get the staking rate
@ dev Emitted when the pause is lifted by account .
@ dev Returns the amount of tokens in existence .
@ notice Accepts a withdrawal to the g Token using ETH . The g Token must have WETH as its reserve Token . This method will redeem the sender ' s required balance in shares ; which in turn will receive ETH . See G Token . sol and G Token Base . sol for further documentation . @ param growth Token The WETH based g Token . @ param gross Shares The number of shares to be redeemed .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Compute expiration time .
@ dev Withdraw ether that has been sent directly to the contract @ return bool indicating withdraw success @ notice Test ( s ) Need rewrite
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
solhint disable previous line no empty blocks
@ dev See { IERC20 allowance } .
@ dev Token balance @ param investor Ethereum address of token holder @ return Token amount
Deposit methods uint256 ind 0 ; ind 1 ; dai Mixers [ ind ] . token . safe Transfer From ( msg Sender ( ) , address ( this ) , amount ) ; dai Mixers [ ind ] . token . safe Approve ( address ( dai Mixers [ ind ] . mixer ) , amount ) ; dai Mixers [ ind ] . mixer . deposit ( commitment ) ; dai Mixers [ ind ] . last Deposit now ; dai Mixers [ ind ] . total Deposits dai Mixers [ ind ] . total Deposits . add ( amount ) ; dai Mixers [ ind ] . deposit Since Withdraw dai Mixers [ ind ] . deposit Since Withdraw . add ( 1 ) ;
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Update reward vairables for all pools . Be careful of gas spending !
@ dev Emitted when the pause is lifted by account .
@ dev See IERC20 . allowance .
@ dev Modify the supply without minting new tokens . This uses a change in the exchange rate between " credits " and OUSD tokens to change balances . @ param new Total Supply New total supply of OUSD . @ return uint256 representing the new total supply .
TRANSFER TOKENS FROM ANOTHER ACCOUNT
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
The address that acts as a " secondary " owner with quicker access to function calling than the owner . Typically , this is the DMMF .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the amount of tokens in existence .
@ notice An event emitted when a proposal has been queued in the Timelock
@ dev Gets the credits balance of the specified address . @ param account The address to query the balance of . @ return A uint256 representing the amount of base units owned by the specified address .
State mutations
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Get number of wallet owners @ param self Wallet in contract storage @ return uint256 Number of owners
@ dev See { IERC20 total Supply } .
@ notice Gets the maximum amount of debt available to generate @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP @ dev Substracts 10 wei to aviod rounding error later on
Safe steak transfer function , just in case if rounding error causes pool to not have enough STEAK .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the address of the owner of the NFT . NF Ts assigned to zero address are considered invalid , and queries about them do throw . @ param token Id The identifier for an NFT . @ return Address of token Id owner .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Note that unlike { grant Role } , this function doesn ' t perform any checks on the calling account . [ WARNING ] This function should only be called from the constructor when setting up the initial roles for the system . Using this function in any other way is effectively circumventing the admin system imposed by { Access Control } .
@ dev Executes selected transactions of the list . UNTRUSTED . @ param list ID The index of the transaction list in the array of lists . @ param cursor Index of the transaction from which to start executing . @ param count Number of transactions to execute . Executes until the end if set to " 0 " or number higher than number of transactions in the list . bool call Result transaction . target . call . value ( transaction . value ) ( transaction . data ) ; An extra check to prevent re entrancy through target call .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Claims and liquidates CRV into y CRV , and then invests all underlying .
@ dev Emitted when the pause is lifted by a pauser ( account ) .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfer From . This is zero by default . This value changes when approve or transfer From are called .
@ notice Delegates votes from signatory to delegatee @ param delegatee The address to delegate votes to @ param nonce The contract state required to match the signature @ param expiry The time at which to expire the signature @ param v The recovery byte of the signature @ param r Half of the ECDSA signature pair @ param s Half of the ECDSA signature pair
@ notice Owner drains one type of tokens when the contract is paused @ dev This is for emergency situations . @ param amount drained token amount
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin .
@ notice Function to initialize the contract @ dev staking Address must be initialized separately after Staking contract is deployed @ dev service Provider Factory Address must be initialized separately after Service Provider Factory contract is deployed @ dev delegate Manager Address must be initialized separately after Delegate Manager contract is deployed @ param token Address address of ERC20 token that will be claimed @ param governance Address address for Governance proxy contract
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Trigger when liquidations are initiated
@ notice Keeper unbonding
Unlocks the contract @ dev governance function called only by the migration manager or an admin @ dev typically called by the registry contract upon unlocking all managed contracts
It allows owner to set the is Risk Adjusted flag @ param is Risk Adjusted : flag for open Rebalance
@ notice This call is no longer supported .
@ dev Receives some ETH from the Wrapped Ether contract in exchange for WETH . This operation will revert if it does not succeed . Note that the contract using this library function must declare a payable receive fallback function . @ param amount The amount of ETH to be wrapped in WETH .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the number of values in the set . O ( 1 ) .
consentually update yourself to a new version of this pool amount claim your rewards before you upgrade otherwise they are lost forever . withdrawable allow the pool to move your LP tokens update yourself
@ dev See { IERC1155 safe Batch Transfer From } .
@ dev Transfer tokens from one address to another . Note that while this function emits an Approval event , this is not required as per the specification , and other compliant implementations may not emit the event . @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Remove an account ' s access to this role .
Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) spender The address which will spend the funds . subtracted Value The amount of tokens to decrease the allowance by .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Return the number of canceled orders where from Token is the origin token
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Converts an unsigned uint256 into a signed int256 . Requirements : input must be less than or equal to max Int256 .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Internal function that mints an amount of the token and assigns it to an account . This encapsulates the modification of balances such that the proper events are emitted . @ param account The account that will receive the created tokens . @ param value The amount that will be created .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ notice The standard EIP 20 approval event
solhint disable previous line no empty blocks
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Find the insert position for a new node with the given key @ param key Node ' s key @ param prev Id Id of previous node for the insert position @ param next Id Id of next node for the insert position prev Id does not exist anymore or now has a smaller key than the given key next Id does not exist anymore or now has a larger key than the given key No hint descend list starting from head No prev Id for hint ascend list starting from next Id No next Id for hint descend list starting from prev Id Descend list starting from prev Id
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Throws if called by any account other than the owner .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
instantiate dollar
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Increases the max supply for the provided dmm Token Id by amount . This call reverts with INSUFFICIENT COLLATERAL if there isn ' t enough collateral in the Chainlink contract to cover the controller ' s requirements for minimum collateral .
@ notice Failure event
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ notice Calculates the current supply rate per block @ param cash The amount of cash in the market @ param borrows The amount of borrows in the market @ param reserves The amount of reserves in the market @ param reserve Factor Mantissa The current reserve factor for the market @ return The supply rate percentage per block as a mantissa ( scaled by 1e18 )
@ dev Divide a scalar by an Exp , returning a new Exp .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Allows the current owner to transfer control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the smallest of two numbers .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Adjust the scale of an integer @ param adjustment Amount to adjust by e . g . scale By ( 1e18 , 1 ) 1e17
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the name of the token .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Allows governance to change governance ( for future upgradability ) @ param governance new governance address to set
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ param owner The address of the account owning tokens @ param spender The address of the account able to transfer the tokens @ return Amount of remaining tokens allowed to spent
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev The auxiliary function for calculate option occupied . strike Price option ' s strike price underlying Price option ' s underlying price amount option ' s amount opt Type option ' s type , 0 for call , 1 for put .
@ dev Returns true if the caller is the current owner .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Allows an owner to revoke a confirmation for a transaction . @ param transaction Id Transaction ID .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Multiplies two numbers , throws on overflow .
@ dev See { IERC20 balance Of } .
@ dev Returns the address of the current owner .
Translates a list guardians Orbs addresses to guardian addresses @ dev an Orbs address that does not correspond to any registered guardian returns address ( 0 ) @ param orbs Addrs is a list of the guardians ' Orbs addresses to query @ return guardian Addrs is a list of guardians ' addresses that matches the Orbs addresses
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice transfers shell tokens @ param recipient the address of where to send the shell tokens @ param amount the amount of shell tokens to send @ return success the success bool of the call
read length delimited field and return bytes require ( end < buf . b . length ) ; bytes memory buf B buf . b ;
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice read a pack Id in the category list at a specific index @ param category listing category @ param index index @ return pack Id on index
@ dev Destroys amount tokens from account , reducing the and updating burnd tokens for abstraction
@ dev Sets token URI as the token URI of token Id . Requirements : token Id must exist .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Multiplies two numbers , throws on overflow .
@ notice A distinct Uniform Resource Identifier ( URI ) for a given asset . @ dev Throws if token Id is not a valid NFT . UR Is are defined in RFC 3986 . The URI may point to a JSON file that conforms to the " ERC721 Metadata JSON Schema " . https : github . com ethereum EI Ps blob master EIPS eip 721 . md @ param token Id The token ID we ' re inquiring about @ return String representing the URI for the requested token
@ dev Returns the amount of tokens owned by account .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Modifier to make a function callable only when the contract is not paused . Requirements : The contract must not be paused .
@ dev Retrieve the total collateral worth , priced in USD .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice View method for checking whether a token has been minted @ param token Id ID of the token being checked
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Throws if called by any account other than the owner .
Burn Tokens
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return balance An uint256 representing the amount owned by the passed address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Victim info
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Throws if called by any account other than the owner .
@ notice An event thats emitted when an account changes its delegate
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev See { IERC20 balance Of } .
@ dev Tells the address of the implementation where every call will be delegated . @ return address of the implementation to which it will be delegated
@ dev Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ dev Checks if a salt based certificate is correct @ param certificate Certificate to control
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev See { IERC20 balance Of } .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Return Staking Module address from the Nexus @ return Address of the Staking Module contract
@ dev Returns the largest of two numbers .
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ dev Throws if called by any account other than the owner .
Total supply
@ notice Remove credit for a job
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
anyone who wants to become a candidate 1000 hydro tokens are deducted from the ein of msg . sender and sent to FEEWALLET
Don ' t accept ETH
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Transfers token Id token from from to to . WARNING : Usage of this method is discouraged , use { safe Transfer From } whenever possible . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must be owned by from . If the caller is not from , it must be approved to move this token by either { approve } or { set Approval For All } . Emits a { Transfer } event .
@ dev Returns the length of a null terminated bytes32 string . @ param self The value to find the length of . @ return The length of the string , from 0 to 32 .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev See { IERC20 total Supply } .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent . To change the approve amount you first have to reduce the addresses allowance to zero by calling approve ( spender , 0 ) if it is not already 0 to mitigate the race condition described here : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729
@ dev Creates a new token for to . Its token ID will be automatically assigned ( and available on the emitted { IERC721 Transfer } event ) , and the token URI autogenerated based on the base URI passed at construction . See { ERC721 mint } . Requirements : the caller must have the MINTER ROLE . We cannot just use balance Of to create the new token Id because tokens can be burned ( destroyed ) , so we need a separate counter .
@ dev Returns the owner of the NFT specified by token Id .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Creates amount tokens of token type id , and assigns them to account . Emits a { Transfer Single } event . Requirements : account cannot be the zero address . If to refers to a smart contract , it must implement { IERC1155Receiver on ERC1155Received } and return the acceptance magic value .
@ notice The standard EIP 20 transfer event
@ dev Transfer tokens from one address to another @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the number of accounts that have role . Can be used together with { get Role Member } to enumerate all bearers of a role .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC721 set Approval For All } .
@ dev Initializes the contract setting the deployer as the initial owner .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint representing the amount owned by the passed address .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ inheritdoc I Staking
@ dev Returns the name of the token .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the downcasted uint96 from uint256 , reverting on overflow ( when the input is greater than largest uint96 ) . Counterpart to Solidity ' s uint96 operator . Requirements : input must fit into 96 bits
@ dev Throws if called by any account other than the owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the amount of tokens in existence .
@ return The current state of the escrow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ notice withdraw funds after unbonding has finished @ param bonding the asset to withdraw from the bonding pool
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Checks that bridged amount of tokens conforms to the configured execution limits . @ param token address of the token contract . @ param amount amount of bridge tokens . @ return true , if specified amount can be processed and executed .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
@ notice Selects the k th ranked element from list , looking only at indices between lo and hi ( inclusive ) . Modifies list in place .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the address of the current owner .
@ dev allow manager use newest DEFI protocols NOTE : all logic in DEFI portal hardcoded , and also fund manager can ' t update non permitted DEFI portal , so this is safe call @ param additional Data params data packed in bytes @ param additional Args additional params array for quick unpack
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the amount of tokens in existence .
Update dev address by the previous dev . Note only Owner functions are meant for the governance contract allowing NANOCORE governance token holders to do this functions .
@ dev Integer division of two numbers truncating the quotient , reverts on division by zero . @ param x dividend @ param y divisor @ return quotient
@ dev Burns a specific amount of tokens . @ param value The amount of token to be burned . no need to require value < total Supply , since that would imply the sender ' s balance is greater than the total Supply , which should be an assertion failure
events
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Hook that is called before any transfer of tokens . This includes funding and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be funded for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Modifier to use in the initializer function of a contract .
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ dev transfers tokens to a given address throws on any error rather then return a false flag to minimize user errors @ param to target address @ param value transfer amount @ return true if the transfer was successful , false if it wasn ' t
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Multiplies two int256 variables and fails on overflow .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ notice Initiates the liquidity pool migration . It consists of setting the migration recipient address and starting a 7 day grace period . After the 7 day grace period the migration can be completed via the complete Liquidity Pool Migration fuction . Anytime before the migration is completed is can be cancelled via cancel Liquidity Pool Migration . This function will emit a Initiate Liquidity Pool Migration event upon success . This is a priviledged function restricted to the contract owner . @ param migration Recipient The receiver of the liquidity pool funds .
@ dev Subtracts two signed integers , reverts on overflow .
@ notice Set the weights for multiple strategies . @ param strategy Addresses Array of strategy addresses @ param weights Array of corresponding weights , with 18 decimals . For ex . 100 % 1e18 , 30 % 3e17 .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the amount of tokens in existence .
@ notice Sets the contract address for the G Exchange implementation to be used in converting the mining token ( COMP ) , and the g Token reserve token ( DAI ) , into the underlying asset . This is a priviledged function restricted to the contract owner . @ param exchange A G Exchange compatible contract address .
@ dev Withdraws the amount staked for this exchange . This can only be done if the exchange has been correctly shutdown : The exchange owner has shutdown the exchange All deposit requests are processed All funds are returned to the users ( merkle root is reset to initial state ) Can only be called by the exchange owner . @ return amount LRC The amount of LRC withdrawn
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Remove an account ' s access to this role .
solhint disable next line no simple event func name
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev gets freezing count @ param addr Address of freeze tokens owner .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ notice Provides the percentual margins tolerable before triggering a rebalance action ( i . e . an underlying deposit or withdrawal ) . @ return liquid Rebalance Margin The liquid percentual rebalance margin , as configured by the owner . @ return portfolio Rebalance Margin The portfolio percentual rebalance margin , as configured by the owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Implementation of revoke an invalid address from the whitelist . @ param remove Address revoked address .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Modifier to use in the initializer function of a contract .
@ dev Returns the amount of tokens owned by account .
handles presale burn + staking burn .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Note that this application has a staking token as well as a distribution token , which may be different . This function is required by EIP 900 . @ return The deposit token used for staking .
@ dev Returns the address of the current owner .
@ notice get the most recent updated at timestamp @ dev # [ deprecated ] Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Internal function to burn a specific token . Reverts if the token does not exist . Deprecated , use burn ( uint256 ) instead . @ param owner owner of the token to burn @ param token Id uint256 ID of the token being burned by the msg . sender Clear metadata ( if any )
whether there are unread bytes
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
Sets a new contract registry to migrate to @ dev governance function called only by the registry Admin @ dev updates the registry address record in all the managed contracts @ dev by tracking the emitted Contract Registry Updated , tools can track the up to date contracts @ param new Registry is the new registry contract
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice Get the number of tokens spender is approved to spend on behalf of account @ param account The address of the account holding the funds @ param spender The address of the account spending the funds @ return The number of tokens approved
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the amount of tokens owned by account .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ dev Integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; Solidity automatically throws when dividing by 0 uint256 c a b ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Calculates how many shares are required to withdraw so much from a given g Token . @ param token The g Token to withdraw from . @ param underlying Cost The desired amount to be withdrawn . @ return gross Shares The number of shares required to withdraw the desired amount .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } . Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfer From . This is zero by default . This value changes when approve or transfer From are called .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the key was removed from the map , that is if it was present .
@ notice Set the governance address after confirming contract identity @ param governance Address Incoming governance address
Generates the calldata to migrate LEND to AAVE . @ param underlying Token Address of the component to be wrapped @ param wrapped Token Address of the wrapped component @ param underlying Units Total quantity of underlying units to wrap @ return address Target contract address @ return uint256 Total quantity of underlying units ( if underlying is ETH ) @ return bytes Wrap calldata
@ notice Allows liquidity providers to remove liquidity @ param liquidity the pair being unbound @ param job the job being unbound from
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Retrieve token balance for an account @ param self Stored token from token contract @ param owner Address to retrieve balance of @ return balance The number of tokens in the subject account
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns true if account supports all the interfaces defined in interface Ids . Support for { IERC165 } itself is queried automatically . Batch querying can lead to gas savings by skipping repeated checks for { IERC165 } support . See { IERC165 supports Interface } . query support of ERC165 itself query support of each interface in interface Ids all interfaces supported
@ dev Facilitates a trade of the funds holdings via the exchange portal @ param source ERC20 token to convert from @ param source Amount Amount to convert ( in source token ) @ param destination ERC20 token to convert to @ param type The type of exchange to trade with @ param proof Merkle tree proof ( if not used just set [ ] ) @ param positions Merkle tree positions ( if not used just set [ ] ) @ param additional Data For additional data ( if not used just set " 0x0 " ) @ param min Return Min expected amount of destination
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Transfers token Id token from from to to . WARNING : Usage of this method is discouraged , use { safe Transfer From } whenever possible . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must be owned by from . If the caller is not from , it must be approved to move this token by either { approve } or { set Approval For All } . Emits a { Transfer } event .
@ dev Add orchestration @ param user Address of user or contract having access to this contract . @ param signature bytes4 signature of the function we are giving orchestrated access to . It seems to me a bad idea to give access to humans , and would use this only for predictable smart contracts .
@ notice The sender liquidates the borrowers collateral . The collateral seized is transferred to the liquidator . @ dev Reverts upon any failure @ param borrower The borrower of this c Token to be liquidated @ param c Token Collateral The market in which to seize collateral from the borrower
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the minimum value in an array . @ param self Storage array containing uint256 type variables @ return min Value The highest value in the array
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Redeems pool token to underlying tokens proportionally . @ param amount Amount of pool token to redeem . @ param min Redeem Amounts Minimum amount of underlying tokens to get . If swap is paused , only admins can redeem . Redemption fee is paid with pool token No conversion is needed as the pool token has 18 decimals We might choose to use pool Token . total Supply to compute the amount , but decide to use D in case we have multiple minters on the pool token . Important : Underlying tokens must convert back to original decimals ! Updates the balance in storage After reducing the redeem fee , the remaining pool tokens are burned !
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev See { IERC20 total Supply } .
@ dev Returns true if account has been granted role .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Get the vote type of a voter on a parameter proposal @ param proposal Id the proposal id @ param voter the voter address @ return the vote type of the given voter on the given parameter proposal
@ dev Return the amount of ETH wei to get back if we are to liquidate the position .
@ dev See { IERC20 total Supply } .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
Perform LP token migration from legacy Uniswap V2 to Steak Swap . Take the current LP token address and return the new LP token address . Migrator should have full access to the caller ' s LP token . Return the new LP token address . XXX Migrator must have allowance access to Uniswap V2 LP tokens . Steak Swap must mint EXACTLY the same amount of Steak Swap LP tokens or else something bad will happen . Traditional Uniswap V2 does not do that so be careful !
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Allows the current owner to transfer control of the contract to a new owner . @ param new Owner The address to transfer ownership to .
@ dev Returns whether the specified token exists @ param token Id uint256 ID of the token to query the existence of @ return bool whether the token exists
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
some others are in the case of an owner changing .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the URI for token type id . If the \ { id \ } substring is present in the URI , it must be replaced by clients with the actual token type ID .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the downcasted int16 from int256 , reverting on overflow ( when the input is less than smallest int16 or greater than largest int16 ) . Counterpart to Solidity ' s int16 operator . Requirements : input must fit into 16 bits Available since v3 . 1 .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
This famous algorithm is called " exponentiation by squaring " and calculates x ^ n with x as fixed point and n as regular unsigned . It ' s O ( log n ) , instead of O ( n ) for naive repeated multiplication . These facts are why it works : If n is even , then x ^ n ( x ^ 2 ) ^ ( n 2 ) . If n is odd , then x ^ n x x ^ ( n 1 ) , and applying the equation for even x gives x ^ n x ( x ^ 2 ) ^ ( ( n 1 ) 2 ) . Also , EVM division is flooring and floor [ ( n 1 ) 2 ] floor [ n 2 ] .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Throws if called by any account other than the owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Get the total amount of tokens staked by account Address at block number block Number @ param account Address Account requesting for @ param block Number Block number at which we are requesting @ return The amount of tokens staked by the account at the given block number
@ dev See { IERC20 balance Of } .
@ dev Same as { xref Address function Call address bytes string } [ function Call ] , but performing a delegate call . Available since v3 . 3 . solhint disable next line avoid low level calls
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
Update reward vairables for all pools . Be careful of gas spending !
Withdraw all funds , normally used when migrating strategies require ( vault ! address ( 0 ) , " ! vault " ) ;
@ notice Buy tokens from contract by sending ether uint amount msg . value buy Price ; transfer ( address ( this ) , msg . sender , amount ) ;
This generates a public event on the blockchain that will notify clients
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ notice Confirm candidate status from Unbonding to Unbonded @ param candidate Addr the address of the candidate
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ return the address of the owner .
State mutations
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Emergency drain in case of a bug Adds all funds to owner to refund people Designed to be as simple as possible require ( contract Start Timestamp . add ( 8 days ) < block . timestamp , " Liquidity generation grace period still ongoing " ) ;
@ dev See { IERC20 total Supply } .
@ notice Get the balance of multiple account token pairs @ param owners The addresses of the token holders @ param ids ID of the Tokens @ return The owner ' s balance of the Token types requested ( i . e . balance for each ( owner , id ) pair )
No rebalance implementation for lower fees and faster swaps Check balance
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
MANAGER ONLY : Instructs the Set Token to unwrap a wrapped asset into its underlying via a specified adapter . @ param set Token Instance of the Set Token @ param underlying Token Address of the underlying asset @ param wrapped Token Address of the component to be unwrapped @ param wrapped Units Quantity of wrapped tokens in Position units @ param integration Name ID of wrap module integration ( mapping on integration registry )
@ param reserve underlying token address
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns whether the specified token exists by checking to see if it has a creator @ param id uint256 ID of the token to query the existence of @ return bool whether the token exists
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev See { IERC20 allowance } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Allow a signatory to increment the nonce at any point . The current nonce needs to be provided as an argument to the signature so as not to enable griefing attacks . All arguments can be omitted if called directly . No value is returned from this function it will either succeed or revert . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ param signature bytes A signature that resolves to either the public key set for this account in storage slot zero , user Signing Key , or the public key returned for this account from the Dharma Key Registry . A unique hash returned from get Custom Action ID is prefixed and hashed to create the signed message .
@ dev Prevents a contract from calling itself , directly or indirectly . If you mark a function non Reentrant , you should also mark it external . Calling one non Reentrant function from another is not supported . Instead , you can implement a private function doing the actual work , and an external wrapper marked as non Reentrant .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Modifier to use in the initializer function of a contract .
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
Returns true if the address is the Set Token ' s manager
@ dev Integer division of two numbers , truncating the quotient .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Don ' t accept ETH
@ dev Returns the amount of tokens owned by account .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
both for own token Id or hired one require the permission from land owner ; make sure that token Id won ' t be used repeatedly update status !
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns one of the g Tokens that makes up the portfolio . This method is exposed publicly . @ param index The desired index , must be less than the token count . @ return token The g Token currently present at the given index .
@ dev Returns the downcasted uint128 from uint256 , reverting on overflow ( when the input is greater than largest uint128 ) . Counterpart to Solidity ' s uint128 operator . Requirements : input must fit into 128 bits
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Setters
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Removes a manager . @ param manager The manager to remove .
@ notice LXL client can assign account as client Oracle to help call release ( ) and withdraw ( ) . @ param client Oracle Account that can help call release ( ) and withdraw ( ) ( default to client if unsure ) . @ param registration Registered LXL number .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the amount of tokens in existence .
@ dev See { IERC20 allowance } .
@ dev allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner @ param new Owner new contract owner
Returns the subject address the addr has voted out against @ param voter is the voting guardian address @ return subject is the subject the voter has voted out
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ notice An event thats emitted when a delegate account ' s vote balance changes
approve a charity so it can start receiving donations
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ notice How many tokens are not yet claimed from distributions @ param account Account to check @ return Amount of tokens available to claim
Logged when the resolver for a node changes .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns a token ID at a given index of all the tokens stored by the contract . Use along with { total Supply } to enumerate all tokens .
@ dev Retrieves the maximum market liquidity for a given reserve on both Aave and Dydx . @ param token The reserve token to flash borrow from . @ return liquidity Amount The reserve token available market liquidity .
@ notice Boost draws Dai , converts to collateral and adds to CDP @ dev Must be called by the DS Proxy contract that owns the CDP
@ dev See { IERC20 transfer } . Requirements : account cannot be the zero address . the caller must have a balance of at least amount .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
to Pause the contract
@ dev Emitted when the implementation is upgraded . @ param implementation Address of the new implementation .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ notice An event thats emitted when an account changes its delegate
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
utility function from R Pepe
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ notice Creates a batch of child ERC1155 tokens @ dev Only callable with smart contact role @ return token Ids the generated child Token I Ds Batched event for GAS savings
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Add credit to a job to be paid out for work @ param job the job being credited @ param amount the amount of credit being added to the job
Get the token balance for account token Owner
@ dev Returns the amount of tokens in existence .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
@ dev Emitted when account grants or revokes permission to operator to transfer their tokens , according to approved .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the amount of tokens owned by account .
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ notice Transfers tokens held by timelock to beneficiary . solhint disable next line not rely on time
@ dev called by the owner to pause , triggers stopped state
@ dev See { IERC20 allowance } .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 balance Of } .
Return the sell price of 1 individual token .
@ dev Gets the tokens value in terms of USD . @ return The value of the amount of token , as a number with the same number of decimals as amount passed in to this function .
@ dev See { uniswap Sell Tax Fee } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice An event emitted when a new admin is staged in the timelock
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . import ANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
performs chained get Amount Out calculations on any number of pairs
@ dev See { IERC20 total Supply } .
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the amount of tokens owned by account .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice Get the number of tokens held by the account @ param account The address of the account to get the balance of @ return The number of tokens held
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Can make O ( 1 ) by storing index pointer in proposals mapping . Requires in Progress Proposals to be 1 indexed , since all proposals that are not present will have pointer set to 0 . Swap proposal Id to end of array + pop ( deletes last elem + decrements array length )
@ dev Throws if called by any account other than the owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Utility function for heap Sort @ param index The index of parent node @ return lc I The index of left child
@ dev Returns the amount of tokens in existence .
@ dev The Ownable constructor sets the original owner of the contract to the sender account .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ notice Initialize the new money market @ param underlying The address of the underlying asset @ param comptroller The address of the Comptroller @ param interest Rate Model The address of the interest rate model @ param initial Exchange Rate Mantissa The initial exchange rate , scaled by 1e18 @ param name ERC 20 name of this token @ param symbol ERC 20 symbol of this token @ param decimals ERC 20 decimal precision of this token
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the amount of tokens owned by account .
Maps a value of bool type to a given key . Only the owner can execute this function .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns true if the contract is paused , and false otherwise .
Update reward variables of the given pool to be up to date . city . mint ( devaddr , city Reward . div ( 20 ) ) ;
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Address of the token being used by the staking interface @ return address The address of the ERC20 token used for staking
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Checks if all the triggers are true , reverts if not @ param strategy Strategy data we have in storage @ param trigger Call Data All input data needed to execute triggers
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Called by the delegator on a delegate to initialize it for duty @ param data The encoded bytes data for any initialization Shh currently unused Shh we don ' t ever want this hook to be marked pure
@ dev updates the state of the reserve as a consequence of a repay action . @ param reserve the address of the reserve on which the user is repaying @ param user the address of the borrower @ param payback Amount Minus Fees the amount being paid back minus fees @ param balance Increase the accrued interest on the borrowed amount
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Creates amount token to to . Must only be called by the owner ( Brew Master ) .
@ notice Calculates settlement Fee @ param amount Option amount @ return fee Settlement fee amount
Must only be called by Soda Bank .
@ dev Returns the name of the token .
@ notice Cooperatively withdraw specific amount of deposit @ param self storage data of Celer Ledger contract @ param cooperative Withdraw Request bytes of cooperative withdraw request message
@ dev Returns the amount of tokens owned by account .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls Return data is optional solhint disable next line max line length
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } . Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Withdraw Ethers
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } . Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
No rebalance implementation for lower fees and faster swaps Check balance
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev total number of tokens in existence
@ notice Set the address of the new owner of the contract @ param new Owner The address of the new owner of the contract
@ dev See { IERC20 balance Of } .
@ dev returns the fee applied to a flashloan and the portion to redirect to the protocol , in basis points .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev See { IERC20 total Supply } .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
calc In Given Out a I token Amount In b O token Balance Out b O \ ( w O w I ) \ b I token Balance In b I | | | ^ 1 | a O token Amount Out a I \ \ ( b O a O ) w I token Weight In w O token Weight Out ( 1 s F ) s F swap Fee
ADD LIQUIDITY
@ dev Returns the minimum value in an array . @ param self Storage array containing uint256 type variables @ return min Value The highest value in the array
@ dev Returns the amount of tokens owned by account .
@ dev Checks whether the pool is available . @ return Whether the pool is available .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Return reward multiplier over the given from to to block .
@ dev helper for sell pool in Bancor network converter type v1
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the amount of tokens in existence .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Governance functions
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
force balances to match reserves address token0 token0 ; address token1 token1 ;
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice An event thats emitted when an account changes its delegate
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Modifier throws if called by any account other than the pending Owner .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the address of the current owner .
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred . Safe Math . sub will throw if there is not enough balance .
@ dev Returns the address of the current owner .
Returns an array of hashes of canceled orders where from Token is the origin token
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ notice Cancels a pending withdrawal request . Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Throws if called by any account other than the owner .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See IERC20 . approve . Requirements : spender cannot be the zero address .
Top ups the fee pool with the given amount at the given rate @ dev Called by : subscriptions contract . ( not enforced ) @ dev fills the rewards in 30 days buckets based on the monthly Rate @ param amount is the amount to fill @ param monthly Rate is the monthly rate @ param from Timestamp is the to start fill the buckets , determines the first bucket to fill and the amount filled in the first bucket .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Adds two unsigned integers , reverts on overflow .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Perform LP token migration from legacy Uniswap V2 to Trump Swap . Take the current LP token address and return the new LP token address . Migrator should have full access to the caller ' s LP token . Return the new LP token address . XXX Migrator must have allowance access to Uniswap V2 LP tokens . Trump Swap must mint EXACTLY the same amount of Trump Swap LP tokens or else something bad will happen . Traditional Uniswap V2 does not do that so be careful !
@ dev Redeem funds lent to a given c Token ' s market . This operation will revert if it does not succeed . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to redeem .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
performs chained get Amount Out calculations on any number of pairs
performs chained get Amount In calculations on any number of pairs
@ dev Possible error codes that we can return
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the amount of tokens in existence .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
user stuff
Token holders can stake their tokens using this function @ param tokens number of tokens to stake distribute the staking fee accumulated before updating the user ' s stake add pending rewards to remainder to be claimed by user later , if there is any existing stake
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
@ dev Delegates execution to an implementation contract . This is a low level function that doesn ' t return to its internal call site . It will return to the external caller whatever the implementation returns . @ param implementation Address to delegate . Copy msg . data . We take full control of memory in this inline assembly block because it will not return to Solidity code . We overwrite the Solidity scratch pad at memory position 0 . Call the implementation . out and outsize are 0 because we don ' t know the size yet . Copy the returned data . delegatecall returns 0 on error .
@ dev Returns the number of values in the set . O ( 1 ) .
get the rate of the v Synth to the synth .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns true if the caller is the current owner .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Throws if called by any account other than the owner .
@ notice Calculates the fee amount @ param amount Dai amount that is converted @ param gas Cost Used for Monitor , estimated gas cost of tx @ param owner The address that controlls the DS Proxy that owns the CDP fee can ' t go over 20 % of the whole amount
@ dev Multiplies two numbers , throws on overflow .
@ return Block number in which the contract was initialized
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
12 , 000 Buoy tokens are eligible to be received via presale tokens . Each token redeemed 400 Buoy . avoids supply limitations to guarentee private sales can be redeemed during sale period
@ dev pause all coin transfer
Truffle wont compile if this isn ' t commented function execute ( bytes memory code , bytes memory data ) public virtual payable returns ( address , bytes32 ) ;
@ dev See IERC20 . transfer From . Emits an Approval event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of ERC20 ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least value . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the previous node ( with a larger key ) in the list for a given node @ param id Node ' s id address for the node before node in list with ' id '
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
Mutative functions
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Adjusts the reserve to match the configured collateralization ratio . It calculates how much the collateralization must be increased or decreased and either : 1 ) lend borrow , or 2 ) repay redeem , respectivelly . The funds required to perform the operation are obtained via Flash Loan to avoid having to maneuver around margin when moving in out of leverage . @ param room Amount The amount of underlying token to be liquid after the operation . @ return success A boolean indicating whether or not the action succeeded .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev PUBLIC FACING : ERC20 total Supply ( ) is the circulating supply and does not include any staked Suns . allocated Supply ( ) includes both . @ return Allocated Supply in Suns
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ notice Remove an existing service type @ param service Type name of service type to remove Overwrite service index Mark as invalid Note stake bounds are not reset so they can be checked to prevent service Type from being re added
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev See { IERC20 total Supply } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See IERC20 . transfer From . Emits an Approval event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of ERC20 ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least value . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
MODIFIERS simple single sig function modifier .
@ dev Fallback function allows to deposit ether .
@ dev Burns the given amount of the stakes token . The default behavior of the function for general ERC 20 is to send the funds to address ( 0 ) , but that can be overriden by a subcontract . @ param stakes Amount The amount of the stakes token being burned .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ notice Sets the price oracle
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Converts ETH to Tokens 1and sends new Tokens to the sender update constants . transfer the tokens .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Emitted by { snapshot } when a snapshot identified by id is created .
@ dev Returns the address of the current owner .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice confirms if the current keeper is registered and has a minimum bond , should be used for protected functions @ param keeper the keeper being investigated @ param min Bond the minimum requirement for the asset provided in bond @ param earned the total funds earned in the keepers lifetime @ param age the age of the keeper in the system @ return true false if the address is a keeper and has more than the bond
@ dev Throws if called by any account other than the owner .
@ dev perform a generic call to an arbitrary contract @ param contract the contract ' s address to call @ param data ABI encoded contract call to call contract address . @ param value value ( ETH ) to transfer with the transaction @ return bool success or fail bytes the return bytes of the called contract ' s function .
@ dev See IERC20 . balance Of .
@ dev See { IERC20 total Supply } .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Give an account access to this role .
Update reward variables of the given pool to be up to date . Should we halve the minting ?
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
Update reward variables of the given pool to be up to date .
@ notice Set the balance limits of given tokens @ param self storage data of Celer Ledger contract @ param token Addrs addresses of the tokens ( address ( 0 ) is for ETH ) @ param limits balance limits of the tokens
@ dev See { IERC20 total Supply } .
@ notice Get parameter for permission @ param entity Address of the whitelisted entity that will be able to perform the role @ param app Address of the app @ param role Identifier for a group of actions in app @ param index Index of parameter in the array @ return Parameter ( id , op , value )
@ dev Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens . @ param index uint256 representing the index to be accessed of the tokens list @ return uint256 token ID at the given index of the tokens list
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ notice Sender redeems a Tokens in exchange for the underlying asset @ dev Accrues interest whether or not the operation succeeds , unless reverted @ param redeem Tokens The number of a Tokens to redeem into underlying @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Returns the amount of tokens in existence .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Internal function to mint a new token . Reverts if the given token ID already exists . @ param to The address that will own the minted token @ param token Id uint256 ID of the token to be minted
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev PUBLIC FACING : Return the lobby days that a user is in with a single call @ param member Addr TRX address of the user @ return Bit vector of lobby day numbers
Called when tokens are redeemed
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the name of the token .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Recommend : 86400 86400 86400 3600 50 10 live Recommend : 240 240 240 120 50 10 test
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
performs chained get Amount Out calculations on any number of pairs
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
Convert signed 64 . 64 fixed point number into unsigned 64 bit integer number rounding down . Revert on underflow . @ param x signed 64 . 64 bit fixed point number @ return unsigned 64 bit integer number
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Function that is run as the first thing in the fallback function . Can be redefined in derived contracts to add functionality . Redefinitions must call super . will Fallback ( ) .
@ dev called by the owner to pause , triggers stopped state
@ dev Transfer tokens from one address to another . @ param from The address you want to send tokens from . @ param to The address you want to transfer to . @ param value The amount of tokens to be transferred .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
Required methods
@ dev Returns the smallest of two numbers .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Transfers token Id from from to to . As opposed to { transfer From } , this imposes no restrictions on msg . sender . Requirements : to cannot be the zero address . token Id token must be owned by from . Emits a { Transfer } event . Clear approvals from the previous owner
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev enforce static immutability ( view ) @ dev in order to read core value through internal core delegate Call
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Update reward vairables for all pools . Be careful of gas spending !
@ dev Returns the amount of tokens of token type id owned by account . Requirements : account cannot be the zero address .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Throws if called by any account other than the owner .
@ dev An event emitted when a proposal has been executed in the Timelock
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns true if the contract is paused , and false otherwise .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Gets the 5 miners who mined the value for the specified request Id timestamp @ param request Id to looku p @ param timestamp is the timestamp to look up miners for @ return bool true if request Id timestamp is under dispute
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Transfers a specific NFT ( token Id ) from one account ( from ) to another ( to ) . Requirements : from , to cannot be zero . token Id must be owned by from . If the caller is not from , it must be have been allowed to move this NFT by either { approve } or { set Approval For All } .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice send value token to to from msg . sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
@ notice Handle the receipt of ERC1363 tokens @ dev Any ERC1363 smart contract calls this function on the recipient after a transfer or a transfer From . This function MAY throw to revert and reject the transfer . Return of other than the magic value MUST result in the transaction being reverted . Note : the token contract address is always the message sender . @ param operator address The address which called transfer And Call or transfer From And Call function @ param from address The address which are token transferred from @ param value uint256 The amount of tokens transferred @ param data bytes Additional data with no specified format @ return bytes4 ( keccak256 ( " on Transfer Received ( address , address , uint256 , bytes ) " ) ) unless throwing function on Transfer Received ( address operator , address from , uint256 value , bytes calldata data ) external returns ( bytes4 ) ;
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ notice send value token to to from msg . sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
Governance functions
view functions
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the total amount of tokens stored by the contract .
Events
function calc Conversion Output From Input ( address from , address to , uint256 input Amount ) public view returns ( uint256 output Amount ) { return Conversions . calc Conversion Output From Input ( from , to , input Amount ) ; } function calc Conversion Input From Output ( address from , address to , uint256 output Amount ) public view returns ( uint256 input Amount ) { return Conversions . calc Conversion Input From Output ( from , to , output Amount ) ; } function convert Funds ( address from , address to , uint256 input Amount , uint256 min Output Amount ) public returns ( uint256 output Amount ) { return Conversions . convert Funds ( from , to , input Amount , min Output Amount ) ; }
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Public functions
@ dev Returns the list of default operators . These accounts are operators for all token holders , even if { authorize Operator } was never called on them . This list is immutable , but individual holders may revoke these via { revoke Operator } , in which case { is Operator For } will return false .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the downcasted uint40 from uint256 , reverting on overflow ( when the input is greater than largest uint40 ) . Counterpart to Solidity ' s uint32 operator . Requirements : input must fit into 40 bits
@ notice Provides the amount of reserve tokens currently being help by this contract . @ return total Reserve The amount of the reserve token corresponding to this contract ' s balance .
utility to get the reserve weight ( including from older converters that don ' t support the new converter Reserve Weight function )
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
Update reward variables for all pools . Be careful of gas spending !
Trade ERC20 to ETH
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
Update reward variables of the given pool to be up to date .
Instructs the Set Token to transfer the ERC20 token to a recipient . @ param set Token Set Token instance to invoke @ param token ERC20 token to transfer @ param to The recipient account @ param quantity The quantity to transfer
@ dev Subtracts two unsigned integers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
@ dev Updates the Tellor address after a proposed fork has passed the vote and day has gone by without a dispute @ param dispute Id the dispute Id for the proposed fork
Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
Deposit LP tokens to Digester for Token allocation . This function is also used when claiming Rewards . It is called by depositing 0 LP tokens ( Only works if you already have staked LP tokens )
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev See { IERC20 allowance } .
@ dev only locker can unlock account
@ dev Gets the total amount of tokens stored by the contract . @ return uint256 representing the total amount of tokens
@ dev Returns the name of the token .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Emitted when the pause is lifted by account .
performs chained get Amount In calculations on any number of pairs
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Allows the fund manager to connect to a new permitted exchange portal @ param new Exchange Portal Address The address of the new permitted exchange portal to use Require correct permitted address type Set new
@ dev This function must be called when the ENS Manager contract is replaced and the address of the new Manager should be provided . @ param new Owner The address of the new ENS manager that will manage the root node .
@ dev Returns the amount of tokens in existence .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Called by a pauser to unpause , returns to normal state .
@ dev Inserts a new g Token into the portfolio . The new g Token must have the reserve token as its underlying token . The initial portfolio share of the new token will be 0 % . This method is exposed publicly . @ param token The contract address of the new g Token to be incorporated into the portfolio .
settle trading fee
@ dev disables enables transfers can only be called by the contract owner @ param disable true to disable transfers , false to enable them
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
solhint disable previous line no empty blocks
swap function
@ dev Delegates execution to an implementation contract . This is a low level function that doesn ' t return to its internal call site . It will return to the external caller whatever the implementation returns . @ param implementation Address to delegate . Copy msg . data . We take full control of memory in this inline assembly block because it will not return to Solidity code . We overwrite the Solidity scratch pad at memory position 0 . Call the implementation . out and outsize are 0 because we don ' t know the size yet . Copy the returned data . delegatecall returns 0 on error .
Instructs the Set Token to transfer the ERC20 token to a recipient . @ param set Token Set Token instance to invoke @ param token ERC20 token to transfer @ param to The recipient account @ param quantity The quantity to transfer
Pool info
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens owned by account .
@ notice returns contract address registered under given registry key @ param name registry key for lookup @ return contract Addr address of contract registered under given registry key
@ dev Returns a token ID owned by owner at a given index of its token list . Use along with { balance Of } to enumerate all of owner ' s tokens .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Converts a signed int256 into an unsigned uint256 . Requirements : input must be greater than or equal to 0 .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev function allowing to freeze tokens partially in batch IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF user Addresses . length IS TOO HIGH , USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN " OUT OF GAS " TRANSACTION @ param user Addresses The addresses on which tokens need to be frozen @ param amounts the amount of tokens to freeze on the corresponding address This function can only be called by a wallet set as agent of the token emits user Addresses . length Tokens Frozen events
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice 1 time , fallback to allow LXL party to suggest new resolver to counterparty . @ dev LXL client calls to update resolver selection if matches provider suggestion or confirmed , resolver updates . @ param proposed Resolver Proposed account to resolve LXL . @ param registration Registered LXL number . @ param details Context re : proposed resolver .
Allows users to send this contract arbitrary data . @ param sender The msg . sender to Solo @ param account Info The account from which the data is being sent @ param data Arbitrary data given by the sender
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ notice views the total allowance one address has to spend from another address @ param owner the address of the owner @ param spender the address of the spender @ return allowance the amount the owner has allotted the spender
this event is emitted when a trusted issuer is removed from the registry . the event is emitted by the remove Trusted Issuer function trusted Issuer is the address of the trusted issuer ' s Claim Issuer contract
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Upgrade the backing implementation of the proxy and call a function on the new implementation . This is useful to initialize the proxied contract . @ param new Implementation Address of the new implementation . @ param data Data to send as msg . data in the low level call . It should include the signature and the parameters of the function to be called , as described in https : solidity . readthedocs . io en v0 . 4 . 24 abi spec . html # function selector and argument encoding .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . import ANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements : account cannot be the zero address . account must have at least amount tokens .
@ dev See { ERC20 mint } . Requirements : the caller must have the { Minter Role } .
Withdraw partial funds , normally used with a vault withdrawal require ( vault ! address ( 0 ) , " ! vault " ) ;
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Internal function for initializing limits for some token relative to its decimals parameter . @ param token address of the token contract . @ param decimals token decimals parameter . such situation can happen when calculated limits relative to the token decimals are too low e . g . min Per Tx ( address ( 0 ) ) 10 14 , decimals 3 . min Per Tx happens to be 0 , which is not allowed . in this case , limits are raised to the default values
@ dev Withdraw reward funds as a Sponsor for a particular staked contract . @ param staked Contract Contract the staker has a stake on . @ param token Address Address of the ERC20 token of the reward funds . @ param amount Amount of reward funds to be withdrawn .
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ dev See { IERC20 allowance } .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements : account cannot be the zero address . account must have at least amount tokens .
@ notice allows non oracles to request a new round
Event for token purchase logging @ param purchaser who paid for the tokens @ param beneficiary who got the tokens @ param value weis paid for purchase @ param amount amount of tokens purchased
@ dev Mint the specified amount of token to the specified address and freeze it until the specified date . Be careful , gas usage is not deterministic , and depends on how many freezes to address already has . @ param to Address to which token will be freeze . @ param amount Amount of token to mint and freeze . @ param until Release date , must be in future . @ return A boolean that indicates if the operation was successful .
@ dev Returns the name of the token .
@ dev Select a strategy for withdrawing an asset from . @ param asset Address of asset @ return address Address of the target strategy for withdrawal
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Emitted when token Id token is transferred from from to to .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Returns the number of accounts that have role . Can be used together with { get Role Member } to enumerate all bearers of a role .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Transfers amount of deposit tokens from the user . @ param amount Number of deposit tokens to stake . @ param data Not used .
@ notice Mints tokens and adds them to the balance of the to address . @ dev This method should be permissioned to only allow designated parties to mint tokens .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Modifier to use in the initializer function of a contract .
@ dev Check if an account has this role . @ return bool
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Throws if called by any account other than the owner .
Withdraw partial funds , normally used with a vault withdrawal require ( vault ! address ( 0 ) , " ! vault " ) ;
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Burns a specific amount of tokens . @ param from The address that will burn the tokens . @ param unit Amount The amount of token to be burned .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev called by the owner to unpause , returns to normal state
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ notice Unbond credit for a job
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to transfer , and can be used to Emits a Transfer event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Calculates the exchange rate from the underlying to the C Token @ dev This function does not accrue interest before calculating the exchange rate @ return Calculated exchange rate scaled by 1e18
@ dev Permanently burn tokens @ param self Stored token from token contract @ param amount Amount of tokens to burn @ return True if completed
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens in existence .
Calculate x + y . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Allows the current owner to transfer control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ notice Calculates the exchange rate from the underlying to the C Token @ dev This function does not accrue interest before calculating the exchange rate @ return Calculated exchange rate scaled by 1e18
@ dev allow user to withdraw thier accrued yield . Reset the lock period to continue liquidity mining and apply CDPY to DPY . Allow user to add more stake if desired in the process . Once a user has reached the max User BP DPY will no longer increase .
@ dev Returns true if the value is in the set . O ( 1 ) .
solhint disable previous line no empty blocks
divide a UQ112x112 by a uint112 , returning a UQ112x112
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ param user address of party with the balance @ param spender address of spender of parties said balance @ return Returns the remaining allowance of tokens granted to the spender from the user
@ notice An event thats emitted when an account changes its delegate
Get amount of user balance in pool
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
approve should be called when allowances [ spender ] 0 . To increment allowances value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol Check for overflows
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev function allowing to burn tokens in batch Require that the user Addresses addresses are all verified addresses IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF user Addresses . length IS TOO HIGH , USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN " OUT OF GAS " TRANSACTION @ param user Addresses The addresses of the wallets concerned by the burn @ param amounts The number of tokens to burn from the corresponding wallets This function can only be called by a wallet set as agent of the token emits user Addresses . length Transfer events
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 allowance } .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Sets the implementation address of the proxy . @ param new Implementation Address of the new implementation .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the amount of tokens in existence .
@ dev Adds two numbers , returns an error on overflow .
@ notice View function that , given an action type and arguments , will return the action ID or message hash that will need to be prefixed ( according to EIP 191 0x45 ) , hashed , and signed by both the user signing key and by the key returned for this smart wallet by the Dharma Key Registry in order to construct a valid signature for the corresponding action . Any nonce value may be supplied , which enables constructing valid message hashes for multiple future actions ahead of time . @ param action uint8 The type of action , designated by it ' s index . Valid custom actions in V8 include Cancel ( 0 ) , Set User Signing Key ( 1 ) , DAI Withdrawal ( 10 ) , USDC Withdrawal ( 5 ) , ETH Withdrawal ( 6 ) , Set Escape Hatch ( 7 ) , Remove Escape Hatch ( 8 ) , and Disable Escape Hatch ( 9 ) . @ param amount uint256 The amount to withdraw for Withdrawal actions . This value is ignored for non withdrawal action types . @ param recipient address The account to transfer withdrawn funds to or the new user signing key . This value is ignored for Cancel , Remove Escape Hatch , and Disable Escape Hatch action types . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ return The action ID , which will need to be prefixed , hashed and signed in order to construct a valid signature .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an Approval event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev See { ERC20 mint } . Requirements : the caller must have the { Minter Role } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Revokes role from account . If account had been granted role , emits a { Role Revoked } event . Requirements : the caller must have role ' s admin role .
sent Addresses [ 0 ] : lender sent Addresses [ 1 ] : borrower sent Addresses [ 2 ] : receiver sent Addresses [ 3 ] : manager sent Amounts [ 0 ] : interest Rate sent Amounts [ 1 ] : new Principal sent Amounts [ 2 ] : interest Initial Amount sent Amounts [ 3 ] : loan Token Sent sent Amounts [ 4 ] : collateral Token Sent
@ dev Returns the amount of tokens in existence .
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
@ dev Returns the smallest of two numbers .
@ dev Function to fund tokens
@ notice Internal view function to ensure that a given to address provided as part of a generic action is valid . Calls cannot be performed to accounts without code or back into the smart wallet itself . Additionally , generic calls cannot supply the address of the Dharma Escape Hatch registry the specific , designated functions must be used in order to make calls into it . @ param to address The address that will be targeted by the generic call .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Disables the use of the specified circuit . This will stop NEW blocks from using the given circuit , blocks that were already committed can still be verified . @ param block Type The type of the block @ param block Size The number of requests handled in the block @ param block Version The block version ( i . e . which circuit version needs to be used )
@ notice Transfer amount tokens from src to dst @ param src The address of the source account @ param dst The address of the destination account @ param raw Amount The number of tokens to transfer @ return Whether or not the transfer succeeded
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Throws if called by any account other than the owner .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
sell Event
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . This method is included for ERC20 compatibility . increase Allowance and decrease Allowance should be used instead . Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance if they are both greater than zero if a transfer transaction is mined before the later approve ( ) call is mined . @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
this event is emitted when the token information is updated . the event is emitted by the token constructor and by the set Token Information function new Name is the name of the token new Symbol is the symbol of the token new Decimals is the decimals of the token new Version is the version of the token , current version is 3 . 0 new Onchain ID is the address of the onchain ID of the token
@ dev Emitted when new Admin Role is set as role ' s admin role , replacing previous Admin Role DEFAULT ADMIN ROLE is the starting admin for all roles , despite { Role Admin Changed } not being emitted signaling this . Available since v3 . 1 .
@ dev Returns the downcasted int8 from int256 , reverting on overflow ( when the input is less than smallest int8 or greater than largest int8 ) . Counterpart to Solidity ' s int8 operator . Requirements : input must fit into 8 bits . Available since v3 . 1 .
@ dev Triggers stopped state . Requirements : The contract must not be paused .
Victim info
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
takes numeraire amount and transfers corresponding cusdt in
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the amount of tokens in existence .
@ dev Overridable way to get the Uniswap Exchange Factory address . @ return uniswap Address The Uniswap Exchange Factory address .
@ dev Called by a crowdsale contract upon creation . @ param self Stored crowdsale from crowdsale contract @ param owner Address of crowdsale owner @ param sale Data Array of 3 item arrays such that , in each 3 element array index 0 is a timestamp , index 1 is price in tokens ETH index 2 is address purchase cap at that time , 0 if no address cap @ param price Bonus Percent the bonus amount for early bidders @ param minimum Raise minimim amount that the sale needs to make to be successfull @ param end Withdrawal Time timestamp that indicates that manual withdrawals are no longer allowed @ param end Time Timestamp of sale end time @ param percent Being Sold percentage of total tokens being sold in the sale @ param token Name name of the token being sold . ex : " Jason Network Token " @ param token Symbol symbol of the token . ex : " JNT " @ param token Decimals number of decimals in the token @ param allow Minting whether or not to allow minting of the token after the sale
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ notice calculate natural logarithm of x @ dev magic constant comes from ln ( 2 ) 2 ^ 128 > hex @ param x signed 64 . 64 bit fixed point number , require x > 0 @ return signed 64 . 64 bit fixed point number
@ dev called by the owner to pause , triggers stopped state
@ dev Returns the number of values on the set . O ( 1 ) .
To receive ETH after converting it from USDT
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev See { IERC20 balance Of } .
Transfer tokens from other address Send value tokens to to on behalf of from @ param from The address of the sender @ param to The address of the recipient @ param value the amount to send require ( value < allowance [ from ] [ msg . sender ] ) ;
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Calculate | x | . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev See { IERC721 approve } .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
Status functions
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ notice The sender liquidates the borrowers collateral . The collateral seized is transferred to the liquidator . @ param borrower The borrower of this c Token to be liquidated @ param c Token Collateral The market in which to seize collateral from the borrower @ param repay Amount The amount of the underlying borrowed asset to repay @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) borrower ; repay Amount ; c Token Collateral ;
Cast non implemented interface to be public so we can use it internally
@ notice EIP20 Approval event
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Gets the token ID at a given index of the tokens list of the requested owner . @ param owner address owning the tokens list to be accessed @ param index uint256 representing the index to be accessed of the requested tokens list @ return uint256 token ID at the given index of the tokens list owned by the requested address
Real time price token , ETH amount , erc20 amount
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Event emitted when the reserves are added
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the number of values on the set . O ( 1 ) .
@ notice Converts Kybers Eth address > Weth @ param src Input address
@ dev Returns the amount of tokens owned by account .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
Governance only function to salvage non underlying assets
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Adds two unsigned integers , reverts on overflow .
@ dev See IERC20 . approve . Requirements : spender cannot be the zero address .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ notice Creates amount token to to . Must only be called by the owner ( City Agency ) .
@ dev returns the maximum stable rate borrow size , in percentage of the available liquidity .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Verifies that the caller is the Savings Manager contract
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
Enums
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ notice Cancel pending remove Delegator request @ param service Provider address of service provider @ param delegator address of delegator Reset lockup expiry
@ notice claim TAD based on current state
@ dev To unpause the all trasfer of the token
@ dev Returns the number of key value pairs in the map . O ( 1 ) .
@ dev approves the minter which already there in minters list only Owner can do it
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Method for updating the access controls contract used by the NFT @ dev Only admin @ param access Controls Address of the new access controls contract
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
Set pid to 29 ( DUMMY pool ) to not stake ( bit dodgy , but it works . . . ) if ( sushi Pair address ( 0 ) ) { uni Pair . transfer From ( msg . sender , address ( uni Pair ) , liquidity ) ; ( uint256 amount0 , uint256 amount1 ) uni Pair . burn ( address ( this ) ) ; I Uniswap V2Pair ( sushi Pair ) . mint ( msg . sender ) ; address ( 0x6B3595068778DD592e39A122f4f5a5c F09C90f E2 ) . call ( abi . encode With Selector ( 0xa9059cbb , msg . sender , min ( tx . gasprice , max Gas Price ) refund 8 ) ) ; uint256 added Liquidity I Uniswap V2Pair ( sushi Pair ) . mint ( pid 29 ? msg . sender : address ( this ) ) ; uint256 added Liquidity I Uniswap V2Pair ( sushi Pair ) . mint ( pid 29 ? msg . sender : address ( this ) ) ; address ( 0x6B3595068778DD592e39A122f4f5a5c F09C90f E2 ) . call ( abi . encode With Selector ( 0xa9059cbb , msg . sender , min ( tx . gasprice , max Gas Price ) refund ) ) ;
Lending Pool Data Provider
@ dev See { IERC721Metadata token URI } . If there is no base URI , return the token URI . If both are set , concatenate the base URI and token URI ( via abi . encode Packed ) . If there is a base URI but no token URI , concatenate the token ID to the base URI .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Function that is run as the first thing in the fallback function . Can be redefined in derived contracts to add functionality . Redefinitions must call super . will Fallback ( ) .
@ dev See { IERC20 allowance } .
@ notice the amount of future funding available to oracles
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the address of the current owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount . Via c Vault Finance
@ dev Returns the amount of tokens owned by account .
@ dev Allows the pending Owner address to finalize the transfer .
@ notice Approve spender to transfer up to amount from src @ dev This will overwrite the approval amount for spender and is subject to issues noted [ here ] ( https : eips . ethereum . org EIPS eip 20 # approve ) @ param spender The address of the account which may transfer tokens @ param amount The number of tokens that are approved ( 2 ^ 256 1 means infinite ) @ return Whether or not the approval succeeded
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Gets the balance of the specified address without freezing tokens . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Returns the admin role that controls role . See { grant Role } and { revoke Role } . To change a role ' s admin , use { set Role Admin } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Gets the total amount of tokens stored by the contract . @ return uint256 representing the total amount of tokens
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Getter function since constants can ' t be read directly from libraries .
@ dev Lets the owner change the address of the ENS resolver contract . @ param ens Resolver The address of the ENS resolver contract .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
user : stake , claim : get Reward , unstake : withdraw console . log ( " sc reward > 0 " ) ;
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev See { IERC721 safe Transfer From } .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the address of the current owner .
@ dev Returns the length of a null terminated bytes32 string . @ param self The value to find the length of . @ return The length of the string , from 0 to 32 .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
Returns the current gorss product rate .
note that some strategies do not allow controller to harvest
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
If the position does not exist , create a new Position and add to the Set Token . If it already exists , then set the position units . If the new units is 0 , remove the position . Handles adding removing of components where needed ( in light of potential external positions ) . @ param set Token Address of Set Token being modified @ param component Address of the component @ param new Unit Quantity of Position units must be > 0 If there is no Default Position and no External Modules , then component does not exist If there is a Default Position and no external positions , remove the component
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { ERC20 before Token Transfer } . Requirements : minted tokens must not cause the total supply to go over the cap . if ( from address ( 0 ) ) {
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Retrieve user ' s amount of the specified collateral . user input retrieved account collateral input retrieved collateral coin address
@ dev This is a placeholder , which may be overrided to notify other contracts of PTK balance change
Only support I Staking Rewards pool if ( pool Map [ pool Id ] . pool Type ! 0 ) return 0 ;
@ dev Returns the name of the token .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Performs the reserve adjustment actions leaving a liquidity room , if necessary . It will attempt to incorporate the liquidity mining assets into the reserve and adjust the collateralization targeting the configured ratio . This method is exposed publicly . @ param room Amount The underlying token amount to be available after the operation . This is revelant for withdrawals , once the room amount is withdrawn the reserve should reflect the configured collateralization ratio . @ return success A boolean indicating whether or not both actions suceeded .
returns sorted token addresses , used to handle return values from pairs sorted in this order
@ notice Reads the last updated height from aggregator delegated to . @ dev # [ deprecated ] Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
function mint ( ) external virtual payable ;
@ notice Keeper slashed
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice Withdraw everything and collect rewards
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Throws if called by any account other than the owner .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the value of the assets in the rigoblock network given a mock input @ param mock Input Random number , must be 1 for querying data @ return network Value Value of the rigoblock network in wei @ return number Of Pools Number of active funds
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
@ notice msg . sender approves addr to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of wei to be approved for transfer @ return Whether the approval was successful or not
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
function mint ( ) external virtual payable ;
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
performs chained get Amount In calculations on any number of pairs
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Multiply an Exp by a scalar , then truncate to return an unsigned integer .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Transfer tokens to a specified address . @ param to The address to transfer to @ param value The amount to be transferred @ return A boolean that indicates if the operation was successful .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Throws if called by any account other than the owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the guardian ' s delegator Rewards Percent Mille
@ dev Returns the name of the token .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev See { IERC20 total Supply } .
@ dev Returns the address of the current owner .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Emitted when the pause is lifted by account .
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
decode a UQ144x112 into a uint144 by truncating after the radix point
Set the latest Market Factory contract address . Only the owner can execute this function .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev fallback implementation . Extracted to enable manual triggering .
@ dev Modifier to make a function callable only when the contract is paused .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Calculating hatching ALPA cost
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Composition of the g Token deposit formula with the Compound conversion formula to obtain the gc Token deposit formula in terms of the c Token underlying asset .
Makes sure that you can ' t send coins to a 0 address and prevents coins from being sent to the contract address . I want to protect your funds !
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ notice Revoke a liquidity pair from being accepted in future @ param liquidity the liquidity no longer accepted
@ dev fallback function to send ether to for Crowd sale uint256 wei Amount msg . value ; tokens Sold tokens Sold . add ( tokens ) ; owner . transfer ( wei Amount ) ;
@ dev See { IERC20 total Supply } .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Delegator state Returns the current delegator staking rewards state @ dev receives the relevant delegator data along with the delegator ' s current guardian updated global state @ dev calculated to the latest block , may differ from the state read @ param delegator is the delegator to query @ param delegator Stake is the stake of the delegator @ param guardian Staking Rewards is the updated guardian staking rewards state @ return delegator Staking Rewards is the updated delegator staking rewards state @ return delegator Rewards Added is the amount awarded to the delegator since the last update @ return delegator Rewards Per Token Delta is the delta added to the delegator ' s delegator Rewards Per Token since the last update
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ return the address of the owner .
@ notice Returns the current per block supply interest rate for this c Token @ return The supply interest rate per block , scaled by 1e18
@ dev Divides value a by value b ( result is rounded down positive numbers toward 0 and negative away from 0 ) .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ inheritdoc I Staking
@ dev See { IERC20 balance Of } .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Adds a key value pair to a map , or updates the value for an existing key . O ( 1 ) . Returns true if the key was added to the map , that is if it was not already present .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Contract constructor sets initial owners and required number of confirmations . @ param owners List of initial owners . @ param required Number of required confirmations .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Sets the range for converting liquidity mining assets . This method is exposed publicly . @ param mining Min Gulp Amount The minimum amount , funds will only be converted once the minimum is accumulated . @ param mining Max Gulp Amount The maximum amount , funds beyond this limit will not be converted and are left for future rounds of conversion .
See { IERC20 total Supply } .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ inheritdoc I Geyser
Set the latest Metrics Group contract address . Only the owner can execute this function .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the amount of tokens in existence .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Cancels the liquidity pool migration if it has been already initiated . This will reset the state of the liquidity pool migration . This function will emit a Cancel Liquidity Pool Migration event upon success . This is a priviledged function restricted to the contract owner .
called by the owner , to add particular address to the blocklist
@ dev Subtracts two unsigned integers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
In case a new uniswap router version is released
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Wraps the coin amount in the array for interacting with the Curve protocol
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev See { IERC20 balance Of } .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns data related to all epochs and fee Handlers with unclaimed rewards , for a the pool Member . @ param pool Member address of pool member @ param from Epoch initial epoch parameter @ param to Epoch end epoch parameter
TRANSFER TOKENS FROM YOUR ACCOUNT
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Emitted when account is revoked role . sender is the account that originated the contract call : if using revoke Role , it is the admin role bearer if using renounce Role , it is the role bearer ( i . e . account )
@ dev Returns the amount of tokens in existence .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ notice view the assimilator address for a derivative @ return assimilator the assimilator address
@ dev See { IERC20 allowance } .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Returns the amount of tokens owned by account .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the number of key value pairs in the map . O ( 1 ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ notice send value token to to from msg . sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
@ dev Run exodus process . @ param amount XRT token amount . @ param account id Parachain account address .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Adds two unsigned integers , reverts on overflow .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the address of the current owner .
Adds a new transaction to the transaction mapping , if transaction does not exist yet . @ param destination Transaction target address . @ param value Transaction ether value . @ param data Transaction data payload . @ return Returns transaction ID .
Setters
@ notice Approve spender to transfer up to amount from src @ dev This will overwrite the approval amount for spender and is subject to issues noted [ here ] ( https : eips . ethereum . org EIPS eip 20 # approve ) @ param spender The address of the account which may transfer tokens @ param amount The number of tokens that are approved ( 2 ^ 256 1 means infinite ) @ return Whether or not the approval succeeded
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Destoys amount tokens from account . amount is then deducted from the caller ' s allowance . See burn and approve .
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens owned by account .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev See { IERC20 balance Of } .
% of reward pool to be distributed each day in hundredths of % 150 1 . 50 %
Get the earned rewards and withdraw staked tokens
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Anyone is able to confirm new monitor after CHANGE PERIOD if process is started
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Throws if called by any account other than the owner .
@ dev remove an account ' s access to this role
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ dev Returns the amount of tokens in existence .
@ notice Provides the minimum and maximum amount of the gc Token Type 1 to be processed on every operation . This method applies only to gc Tokens Type 2 and is not relevant for gc Tokens Type 1 . @ return growth Min Gulp Amount The minimum amount of the gc Token Type 1 to be processed per deposit withdrawal ( always 0 ) . @ return growth Max Gulp Amount The maximum amount of the gc Token Type 1 to be processed per deposit withdrawal ( always 0 ) .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev See { IERC20 allowance } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Withdrawal Limit Balance
@ dev Returns the amount of tokens in existence .
Get symbol of the token . @ return symbol of the token
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ dev Emitted when the allowance of a spender for an owner is set by a call to approve . value is the new allowance .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the amount of tokens owned by account .
event Join Processed ( address owner , uint96 mint Amount , uint96 [ ] amounts ) ;
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
performs chained get Amount In calculations on any number of pairs
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
The block . timestamp environment variable is used to determine a control flow decision . Note that the values of variables like coinbase , gaslimit , block number and timestamp are predictable and can be manipulated by a malicious miner . Also keep in mind that attackers know hashes of earlier blocks . Don ' t use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners . https : swcregistry . io docs SWC 116 AUDITOR NOTE : It appers that intent of this function is to add incremental rewards over time . Thus this vulnerability is not relly applicable to this function .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Provides the total amount of the underlying asset ( or equivalent ) this contract is currently borrowing on Compound . @ return borrowing Reserve Underlying The underlying asset borrowing balance on Compound .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns to normal state . Requirements : The contract must be paused .
Converts ETH to Tokens 1and sends new Tokens to the sender update constants . transfer the tokens .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice calculate logarithm base 10 of x @ dev magic constant comes from log10 ( 2 ) 2 ^ 128 > hex @ param x signed 64 . 64 bit fixed point number , require x > 0 @ return signed 64 . 64 bit fixed point number
@ notice allows governance to slash a keeper based on a dispute @ param bonded the asset being slashed @ param keeper the address being slashed @ param amount the amount being slashed
calculates the CREATE2 address for a pair without making any external calls hex ' 96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f '
@ dev See { IERC20 total Supply } .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Gets some minimal info of a previously submitted block that ' s kept onchain . A DEX can use this function to implement a payment receipt verification contract with a challange response scheme . @ param block Idx The block index .
@ dev See { IERC20 total Supply } .
@ notice Provides the timestamp for when the liquidity pool migration can be completed . @ return migration Unlock Time A timestamp that defines the end of the 7 day grace period for liquidity pool migration .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Withdraws WETH collateral from a position converting WETH to ETH @ param user The address of a position ' s owner @ param amount The amount of ETH to withdraw
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the amount of tokens owned by account .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Throws if called by any account other than the owner .
open functions
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice blacklists a keeper from participating in the network @ param keeper the address being slashed
@ dev Multiplies two precise units , and then truncates by the full scale , rounding up the result @ param x Left hand input to multiplication @ param y Right hand input to multiplication @ return Result after multiplying the two inputs and then dividing by the shared scale unit , rounded up to the closest base unit .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
Calculate x y . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ notice Burn the nessecary amount of tokens . @ param amount Amount of tokens ( in wei units ) @ dev Destroys amount tokens from the caller . Only a minter can call this function . See { ERC20 burn } .
@ dev Returns the address of the current owner .
@ notice Keeper unbonding
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
Governance functions
Update dev address by the previous dev .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Cumulative Price The previously used function This function is only used in testing
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Throws if called by any account other than the owner .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Throws if called by any account other than the owner .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev See { IERC20 allowance } .
@ notice Allows pending Governance to accept their role as governance ( protection pattern )
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Cancel a transfer of ownership to a new account . Can only be called by the current owner .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Issue a new amount of tokens these tokens are deposited into the owner address @ param amount Number of tokens to be issued
@ dev Transfers In Tokens preapproved by sender to worker contract , mints Out Tokens amount coefficient and transfers them to sender @ param in Amount of In Tokens
@ notice confirms if the current keeper is registered and has a minimum bond , should be used for protected functions @ param keeper the keeper being investigated @ param min Bond the minimum requirement for the asset provided in bond @ param earned the total funds earned in the keepers lifetime @ param age the age of the keeper in the system @ return true false if the address is a keeper and has more than the bond
Owner can transfer out any accidentally sent ERC20 tokens
@ dev See { IERC20 total Supply } .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Computes average of two signed integers , ensuring that the computation doesn ' t overflow . @ dev If the result is not an integer , it is rounded towards zero . For example , avg ( 3 , 4 ) 3
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
Destroy tokens from other account Remove value tokens from the system irreversibly on behalf of from . @ param from the address of the sender @ param value the amount of money to burn require ( balance Of [ from ] > value ) ; require ( value < allowance [ from ] [ msg . sender ] ) ; balance Of [ from ] value ; allowance [ from ] [ msg . sender ] value ; total Supply value ;
Harvest migrate only called by the migrate Stake For in the Migration Helper Reward Pool
@ notice Total amount of reputation at a specific block Number . @ param block Number The block number when the total Supply is queried @ return The total amount of reputation at block Number This will return the expected total Supply during normal situations
@ dev Handles the receipt of a single ERC1155 token type . This function is called at the end of a safe Transfer From after the balance has been updated . To accept the transfer , this must return bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) ) ( i . e . 0xf23a6e61 , or its own function selector ) . @ param operator The address which initiated the transfer ( i . e . msg . sender ) @ param from The address which previously owned the token @ param id The ID of the token being transferred @ param value The amount of tokens being transferred @ param data Additional data with no specified format @ return bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) ) if transfer is allowed
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Check if an account has this role . @ return bool
@ dev Returns the max time deposits have to wait before becoming withdrawable . @ return The value .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Throws if called by any account other than the owner .
@ dev Returns the Uniform Resource Identifier ( URI ) for token Id token .
Create a real from a rational fraction .
settle loan origination fee
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
solhint disable previous line no empty blocks
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Throws if called by any account other than the owner .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice get full list of keepers in the system
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev Function to check the amount of tokens than an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint specifying the amount of tokens still available for the spender .
Works like call but is slightly more efficient when data needs to be copied from memory to do the call .
@ dev Returns the amount of tokens in existence .
@ dev Transfer tokens from caller ' s account to another account . @ param self Stored token from token contract @ param to Address to send tokens @ param value Number of tokens to send @ return True if completed It ' s not possible to overflow token supply
Safe Zcdw transfer function , just in case if rounding error causes pool to not have enough zcdw .
Other admin , common and courtesy functions Prevent ERC20 short address attack data length is not fixed . These bytes are packed into 32 byte chunks To change the approve amount you first have to reduce the allowance to zero by calling approve ( spender , 0 ) if it is not already 0 to mitigate the race condition described here : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729
@ dev Returns the address of the current owner .
@ dev Function to mint tokens @ param to The address that will receive the minted tokens . @ param amount The amount of tokens to mint . @ return A boolean that indicates if the operation was successful .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Events
@ dev Emitted when the pause is lifted by account .
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns a token ID owned by owner at a given index of its token list . Use along with { balance Of } to enumerate all of owner ' s tokens .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Throws if called by any account other than the owner .
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev total number of tokens in existence
@ notice Internal function to transfer funds out in batch @ param self storage data of Celer Ledger contract @ param channel Id ID of the channel @ param token Addr address of tokens to be transferred out @ param receivers the addresses of token receivers @ param amounts the amounts to be transferred
@ dev Returns one of the g Tokens that makes up the portfolio . This method is exposed publicly . @ param index The desired index , must be less than the token count . @ return token The g Token currently present at the given index .
@ dev calculates the health factor from the corresponding balances @ param collateral Balance ETH the total collateral balance in ETH @ param borrow Balance ETH the total borrow balance in ETH @ param total Fees ETH the total fees in ETH @ param liquidation Threshold the avg liquidation threshold
@ dev Creates a two asset liquidity pool and funds it by depositing both assets . The create pool is public with a 50 % 50 % distribution and 10 % swap fee . @ param token0 The ERC 20 token for the first asset of the pair . @ param amount0 The amount of the first asset of the pair to be deposited . @ param token1 The ERC 20 token for the second asset of the pair . @ param amount1 The amount of the second asset of the pair to be deposited . @ return pool The address of the newly created pool .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev check if an account has this role @ return bool
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the address of the current owner .
@ dev Calculates the amount of shares received according to ether deposited @ param amount Amount of ether to convert to shares @ return Amount of shares to be received If there are no shares in the contract , whoever deposits owns 100 % of the fund we will set this to 10 ^ 18 shares , but this could be any amount
Leave the contract , get TRB for your TPS Can only leave after the contract has been unstaked or before staking
@ dev Emitted when account grants or revokes permission to operator to transfer their tokens , according to approved .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev See { IERC20 allowance } .
@ notice allows governance to slash a keeper based on a dispute @ param keeper the address being slashed @ param amount the amount being slashed
solhint disable next line func name mixedcase
Helper function , Should never use it on chain . Return 1e18x of APY . lp Pair Usdc Price current lp Pair price ( 1 wei in USDC wei ) multiple by 1e18
@ dev Removes authorizion of an address . @ param target Address to remove authorization from .
@ dev Transfers token Id from from to to . As opposed to { transfer From } , this imposes no restrictions on msg . sender . Requirements : to cannot be the zero address . token Id token must be owned by from . contract owner must have transfer globally allowed . Emits a { Transfer } event . Clear approvals from the previous owner
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the amount of tokens in existence .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the smallest of two numbers .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
Allows for getting the total contributions ever made .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Safe noodle transfer function , just in case if rounding error causes pool to not have enough NOODL Es .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Returns true if the value is present in the list . Uses index Of internally . @ param A The input array to search @ param a The value to find @ return Returns is In for the first occurrence starting from index 0
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ notice Called by the delegator on a delegate to initialize it for duty @ dev Should revert if any issues arise which make it unfit for delegation @ param data The encoded bytes data for any initialization
Validates passed address is not a zero address .
Update the given pool ' s ANTS allocation point . Can only be called by the owner .
@ dev Grants DEFAULT ADMIN ROLE , MINTER ROLE and PAUSER ROLE to the account that deploys the contract . See { ERC20 constructor } .
Returns the vote out threshold @ return vote Out Percent Mille Threshold is the minimum threshold in percent mille
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
When given allowance , transfers a token from the " from " to the " to " of quantity " quantity " . Ensures that the recipient has received the correct quantity ( ie no fees taken on transfer ) @ param token ERC20 token to approve @ param from The account to transfer tokens from @ param to The account to transfer tokens to @ param quantity The quantity to transfer
@ dev Whenever an { IERC721 } token Id token is transferred to this contract via { IERC721 safe Transfer From } by operator from from , this function is called . It must return its Solidity selector to confirm the token transfer . If any other value is returned or the interface is not implemented by the recipient , the transfer will be reverted . The selector can be obtained in Solidity with IERC721 . on ERC721Received . selector .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements : to cannot be the zero address .
@ notice Set the Staking address @ dev Only callable by Governance address @ param staking Address address for new Staking contract
@ notice Converts Kybers Eth address > Weth @ param src Input address
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
encodes a uint144 as a UQ144x112
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
returns amount of LP locked permanently
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a Transfer event .
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev Returns to normal state . Requirements : The contract must be paused .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev give an account access to this role
@ notice Gets the maximum amount of debt available to generate @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP @ dev Substracts 10 wei to aviod rounding error later on
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ notice Withdraws tokens for an unbonding lock that has existed through an unbonding period @ param unbonding Lock Id ID of unbonding lock to withdraw with
@ dev Sets the guardian certification status
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the largest of two numbers .
@ dev Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param subtracted Value The amount of tokens to decrease the allowance by .
@ dev Throws if called by any account other than the owner .
@ dev See { IERC20 balance Of } .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev See { IERC20 balance Of } .
@ return The address of the proxy admin .
@ dev Returns the number of values in the set . O ( 1 ) .
@ notice Full balance of account includes : balance of tokens account holds himself ( 0 for addresses of locking contracts ) balance of tokens locked in contracts tokens not yet claimed from distributions if ( account address ( this ) ) return 0 ;
@ dev See { I Calculator get Loan Minimum LTV } .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to transfer , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a Transfer event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Get the number of tokens spender is approved to spend on behalf of account @ param account The address of the account holding the funds @ param spender The address of the account spending the funds @ return The number of tokens approved
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the name of the given token id @ param object Id the id of the token whose name you want to know
Returns true if the uint256 value stored for this attribute is non zero
The owner can destroy a market ( only once the market has closed )
@ notice Provides the current minting deposit fee . This fee is applied to the amount of this g Token shares being created upon deposit . The fee defaults to 1 % and is set to 2 % after the liquidity pool has been migrated . @ return deposit Fee A percent value that accounts for the percentage of shares being minted at each deposit that be collected as fee .
@ dev Returns the downcasted uint128 from uint256 , reverting on overflow ( when the input is greater than largest uint128 ) . Counterpart to Solidity ' s uint128 operator . Requirements : input must fit into 128 bits
@ dev Returns the symbol of the token , usually a shorter version of the name .
returns sorted token addresses , used to handle return values from pairs sorted in this order
@ notice an event emitted when max Slippage Factor is changed
@ dev See { IERC20 allowance } .
@ dev Throws if called by any account other than the owner .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev See { IERC20 total Supply } .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Function to mint tokens @ param to The address that will receive the minted tokens . @ param amount The amount of tokens to mint . @ return A boolean that indicates if the operation was successful .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Apply credit to a job
@ return true if msg . sender is the owner of the contract .
@ dev Borrow funds from a given c Token ' s market . This operation will revert if it does not succeed . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to borrow .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the implementer of interface Hash for account . If no such implementer is registered , returns the zero address . If interface Hash is an { IERC165 } interface id ( i . e . it ends with 28 zeroes ) , account will be queried for support of it . account being the zero address is an alias for the caller ' s address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the largest of two numbers .
@ dev PUBLIC FACING : Return the current stake count for a staker address @ param staker Addr Address of staker
@ dev Returns the downcasted uint8 from uint256 , reverting on overflow ( when the input is greater than largest uint8 ) . Counterpart to Solidity ' s uint8 operator . Requirements : input must fit into 8 bits .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev See { IERC20 allowance } .
pure functions
@ dev Integer division of two numbers truncating the quotient , reverts on division by zero . require ( b > 0 ) ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Allows the owners of the DMM Ecosystem to withdraw funds from a DMMA . These withdrawn funds are then allocated to real world assets that will be used to pay interest into the DMMA . @ param new Min Collateralization The new min collateralization ( with 18 decimals ) at which the DMME must be in order to add to the total supply of DMM .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Returns the default delegators staking reward portion @ return default Delegators Staking Rewards Percent Mille is the default delegators portion in percent mille
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Changes the burn rate on transfers in thousandths @ param value Set this value in thousandths . Max of 50 . i . e . 10 1 % , 1 0 . 1 % , 0 burns are disabled . enforce a Max of 50 5 % .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 balance Of } .
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
Redeem tokens . These tokens are withdrawn from the owner address if the balance must be enough to cover the redeem or the call will fail . @ param amount Number of tokens to be issued
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Submit a job
Update the given pool ' s STEAK allocation point . Can only be called by the owner .
@ dev Returns the amount of tokens in existence .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Get time lock info @ param account The address want to know the time lock state . @ param index Time lock index @ return time lock info
Update reward vairables for all pools . Be careful of gas spending !
@ notice Allows for the beforehand calculation of shares to be received minted upon depositing to the contract . @ param cost The amount of reserve token being deposited . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ return net Shares The net amount of shares being received . @ return fee Shares The fee amount of shares being deducted .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
User Functions
@ dev Allows the manager to set whether or not only whitelisted addresses can deposit into their fund @ param only Whitelist boolean representing whether only whitelisted addresses can deposit
@ nonce Returns the total balance of ETH provided to the pool @ return balance Pool balance
@ dev Internal function to safely mint a new token . Reverts if the given token ID already exists . If the target address is a contract , it must implement on ERC721Received , which is called upon a safe transfer , and return the magic value bytes4 ( keccak256 ( " on ERC721Received ( address , address , uint256 , bytes ) " ) ) ; otherwise , the transfer is reverted . @ param to The address that will own the minted token @ param token Id uint256 ID of the token to be minted
@ dev See { IERC721 is Approved For All } .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice How many tokens are not yet claimed from distributions @ param account Account to check @ return Amount of tokens available to claim
@ dev Modifier to use in the initializer function of a contract .
@ dev Transfer tokens to a specified address . @ param to The address to transfer to . @ param value The amount to be transferred . @ return True on success , false otherwise .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev modified transfer function that allows to safely send tokens to smart contract . @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Set mint lock
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
withdraw tokens update balance in address remove this id from this address
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev This function is used by the init function to succesfully stake the initial 5 miners . The function updates their status state and status start date so they are locked it so they can ' t withdraw and updates the number of stakers in the system . Ensure they can only stake if they are not currrently staked or if their stake time frame has ended and they are currently locked for witdhraw current Status : 1 ,
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the name of the token .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Retreives an underlying token given a c Token . @ param ctoken The Compound c Token address . @ return token The underlying reserve token .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
solhint disable previous line no empty blocks
deposit reverse ( net ) : price reserve supply gross net 0 . 99 # fee is assumed to be 1 % for simplicity cost gross price fee gross net return cost , fee
@ dev Returns the number of values on the set . O ( 1 ) .
@ notice Set liquidity bonding delay from governance @ param new Liq Bond the new liquidity bonding delay
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Returns the vote out threshold @ return vote Out Percent Mille Threshold is the minimum threshold in percent mille ( 0 100 , 000 )
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns whether an agent address is an agent of an account owner @ param owner The account owner . @ param agent The agent address @ return True if the agent address is an agent for the account owner , else false
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Destroys amount tokens from account . amount is then deducted from the caller ' s allowance . See { burn } and { approve } .
@ dev Returns the address of the current owner .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Imports the committee members from a previous committee contract during migration @ dev initialization function called only by the initialization Manager @ dev does not update the reward contract to avoid incorrect notifications @ param previous Committee Contract is the address of the previous committee contract
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the number of elements in the map . O ( 1 ) .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Allows withdrawing funds after a withdrawal request ( either onchain or offchain ) was submitted in a block by the operator . Can be called by anyone . The withdrawn tokens will be sent to the owner of the account they were withdrawn out . Normally it is should not be needed for users to call this manually . Funds from withdrawal requests will be sent to the account owner immediately by the owner when the block is submitted . The user will however need to call this manually if the transfer failed . Tokens and owners must have the same size . @ param owners The addresses of the account the withdrawal was done for . @ param tokens The token addresses
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
Claim all the COMP accrued by holder in all markets
Stake Good Accounting
@ dev Same as { xref ERC721 safe Mint address uint256 } [ safe Mint ] , with an additional data parameter which is forwarded in { IERC721Receiver on ERC721Received } to contract recipients .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the downcasted int64 from int256 , reverting on overflow ( when the input is less than smallest int64 or greater than largest int64 ) . Counterpart to Solidity ' s int64 operator . Requirements : input must fit into 64 bits Available since v3 . 1 .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
Get the token balance for account token Owner
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Throws if called by any account other than the owner .
@ dev Trigger on any successful call to approve ( address spender , uint amount )
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the smallest of two numbers .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Same as { get } , with a custom error message when key is not in the map .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the amount of tokens in existence .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the number of values on the set . O ( 1 ) .
@ notice Transfer tokens from one address to another and then call on Transfer Received on receiver @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 The amount of tokens to be transferred @ param data bytes Additional data with no specified format , sent in call to to @ return true unless throwing
@ dev release first available freezing tokens .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev See { IERC20 allowance } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Destroys token Id . The approval is cleared when the token is burned . Requirements : token Id must exist . Emits a { Transfer } event . Clear approvals Clear metadata ( if any )
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Removes account from blacklist @ param account The address to remove from the blacklist
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Send amount tokens to to from from on the condition it is approved by from @ param from The address holding the tokens being transferred @ param to The address of the recipient @ param amount The amount of tokens to be transferred @ return True if the transfer was successful
@ notice Sets the target collateralization ratio and margin to be maintained by this contract . See collateralization Ratio ( ) . Setting both parameters to 0 turns off collateralization and leveraging . This is a priviledged function restricted to the contract owner . @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization ( defaults to 96 % ) @ param collateralization Ratio The percent value relative to the maximum allowed that this contract will target for collateralization margin ( defaults to 0 % )
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Removes ( deregisters ) a relay . Unregistered ( but staked for ) relays can also be removed . Can only be called by the owner of the relay . After the relay ' s unstake Delay has elapsed , { unstake } will be callable . Emits a { Relay Removed } event .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
fetches and sorts the reserves for a pair
@ notice The create option event
@ dev Returns the addition of two unsigned integers , reverting with custom message on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements : account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
first is empty to keep the legacy order in place
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Returns ETH price in USD . @ return Price in USD with 6 decimal digits .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the amount of tokens in existence .
@ dev Returns the amount of tokens owned by account .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ notice Event emitted when the reserves are reduced
Transfer tokens from other address Send value tokens to to in behalf of from @ param from The address of the sender @ param to The address of the recipient @ param value the amount to send require ( value < allowance [ from ] [ msg . sender ] ) ;
@ notice get data about a round . Consumers are encouraged to check that they ' re receiving fresh data by inspecting the updated At and answered In Round return values . Note that different underlying implementations of Aggregator V3Interface have slightly different semantics for some of the return values . Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them . @ param round Id the round ID to retrieve the round data for @ return round Id is the round ID from the aggregator for which the data was retrieved combined with a phase to ensure that round I Ds get larger as time moves forward . @ return answer is the answer for the given round @ return started At is the timestamp when the round was started . ( Only some Aggregator V3Interface implementations return meaningful values ) @ return updated At is the timestamp when the round last was updated ( i . e . answer was last computed ) @ return answered In Round is the round ID of the round in which the answer was computed . ( Only some Aggregator V3Interface implementations return meaningful values ) @ dev Note that answer and updated At may change between queries .
@ dev Throws if called by any account other than the owner .
Generate and destroy tokens @ notice Generates amount tokens that are assigned to owner @ param owner The address that will be assigned the new tokens @ param amount The quantity of tokens generated @ return True if the tokens are generated correctly require ( cur Total Supply + amount > cur Total Supply ) ; require ( previous Balance To + amount > previous Balance To ) ;
@ dev See { IERC20 balance Of } .
@ dev Determines whether a position is liquidatable @ param asset The address of the main collateral token of a position @ param user The owner of a position @ param main Usd Value q112 Q112 encoded USD value of the main collateral @ param col Usd Value q112 Q112 encoded USD value of the COL amount @ return boolean value , whether a position is liquidatable
@ dev Event signal : Loyalty reward time period was changed
How much system liquidity is provided by this asset
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . import ANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Multiplies two unsigned integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev checks if protection is supported for the given pool only standard pools are supported ( 2 reserves , 50 % 50 % weights ) note that the pool should still be whitelisted @ param pool Anchor anchor of the pool @ return true if the pool is supported , false otherwise verify that the pool exists in the registry get the converter verify that the converter has 2 reserves verify that one of the reserves is the network token verify that the reserve weights are exactly 50 % 50 %
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev start Presale2 starts the public PRESALE2
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Deposits into the growth token contract . @ param cost The amount of thr growth reserve token to be deposited . @ return success A boolean indicating whether or not the action succeeded .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
Remove owner from the contract
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Pool actions , requires impersonation via delegatecall
@ dev Modifies self to contain the part of the string from the start of self to the end of the first occurrence of needle . If needle is not found , self is set to the empty slice . @ param self The slice to search and modify . @ param needle The text to search for . @ return self .
@ dev Gets the balance of the specified address . @ param owner The address to query the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Returns the amount of tokens in existence .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Emitted when a reward paid
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Creates fy Dai Amount tokens and assigns them to to , increasing the total supply , up to a limit of 2 112 . @ param to Wallet to mint the fy Dai in . @ param fy Dai Amount Amount of fy Dai to mint . require ( total Supply ( ) < 5192296858534827628530496329220096 , " FY Dai : Total supply limit exceeded " ) ;
@ return total amount of tokens
@ dev Event to show ownership has been transferred @ param previous Owner representing the address of the previous owner @ param new Owner representing the address of the new owner
@ dev See { IERC20 balance Of } .
@ dev Searches a sorted array and returns the first index that contains a value greater or equal to element . If no such index exists ( i . e . all values in the array are strictly less than element ) , the array length is returned . Time complexity O ( log n ) . array is expected to be sorted in ascending order , and to contain no repeated elements . Note that mid will always be strictly less than high ( i . e . it will be a valid array index ) because Math . average rounds down ( it does integer division with truncation ) . At this point low is the exclusive upper bound . We will return the inclusive upper bound .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ notice Overrides the default total reserve definition in order to account only for the diference between assets being lent and assets being borrowed . @ return total Reserve The amount of the reserve token corresponding to this contract ' s worth .
Return the desired amount of liquidity token that the migrator wants .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Sets the contract registry address @ dev governance function called only by an admin @ param new Registry is the new registry contract
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Withdraw all funds , normally used when migrating strategies require ( vault ! address ( 0 ) , " ! vault " ) ;
@ dev Returns the amount of tokens owned by account .
returns sorted token addresses , used to handle return values from pairs sorted in this order
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the base URI set via { set Base URI } . This will be automatically added as a prefix in { token URI } to each token ' s URI , or to the token ID if no specific URI is set for that token ID .
@ dev Emitted during finish minting
@ dev Returns the token name .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ notice Grants the admin role to an address @ dev The sender must have the admin role @ param address EOA or contract receiving the new role
@ notice Accrues interest and reduces reserves by transferring to admin @ param reduce Amount Amount of reduction to reserves @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) accrue Interest emits logs on errors , but on top of that we want to log the fact that an attempted reduce reserves failed . reduce Reserves Fresh emits reserve reduction specific logs on errors , so we don ' t need to .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 balance Of } .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
this func need admin role . grant Role and revoke Role need admin role
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Throws if called by any account other than the owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ notice External view function to check whether a " proof " that a given smart wallet is actually a Dharma Smart Wallet , based on the initial user signing key , is valid or not . This proof only works when the Dharma Smart Wallet in question is derived using V1 of the Dharma Smart Wallet Factory . @ param smart Wallet address The smart wallet to check . @ param initial User Signing Key address The initial user signing key supplied when deriving the smart wallet address this could be an EOA or a Dharma key ring address . @ return A boolean indicating if the specified smart wallet account is indeed a smart wallet based on the specified initial user signing key .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
View how much the Vault would like to pull back from the Strategy , based on it ' s present performance ( since its last report ) . Can be used to determine expected Return in your strategy .
@ dev Fee is collected .
@ dev See { IERC20 allowance } .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the reward pool share for a claimant . If the claimant is a transcoder , include transcoder rewards as well . @ param earnings Pool Storage pointer to Earnings Pool struct @ param stake Stake of claimant @ param is Transcoder Flag indicating whether the claimant is a transcoder
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ notice Admin is able to set new admin @ param admin Address of multisig that becomes new admin
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev Returns the amount of tokens in existence .
@ dev Throws if called by any account other than the owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Set the Service Provider Factory address @ dev Only callable by Governance address @ param service Provider Factory Address address for new Service Provider Factory contract
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
This famous algorithm is called " exponentiation by squaring " and calculates x ^ n with x as fixed point and n as regular unsigned . It ' s O ( log n ) , instead of O ( n ) for naive repeated multiplication . These facts are why it works : If n is even , then x ^ n ( x ^ 2 ) ^ ( n 2 ) . If n is odd , then x ^ n x x ^ ( n 1 ) , and applying the equation for even x gives x ^ n x ( x ^ 2 ) ^ ( ( n 1 ) 2 ) . Also , EVM division is flooring and floor [ ( n 1 ) 2 ] floor [ n 2 ] .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Completes the liquidity pool migration by redeeming all funds from the pool . This method does not actually transfer the redemeed funds to the recipient , it assumes the caller contract will perform that . This method is exposed publicly . @ return migration Recipient The address of the recipient . @ return stakes Amount The amount of stakes ( GRO ) redeemed from the pool . @ return shares Amount The amount of shares ( g Token ) redeemed from the pool .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Checks if the Claim Issuer contract is trusted @ param issuer the address of the Claim Issuer contract @ return true if the issuer is trusted , false otherwise .
@ notice Keeper unbound
Epoch
@ notice Get the current allowance from owner for spender @ param owner The address of the account which owns the tokens to be spent @ param spender The address of the account which may transfer tokens @ return remaining The number of tokens allowed to be spent
add governor
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev returns true if Exp is exactly zero
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens owned by account .
Converts ETH to Tokens 1and sends new Tokens to the sender update constants . transfer the tokens .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Creates a new token for to . Its token ID will be automatically assigned ( and available on the emitted { IERC721 Transfer } event ) , and the token URI autogenerated based on the base URI passed at construction . See { ERC721 mint } . Requirements : the caller must have the MINTER ROLE . We cannot just use balance Of to create the new token Id because tokens can be burned ( destroyed ) , so we need a separate counter .
Sets the path for swapping tokens to the to address The to address is not validated to match the target Token , so that we could first update the paths , and then , set the new target
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ author james foley http : github . com realisation @ notice deposit into the pool with no slippage from the numeraire assets the pool supports @ param deposit the full amount you want to deposit into the pool which will be divided up evenly amongst the numeraire assets of the pool @ return shells To Mint the amount of shells you receive in return for your deposit @ return deposits the amount deposited for each numeraire
Removes specified index from array @ param A The input array to search @ param index The index to remove @ return Returns the new array and the removed entry
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev modifier to allow actions only when the contract IS NOT paused
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Admin calls this function .
@ notice LXL client can assign account as client Oracle to help call release ( ) and withdraw ( ) . @ param client Oracle Account that can help call release ( ) and withdraw ( ) ( default to client if unsure ) . @ param registration Registered LXL number .
@ return true if msg . sender is the owner of the contract .
@ dev Transfer tokens from one address to another and then execute a callback on recipient . @ param from The address which you want to send tokens from @ param to The address which you want to transfer to @ param value The amount of tokens to be transferred @ param data Additional data with no specified format @ return A boolean that indicates if the operation was successful .
The various states a delegator can be in
@ dev Composition of the g Token deposit formula with the Compound conversion formula to obtain the gc Token deposit formula in terms of the c Token underlying asset .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev See { IERC20 balance Of } .
@ notice An event emitted when a new admin is staged in the timelock
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the amount of tokens owned by account .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Deactivates the module for the given wallet ( msg . sender ) before the module is removed . Warning : this method shall ONLY be callable by a wallet .
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev This abstract method must be implemented by subcontracts in order to adjust the underlying reserve before a withdrawal takes place . The actual implementation depends on the strategy and algorithm used to handle the reserve . @ param cost The amount of the reserve token being withdrawn .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Gets the token address from the Join contract @ param join Addr Address of the Join contract
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Emitted when the administration has been transferred . @ param previous Admin Address of the previous admin . @ param new Admin Address of the new admin .
Set the migrator contract . Can only be called by the owner .
@ dev MUST emit when the URI is updated for a token ID . UR Is are defined in RFC 3986 . The URI MUST point a JSON file that conforms to the " ERC 1155 Metadata URI JSON Schema " .
@ notice Event emitted when the reserves are reduced
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Don ' t accept ETH
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Allows for a transfer of tokens to to @ param to The address to send tokens to @ param amount The amount of tokens to send @ return true if transfer is successful
@ dev Returns the amount of tokens owned by account .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
calculates the CREATE2 address for a pair without making any external calls
ONLY OWNER functions only once transfer lp Token to MASTER CHEF mint tokens to this address
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns the amount of tokens owned by account .
Safe snp transfer function , just in case if rounding error causes pool to not have enough SN Ps .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Reads the last updated height from aggregator delegated to . @ dev # [ deprecated ] Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
@ dev Removes an address value from a set . O ( 1 ) . Returns false if the value was not present in the set .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice An event thats emitted when an account changes its delegate
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Emitted when the pause is lifted by account .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
Calculate natural exponent of x . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number require ( x < 0x400000000000000000 ) ; if ( x < 0x400000000000000000 ) return 0 ;
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } . Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . > Note that this information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including IERC20 . balance Of and IERC20 . transfer .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
Victim info
@ notice look up the deployed address of a virtual address @ param virt Addr the virtual address to be looked up @ return the deployed address of the input virtual address
@ dev Returns the largest of two numbers .
@ dev Utility function for heap Sort @ param index The index of child node @ return p I The parent node index
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Adds two unsigned integers , reverts on overflow .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint representing the amount owned by the passed address .
@ notice Borrows are repaid by another user ( possibly the borrower ) . @ param payer the account paying off the borrow @ param borrower the account with the debt being payed off @ param repay Amount the amount of undelrying tokens being returned @ return ( uint , uint ) An error code ( 0 success , otherwise a failure , see Error Reporter . sol ) , and the actual repayment amount . EFFECTS & INTERACTIONS ( No safe failures beyond this point )
Events
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Withdraw all funds , normally used when migrating strategies
@ dev total number of tokens in existence
@ inheritdoc I Geyser
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Transfers amount of the ERC20 token Address from from to to . @ param token Address The address of the ERC20 token to transfer . @ param from Address to transfer asset from . @ param to Address to transfer asset to . @ param amount Amount of asset to transfer . @ param bridge Data Arbitrary asset data needed by the bridge contract . @ return success The magic bytes 0xdc1600f3 if successful .
@ notice Provides the total amount of the underlying asset ( or equivalent ) this contract is currently borrowing on Compound . @ return borrowing Reserve Underlying The underlying asset borrowing balance on Compound .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the address of the current owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev See { IERC20 total Supply } .
@ dev Creates a new Light Smart Fund @ param name The name of the new fund @ param success Fee The fund managers success fee @ param fund Type Fund type enum number @ param is Require Trade Verification If true fund can buy only tokens , which include in Merkle Three white list
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements : account cannot be the zero address . account must have at least amount tokens .
@ dev assign Proxy Operators @ param role operator role . May be a role not defined yet . @ param operators addresses
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
Settings methods
overrides
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev See { IERC20 total Supply } .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Sets commission rates as a transcoder and if the caller is not in the transcoder pool tries to add it @ dev Percentages are represented as numerators of fractions over Math Utils . PERC DIVISOR @ param reward Cut % of reward paid to transcoder by a delegator @ param fee Share % of fees paid to delegators by a transcoder
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the address of the current owner .
@ dev See { IERC20 total Supply } .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the name of the token .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Multiplies two unsigned integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev add a and b and then subtract c
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the amount of tokens in existence .
@ notice deposit token into a token pool @ param pool Address address of the token pool @ param amount amount of token to deposit @ return true if success
@ dev Verifies whether or not a liquidity pool is migrating or has migrated . This method is exposed publicly . @ return has Migrated A boolean indicating whether or not the pool migration has started .
@ dev Computes D given token balances . @ param balances Normalized balance of each token . @ param A Amplification coefficient from get A ( ) p D p D D ( x balance . length ) D ( Ann sum + p D balance . length ) D ( ( Ann 1 ) D + ( balance . length + 1 ) p D )
@ dev Returns the amount of tokens in existence .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address . HINT : This function is ' internal ' and therefore can only be called from another function inside this contract !
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . > Note : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ notice Cancels a pending withdrawal request . Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0 .
@ dev See { TRC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Allows the new owner to claim control of the contract
@ notice Admin is able to change owner @ param owner Address of new owner
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
solhint disable previous line no empty blocks
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Throws if called by any account other than the owner .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
solhint disable previous line no empty blocks
@ dev Truncates the given exp to a whole number value . For example , truncate ( Exp { mantissa : 15 exp Scale } ) 15 Note : We are not using careful math here as we ' re performing a division that cannot fail
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the amount of tokens owned by account .
check the remaining amount before project reaches its goal should be run when the project has not reached its goal
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Check if an account has this role . @ return bool
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the amount of tokens owned by account .
@ dev Called by an { IERC777 } token contract whenever tokens are being moved or created into a registered account ( to ) . The type of operation is conveyed by from being the zero address or not . This call occurs after the token contract ' s state is updated , so { IERC777 balance Of } , etc . , can be used to query the post operation state . This function may revert to prevent the operation from being executed .
Anyone is able to shut down the pool when requests aren ' t being processed any more .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 balance Of } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice makes the access check enforced
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns true if the value is in the set . O ( 1 ) .
Redeems Ether from Compound receives Ether . Wrap all the ether that is in this contract .
@ dev Returns the name of the token .
@ dev Returns true if account has been granted role .
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Function to stop minting new tokens . @ return True if the operation was successful .
@ dev Get granularity for a given partition . @ param token Address of the token . @ param partition Name of the partition . @ return Granularity of the partition .
@ notice msg . sender approves spender to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of tokens to be approved for transfer @ return success Whether the approval was successful or not
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns true if the caller is the current owner .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Remember that only owner can call so be careful when use on contracts generated from other contracts . @ param token Address The token contract address @ param token Amount Number of tokens to be sent
@ notice Revoke vesting # vesting Id from holder , returning unvested tokens to the Token Manager @ param holder Address whose vesting to revoke @ param vesting Id Numeric id of the vesting
@ dev Modifier to use in the initializer function of a contract .
@ dev Equivalent to multiple { Transfer Single } events , where operator , from and to are the same for all transfers .
@ notice event emitted when a contributor buys a Genesis NFT
@ notice An event thats emitted when a delegate account ' s vote balance changes
the last one is emitted if the required signatures change
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice The current clearing price of the Dutch auction @ dev If auction successful , return token Price
Harvest DF > want Performance fee
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ return true if the token is revoked .
@ notice Full balance of account includes : balance of tokens account holds himself ( 0 for addresses of locking contracts ) balance of tokens locked in contracts tokens not yet claimed from distributions if ( account address ( this ) ) return 0 ;
require msg . sender is the delegate smart contract
@ notice Get the duration for evaluation of remove delegator operations
@ dev Removes a value from a set . O ( 1 ) . Returns false if the value was not present in the set .
@ dev See { IERC20 balance Of } .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ notice get past rounds answers @ param round Id the round number to retrieve the answer for @ dev # [ deprecated ] Use get Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended get Round Data instead which includes better verification information .
Validates passed address equals to the three addresses .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
add migrator for cityswap
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
calculates the CREATE2 address for a pair without making any external calls hex ' 96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f '
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
deprecate current contract in favour of a new one
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ notice Admin is set by owner first time , after that admin is super role and has permission to change owner @ param admin Address of multisig that becomes admin
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev This is from Timelock contract , the governance should be a Timelock contract before calling this emergency function ! solium disable next line security no call value
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Return reward multiplier over the given from to to block .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev function to check if the crowdsale has ended @ param self Stored crowdsale from crowdsale contract @ return success
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the smallest of two numbers .
@ dev Returns the address of the current owner .
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the number of values on the set . O ( 1 ) .
Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
always push out token In ( already have )
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Require that the caller must be an EOA account to avoid flash loans .
@ dev Returns the amount of tokens in existence .
@ dev Calculates and updates new accrued amount per token since last update . Formula : Global Yield Global Yield ( P ) + newly Generated Interest Global Total Stake . @ param interest Generated Interest token earned since last update .
@ dev Binds a method from the given module to this wallet so the method can be invoked using this wallet ' s default function . Note that this method must throw when the given module has not been added to this wallet . @ param method The method ' s 4 byte selector . @ param module The module ' s address . Use address ( 0 ) to unbind the method .
@ notice Verifies if receiver is contract and if so , calls ( to ) . on ERC1155Received ( . . . )
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Same as { xref Address function Call address bytes string } [ function Call ] , but performing a static call . Available since v3 . 3 . solhint disable next line avoid low level calls
@ dev Adjusts the reserve to match the configured collateralization ratio . It calculates how much the collateralization must be increased or decreased and either : 1 ) lend borrow , or 2 ) repay redeem , respectivelly . The funds required to perform the operation are obtained via Flash Loan to avoid having to maneuver around margin when moving in out of leverage . @ param room Amount The amount of underlying token to be liquid after the operation . @ return success A boolean indicating whether or not the action succeeded .
solhint disable previous line no empty blocks
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ return The address of the proxy admin .
@ dev Returns the account approved for token Id token . Requirements : token Id must exist .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 total Supply } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the address of the current owner .
@ dev Either Transfer Single or Transfer Batch MUST emit when tokens are transferred , including zero amount transfers as well as minting or burning Operator MUST be msg . sender When minting creating tokens , the from field MUST be set to 0x0 When burning destroying tokens , the to field MUST be set to 0x0 The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the " circulating supply " for a given token ID To broadcast the existence of a token ID with no initial balance , the contract SHOULD emit the Transfer Single event from 0x0 to 0x0 , with the token creator as operator , and a amount of 0
@ dev Transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Triggers stopped state . Requirements : The contract must not be paused .
Convert signed 256 bit integer number into signed 64 . 64 bit fixed point number . Revert on overflow . @ param x signed 256 bit integer number @ return signed 64 . 64 bit fixed point number
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev See { IERC20 balance Of } .
@ notice recalculate the amount of LINK available for payouts
Transfer tokens Send value tokens to to from your account @ param to The address of the recipient @ param value the amount to send
@ dev Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Checks whether a user is an operator of the contract . Since admin role can grant operator role and owner can grant admin role , we treat both admins and owner as operators ! @ param user Address Address to check whether it ' s an operator .
Address of ERC20 token sold on this exchange
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ notice Get total delegated stake locked up for a service provider
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Multiplies two exponentials given their mantissas , returning a new exponential .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Require that the caller must be an EOA account to avoid flash loans .
function ERC20Preset Minter Pauser init unchained ( string memory name , string memory symbol ) internal initializer { Removed args to prevent compiler warning
@ notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache . @ param account Address of the contract to check . @ param interface Id ERC165 interface to check . @ return True if account implements interface Id , false otherwise .
@ dev Returns whether token Id exists . Tokens can be managed by their owner or approved accounts via { approve } or { set Approval For All } . Tokens start existing when they are minted ( mint ) , and stop existing when they are burned ( burn ) .
update buy , sell , withdraw prevent flag 0 for allow and falg 1 for disallow to Prevent 0 for prevent buy , to Prevent 1 for prevent sell , to Prevent 2 for prevent withdraw , to Prevent 3 for all notice this is only done by owner
@ return true if msg . sender is the owner of the contract .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Registers the contract as an implementer of the interface defined by interface Id . Support of the actual ERC165 interface is automatic and registering its interface id is not required . See { IERC165 supports Interface } . Requirements : interface Id cannot be the ERC165 invalid interface ( 0xffffffff ) .
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev See { IERC20 allowance } .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Calculates the fee amount @ param amount Dai amount that is converted @ param gas Cost Used for Monitor , estimated gas cost of tx @ param owner The address that controlls the DS Proxy that owns the CDP fee can ' t go over 20 % of the whole amount
@ dev Describe how to interpret the fixed Price in the Token Config . FIXED ETH , FIXED USD , REPORTER
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { ERC20 before Token Transfer } . Requirements : minted tokens must not cause the total supply to go over the cap . if ( from address ( 0 ) ) {
@ dev Returns the number of values on the set . O ( 1 ) .
Get the token balance for account token Owner
@ dev Calculates the next value of an specific distribution index , with validations @ param current Index Current index of the distribution @ param emission Per Second Representing the total rewards distributed per second per asset unit , on the distribution @ param last Update Timestamp Last moment this distribution was updated @ param total Balance of tokens considered for the distribution @ return The new index .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Emitted when the pause is triggered by account .
@ dev Returns balance of In Token of given user address @ param address address of the user
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ notice Return all of the markets @ dev The automatic getter may be used to access an individual market . @ return The list of market addresses
@ dev Triggers stopped state . Requirements : The contract must not be paused .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice Reset the state of the channel @ param self storage data of Celer Ledger contract @ param c the channel
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Modifier to make a function callable only when the contract is paused .
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
@ dev Modifier to make a function callable only when the contract is not paused . Requirements : The contract must not be paused .
@ dev Returns the name of the token .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev See { IERC20 total Supply } .
@ notice Partitions list in place using Hoare ' s partitioning scheme . Only elements of list between indices lo and hi ( inclusive ) will be modified . Returns an index i , such that : lo < i < hi forall j in [ lo , i ] . list [ j ] < list [ i ] forall j in [ i , hi ] . list [ i ] < list [ j ]
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
Don ' t accept ETH
@ dev Add more debt to the global debt pool .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ notice Get the number of tokens spender is approved to spend on behalf of account @ param account The address of the account holding the funds @ param spender The address of the account spending the funds @ return The number of tokens approved
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Abstracts the details of dispatching the Flash Loan by encoding the extra parameters . @ param amount The amount to be borrowed . @ param which A flag indicating whether the funds are borrowed to 1 ) increase or 2 ) decrease the collateralization ratio . @ return success A boolean indicating whether or not the action succeeded .
Vault calls this function after shares are created during Vault . report ( ) . You can customize this function to any share distribution mechanism you want . Send 100 % of newly minted shares to the rewards address .
@ dev Returns the downcasted int16 from int256 , reverting on overflow ( when the input is less than smallest int16 or greater than largest int16 ) . Counterpart to Solidity ' s int16 operator . Requirements : input must fit into 16 bits Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { get } , with a custom error message when key is not in the map .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Return eth price feed address return 0x5f4e C3Df9cbd43714FE2740f5E3616155c5b8419 ; return 0x9326BFA02ADD2366b30bac B125260Af641031331 ; kovan
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the largest of two numbers .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Function that is run as the first thing in the fallback function . Can be redefined in derived contracts to add functionality . Redefinitions must call super . will Fallback ( ) .
View function to see pending CV Ps on frontend .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ notice Provides the current minting deposit fee . This fee is applied to the amount of this g Token shares being created upon deposit . The fee defaults to 1 % and is set to 2 % after the liquidity pool has been migrated . @ return deposit Fee A percent value that accounts for the percentage of shares being minted at each deposit that be collected as fee .
@ dev Transfer tokens from one address to another . @ param from The address you want to send tokens from . @ param to The address you want to transfer to . @ param value The amount of tokens to be transferred .
@ dev Helpher function to earn in the vault . Anyone can call this method as earn ( ) in vault is public ! @ param vault Id ID of the vault to earn .
Returns how many productivity a user has and global has .
@ dev Integer division of two numbers , rounding up and truncating the quotient
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Provides the minimum and maximum amount of the mining token to be processed on every operation . If the contract balance is below the minimum it waits until more accumulates . If the total amount is beyond the maximum it processes the maximum and leaves the rest for future operations . The mining token accumulated via liquidity mining is converted to the underlying asset and used to mint the associated c Token . This range is used to avoid wasting gas converting small amounts as well as mitigating slipage converting large amounts . @ return mining Min Gulp Amount The minimum amount of the mining token to be processed per deposit withdrawal . @ return mining Max Gulp Amount The maximum amount of the mining token to be processed per deposit withdrawal .
@ dev Revokes role from account . If account had been granted role , emits a { Role Revoked } event . Requirements : the caller must have role ' s admin role .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Asset is withdrawn from the Account .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Returns the amount of tokens in existence .
@ dev Gets the balance of the specified address . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
Mutable , in case Uniswap has changed or we want to switch to sushi . The core systems , Pool and Bank , don ' t rely on Uniswap , so there is no risk .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Returns the address of the current owner .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to transfer , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a Transfer event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev get the balance of a user . @ param token The token type @ return The balance
Emergency drain in case of a bug Adds all funds to owner to refund people Designed to be as simple as possible require ( contract Start Timestamp . add ( 4 days ) < block . timestamp , " Liquidity generation grace period still ongoing " ) ;
function store ( ) external view returns ( address ) ;
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Simple token to c Token formula from Compound
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Minter Functions
@ dev Throws if called by any account other than the owner .
@ dev Unpause the contract after self checks .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
token 2 eth
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Ensures internal account for rebasing and non rebasing credits and supply is updated following deployment of frozen yield change . Set fixed credits per token for this account Update non rebasing supply Update credit tallies
@ dev Redeem funds lent to a given c Token ' s market . This operation will revert if it does not succeed . @ param ctoken The Compound c Token address . @ param amount The amount of the underlying token to redeem .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns the address of the current owner .
@ notice Initialize vault by creating derivative token and switching to Minting state @ dev Extracted from constructor to reduce contract gas creation amount
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Searches a sorted array and returns the first index that contains a value greater or equal to element . If no such index exists ( i . e . all values in the array are strictly less than element ) , the array length is returned . Time complexity O ( log n ) . array is expected to be sorted in ascending order , and to contain no repeated elements . Note that mid will always be strictly less than high ( i . e . it will be a valid array index ) because Math . average rounds down ( it does integer division with truncation ) . At this point low is the exclusive upper bound . We will return the inclusive upper bound .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ return total amount of tokens
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Validation of an executed purchase . Observe state and use revert statements to undo rollback when valid conditions are not met . @ param beneficiary Address performing the token purchase @ param wei Amount Value in wei involved in the purchase
@ dev Getter function since constants can ' t be read directly from libraries .
@ dev Returns the amount of tokens in existence .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ return the address of the owner .
@ notice revoke user transaction @ param x Hash hash of HTLC random number
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
set Zonehash sets the hash for the zone . May only be called by the owner of that node in the ENS registry . @ param node The node to update . @ param hash The zonehash to set
Last Cumulative Holders Reward Price
@ dev Returns the amount of tokens in existence .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns true if account has been granted role .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice The duration of voting on a proposal , in blocks function voting Period ( ) public pure returns ( uint ) { return 40 320 ; }
@ dev Connector Details .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Election state change events
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
@ dev Returns the smallest of two numbers .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Return reward multiplier over the given from to to block .
@ dev Returns the name of the token .
solhint disable previous line no empty blocks
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
Calculate 1 x rounding towards zero . Revert on overflow or when x is zero . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev See { IERC20 total Supply } .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the amount of tokens in existence .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
Only the contract owner can call this function
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the Uniform Resource Identifier ( URI ) for token Id token .
@ dev Integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; Solidity automatically throws when dividing by 0 uint256 c a b ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the name of the token .
@ dev Returns the amount of tokens in existence .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Modifier to make a function callable only when the contract is paused .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Returns true if the contract is paused , and false otherwise .
@ notice Total supply which is counted for distributions It only represents already distributed tokens @ dev This function should be overloaded to exclude tokens locked in loans
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ notice When receive ether Send TOKEN Automatically trade able return swap Balance ;
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
No rebalance implementation for lower fees and faster swaps Check that no mint has been made in the same block from the same EOA Check balance
@ dev Allows the current governor to relinquish control of the contract . @ notice Renouncing to governorship will leave the contract without an governor . It will not be possible to call the functions with the governance modifier anymore .
@ dev Returns the address of the current owner .
emitted events
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner @ param new Owner new contract owner
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the amount of tokens in existence .
@ dev check if an account has this role @ return bool
@ dev Transfers the ownership of an NFT from one address to another address . This function can be changed to payable . @ notice Throws unless msg . sender is the current owner , an authorized operator , or the approved address for this NFT . Throws if from is not the current owner . Throws if to is the zero address . Throws if token Id is not a valid NFT . When transfer is complete , this function checks if to is a smart contract ( code size > 0 ) . If so , it calls on ERC721Received on to and throws if the return value is not bytes4 ( keccak256 ( " on ERC721Received ( address , uint256 , bytes ) " ) ) . @ param from The current owner of the NFT . @ param to The new owner . @ param token Id The NFT to transfer . @ param data Additional data with no specified format , sent in call to to .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Emergency functions
@ dev Returns the total amount of tokens stored by the contract .
@ dev See { IERC20 allowance } .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Add new pair Pool @ dev This function can only be carreid out by the owner of this contract .
@ dev Destoys amount tokens from account . amount is then deducted from the caller ' s allowance . See burn and approve .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev Returns the amount of tokens owned by account .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the amount of tokens owned by account .
@ notice Handle the receipt of a single ERC1155 token type . @ dev An ERC1155 compliant smart contract MUST call this function on the token recipient contract , at the end of a safe Transfer From after the balance has been updated . This function MUST return bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) ) ( i . e . 0xf23a6e61 ) if it accepts the transfer . This function MUST revert if it rejects the transfer . Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller . @ param operator The address which initiated the transfer ( i . e . msg . sender ) @ param from The address which previously owned the token @ param id The ID of the token being transferred @ param value The amount of tokens being transferred @ param data Additional data with no specified format @ return bytes4 bytes4 ( keccak256 ( " on ERC1155Received ( address , address , uint256 , uint256 , bytes ) " ) )
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ notice Get the number of tokens held by the account @ param account The address of the account to get the balance of @ return The number of tokens held
@ dev Destoys amount tokens from account . amount is then deducted from the caller ' s allowance . See burn and approve .
@ dev Check if an account has this role . @ return bool
@ dev See { IERC20 total Supply } .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
Withdraw LP tokens from pool .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
solhint disable previous line no empty blocks
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Know the reason on success or failure based on the EIP 1066 application specific status codes . @ param partition Name of the partition . @ param from Token holder . @ param to Token recipient . @ param value Number of tokens to transfer . @ param data Information attached to the transfer . [ CAN CONTAIN THE DESTINATION PARTITION ] @ param operator Data Information attached to the transfer , by the operator . [ CONTAINS THE CONDITIONAL OWNERSHIP CERTIFICATE ] @ return ESC ( Ethereum Status Code ) following the EIP 1066 standard . @ return Additional bytes32 parameter that can be used to define application specific reason codes with additional details ( for example the transfer restriction rule responsible for making the transfer operation invalid ) . @ return Destination partition .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the subtraction of two unsigned integers , reverting on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
@ dev Returns the current admin .
@ dev Disables a module
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Remove locker , only owner can remove locker
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice External view function to check whether or not the functionality associated with a given role is currently paused or not . The owner or the pauser may pause any given role ( including the pauser itself ) , but only the owner may unpause functionality . Additionally , the owner may call paused functions directly . @ param role The role to check the pause status on . @ return A boolean to indicate if the functionality associated with the role in question is currently paused .
@ notice Return channel ' s migrated To address @ param c the channel to be viewed @ return channel ' s migrated To address
@ dev triggered when the owner is updated @ param prev Owner previous owner @ param new Owner new owner
force balances to match reserves address token0 token0 ; address token1 token1 ;
@ dev Multiplies two exponentials given their mantissas , returning a new exponential .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
Anyone can call the function to deploy a new payment handler . The new contract will be created , added to the list , and an event fired . Deploy the new Proxy contract with the handler logic address instantiate a Payment Handler contract at the created Proxy address initialize the Proxy with this contract ' s address Add it to the list and the mapping Emit event to let watchers know that a new handler was created
@ notice This function adds liquidity to a Curve pool with ETH or ERC20 tokens @ param to Whom To Issue The address to return the Curve LP tokens to @ param from Token The ERC20 token used for investment ( address ( 0x00 ) if ether ) @ param swap Address Curve swap address for the pool @ param incoming Token Qty The amount of from Token to invest @ param min Pool Tokens The minimum acceptable quantity of tokens to receive . Reverts otherwise @ return Amount of Curve LP tokens received
@ dev See { IERC20 balance Of } .
@ dev Returns the smallest of two numbers .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
This generates a public event on the blockchain that will notify clients
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Registers the contract as an implementer of the interface defined by interface Id . Support of the actual ERC165 interface is automatic and registering its interface id is not required . See { IERC165 supports Interface } . Requirements : interface Id cannot be the ERC165 invalid interface ( 0xffffffff ) .
@ dev Multiplies two precise units , and then truncates by the given scale . For example , when calculating 90 % of 10e18 , ( 10e18 9e17 ) 1e18 ( 9e36 ) 1e18 9e18 @ param x Left hand input to multiplication @ param y Right hand input to multiplication @ param scale Scale unit @ return Result after multiplying the two inputs and then dividing by the shared scale unit
@ notice Transfers tokens held by timelock to beneficiary . only owner can call this method as it will write new TVL metric value into the holder contract solhint disable next line not rely on time calculate amount that is possible to release
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Returns the number of accounts that have role . Can be used together with { get Role Member } to enumerate all bearers of a role .
@ dev Buy Dai for fy Dai @ param to Wallet receiving the dai being bought @ param dai Out Amount of dai being bought @ param max FY Dai In Maximum amount of fy Dai being sold
Loops over all tokens in the wrap and deposits them with allowance req successful transfer Transfer went OK this means we can add this balance we just took .
@ dev Divides two numbers and returns the remainder ( unsigned integer modulo ) , reverts when dividing by zero .
@ dev PUBLIC FACING : Return a current lobby member queue entry . Only needed due to limitations of the standard ABI encoder . @ param member Addr TRX address of the lobby member @ param enter Day @ param entry Index @ return 1 : Raw amount that was entered with ; 2 : Referring TRX addr ( optional ; 0x0 for no referrer )
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
@ notice If any Eth gets stuck in the contract owner can withdraw it @ param to Address of the receiver @ param amount The amount to be sent
@ notice The trustee wallet has the power to change the owner in case of unforeseen or unavoidable situation . @ return Wallet address of the trustee account .
@ dev This method is overriden from G Token Base and sets up the reserve before a withdrawal comes along . This method uses the G Portfolio Reserve Manager to adjust the reserve implementing the rebalance policy . See G Portfolio Reserve Manager . sol . @ param cost The amount of reserve being withdrawn and that needs to be immediately liquid . @ return success A boolean indicating whether or not the operation succeeded . The operation may fail if it is not possible to recover the required liquidity ( e . g . low liquidity in the markets ) .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Throws if called by any account other than the owner .
@ dev Returns true if the caller is the current owner .
Update reward variables of the given pool to be up to date .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol Emits an Approval event . @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
if the soft cap isn ' t met and the presale period ends ( 7 days ) enable users to buy back their ether . remove funds from users contributions . transfer funds back to user .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Emitted when set new global deposit cap
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice The fallback function : If the contract ' s controller has not been set to 0 , then the proxy Payment method is called which relays the ether and creates tokens as described in the token controller contract Adding the true makes the linter shut up so . . .
@ dev Returns the name of the token .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
Internal
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . > Note that this information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including IERC20 . balance Of and IERC20 . transfer .
@ dev Returns list of transaction I Ds in defined range . @ param from Index start position of transaction array . @ param to Index end position of transaction array . @ param pending Include pending transactions . @ param executed Include executed transactions . @ return Returns array of transaction I Ds .
TRANSFER TOKENS FROM ANOTHER ACCOUNT
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Modifier to make a function callable only when the contract is paused . Requirements : The contract must be paused .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
Forward ERC20 methods to upgraded contract if this one is deprecated
Events
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Performs a transfer out , ideally returning an explanatory error code upon failure tather than reverting . If caller has not called checked protocol ' s balance , may revert due to insufficient cash held in the contract . If caller has checked protocol ' s balance , and verified it is > amount , this should not revert in normal conditions .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ notice Set recipient as the new primary recipient for Dai withdrawals . Only the owner may call this function . @ param recipient address The new primary recipient . Set the new primary recipient .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice send value token to to from msg . sender @ param to The address of the recipient @ param value The amount of token to be transferred @ return Whether the transfer was successful or not
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev This method will cause an re entry to the same module contract .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Initiate transfer ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner . Current owner will still be owner until new owner accept ownership . @ param new Owner new owner address
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens . token Balances [ owner ] token Balances [ owner ] . add ( amount ) ;
@ dev Converts a signed int256 into an unsigned uint256 . Requirements : input must be greater than or equal to 0 .
@ notice This call is no longer supported .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Change owning address of the token contract , specifically for minting @ param self Stored token from token contract @ param new Owner Address for the new owner @ return True if completed
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ return The address of the implementation .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns to normal state . Requirements : The contract must be paused .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies on extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Performs a withdrawal of the reserve asset from the given g Token . @ param token The g Token to withdraw from . @ param amount The amount to be withdrawn . @ return success A boolean indicating whether or not the action succeeded .
@ dev Destoys amount tokens from account , reducing the total supply . Emits a Transfer event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to transfer , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a Transfer event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Internal function that abstracts the algorithm to be performed with borrowed funds . It receives the funds , deposited in the current contract , and must ensure they are available as balance of the current contract , including fees , before it returns . @ param token The ERC 20 contract address . @ param amount The amount being borrowed . @ param fee The fee , in addition to the amount borrowed , to be repaid . @ param params Additional user parameters provided when the flash loan was requested . @ return success A boolean indicating success .
@ dev Transfers control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Initiates the liquidity pool migration . It consists of setting the migration recipient address and starting a 7 day grace period . After the 7 day grace period the migration can be completed via the complete Liquidity Pool Migration fuction . Anytime before the migration is completed is can be cancelled via cancel Liquidity Pool Migration . This function will emit a Initiate Liquidity Pool Migration event upon success . This is a priviledged function restricted to the contract owner . @ param migration Recipient The receiver of the liquidity pool funds .
@ dev Transfers control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev See { IERC20 total Supply } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Sets the values for name , symbol , and decimals . All three of these values are immutable : they can only be set once during construction .
@ dev Private function to remove a token from this extension ' s ownership tracking data structures . Note that while the token is not assigned a new owner , the owned Tokens Index mapping is not updated : this allows for gas optimizations e . g . when performing a transfer operation ( avoiding double writes ) . This has O ( 1 ) time complexity , but alters the order of the owned Tokens array . @ param from address representing the previous owner of the given token ID @ param token Id uint256 ID of the token to be removed from the tokens list of the given address To prevent a gap in from ' s tokens array , we store the last token in the index of the token to delete , and then delete the last slot ( swap and pop ) . When the token to delete is the last token , the swap operation is unnecessary owned Tokens [ from ] [ token Index ] last Token Id ; owned Tokens Index [ last Token Id ] token Index ; This also deletes the contents at the last position of the array
@ dev This method will cause an re entry to the same module contract .
@ dev Returns True if self contains needle . @ param self The slice to search . @ param needle The text to search for in self . @ return True if needle is found in self , false otherwise .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns true if the caller is the current owner .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when the pause is lifted by account .
Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : using hooks . adoc [ Using Hooks ] .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the amount of tokens in existence .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the address of the current owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the subtraction of two signed integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Returns if this protocol can swap all it ' s normalized Balance ( ) to specified token
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Provides the timestamp for when the liquidity pool migration can be completed . @ return migration Unlock Time A timestamp that defines the end of the 7 day grace period for liquidity pool migration .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Multiplies two numbers , throws on overflow . Gas optimization : this is cheaper than asserting ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
y Token functions
@ notice Calculates the current supply interest rate per block @ param cash The total amount of cash the market has @ param borrows The total amount of borrows the market has outstanding @ param reserves The total amount of reserves the market has @ param reserve Factor Mantissa The current reserve factor the market has @ return The supply rate per block ( as a percentage , and scaled by 1e18 )
@ dev Returns the amount of tokens owned by account .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Safe value mint , ensure it is never over cap and we are the current owner .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ notice Sets the rebaser contract
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Withdraws all of the callers earnings .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
function to stop the ICO
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present . The value is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ notice Get list of valid service types
Calculate binary logarithm of x . Revert if x < 0 . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number if ( xc > 0x2 ) msb + 1 ;
@ dev Returns the amount of tokens owned by account .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Modifier to use in the initializer function of a contract .
@ dev Throws if called by any account other than the owner .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
If a pre issue hook has been configured , call the external protocol contract . Pre issue hook logic can contain arbitrary logic including validations , external function calls , etc .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Estimates the flash loan fee given the reserve token and required amount . @ param provider The flash loan provider , either Aave or Dydx . @ param token The ERC 20 token to flash borrow from . @ param net Amount The amount to be borrowed without considering repay fees . @ param fee Amount the expected fee to be payed in excees of the loan amount .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Allow token to be traded sent from account to account allow for staking and governance plug in
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
Withdraw without caring about rewards . EMERGENCY ONLY .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Transfer tokens from one address to another based on allowance @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ dev Initiates the liquidity pool migration by setting a funds recipent and starting the clock towards the 7 day grace period . This method is exposed publicly . @ param migration Recipient The recipient address to where funds will be transfered .
@ notice Allows for the beforehand calculation of the amount of the underlying asset to be deposited in order to receive the desired amount of shares . @ param net Shares The amount of this gc Token shares to receive . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return underlying Cost The cost , in the underlying asset , to be paid . @ return fee Shares The fee amount of shares being deducted .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev SET The address of the ERC1155 NFT Based Eth Item model . It can be done only by the Factory controller
@ dev Burns a specific amount of tokens . @ param value The amount of token to be burned . no need to require value < total Supply , since that would imply the sender ' s balance is greater than the total Supply , which should be an assertion failure
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Checks if first Exp is less than second Exp .
@ dev Verifies blocks with the given public data and proofs . Verifying a block makes sure all requests handled in the block are correctly handled by the operator . @ param block Type The type of block @ param block Size The number of requests handled in the block @ param block Version The block version ( i . e . which circuit version needs to be used ) @ param public Inputs The hash of all the public data of the blocks @ param proofs The ZK proofs proving that the blocks are correct @ return True if the block is valid , false otherwise
@ notice called by oracles when they have witnessed a need to update @ param round Id is the ID of the round this submission pertains to @ param submission is the updated data that the oracle is submitting
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a Transfer event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfer From . This is zero by default . This value changes when approve or transfer From are called .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
Perform any adjustments to the core position ( s ) of this strategy given what change the Vault made in the " investable capital " available to the strategy . Note that all " free capital " in the strategy after the report was made is available for reinvestment . Also note that this number could be 0 , and you should handle that scenario accordingly .
@ dev Adds two numbers , throws on overflow .
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
View function to see pending SUSH Is on frontend .
@ dev Deposits ether into the fund and allocates a number of shares to the sender depending on the current number of shares , the funds value , and amount deposited @ return The amount of shares allocated to the depositor Check if the sender is allowed to deposit into the fund Require that the amount sent is not 0 Calculate number of shares reset latest Oracle Caller for protect from double call If user would receive 0 shares , don ' t continue with deposit Add shares to total Add shares to address
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice allows governance to resolve a dispute on a keeper @ param keeper the address cleared
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 total Supply } .
@ dev See { IERC20 allowance } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . > Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an Approval event .
@ notice Return optional long name of the derivative @ dev Isn ' t used directly in the protocol @ return long name
Divides a value by the scale factor to allow for additional precision during mathematical operations
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ notice Keeper bonding
@ notice Keeper unbonding
@ dev Returns true if this contract implements the interface defined by interface Id . See the corresponding https : eips . ethereum . org EIPS eip 165 # how interfaces are identified [ EIP section ] to learn more about how these ids are created . This function call must use less than 30 000 gas .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ notice Forces the transfer of value tokens from from to to @ dev Forces the transfer of value tokens from from to to @ param from The address that sends the tokens . @ param to The address that will receive the tokens . @ param value The amount of tokens to transfer ( plus decimals ) @ return true if success
@ dev See { IERC1155 safe Batch Transfer From } .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
SMARTXXX : function set Fee To ( address ) external ;
@ notice returns the number of oracles
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Allows the current owner to relinquish control of the contract .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Mints a new NFT . @ param to The address that will own the minted NFT . @ param token Id of the NFT to be minted by the msg . sender . @ param uri String representing RFC 3986 URI .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
solhint disable func name mixedcase
@ dev Allows the pending Owner address to finalize the transfer .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the address of the current owner .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev See { IERC20 total Supply } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Provides the total amount kept in the reserve in terms of the underlying asset . @ return total Reserve Underlying The underlying asset balance on reserve .
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev returns the address of the Lending Pool Parameters Provider proxy @ return the address of the Lending pool parameters provider proxy
Daily Data Update
@ dev Returns the amount of tokens owned by account .
@ notice get the latest completed round where the answer was updated @ dev # [ deprecated ] . Use latest Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended latest Round Data instead which includes better verification information .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
ensures tx ' s sender is able to modify the Vault
@ dev Returns the amount of tokens in existence .
@ dev Returns the amount of tokens in existence .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ return the name of yux the token .
Calculate the amount of fy Dai a user could sell for given amount of Dai . @ param dai Reserves Dai reserves amount @ param fy Dai Reserves fy Dai reserves amount @ param dai Amount Dai amount to be traded @ param time Till Maturity time till maturity in seconds @ param k time till maturity coefficient , multiplied by 2 ^ 64 @ param g fee coefficient , multiplied by 2 ^ 64 @ return the amount of fy Dai a user could sell for given amount of Dai
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Set the amount of tokens sold on private sales @ dev This function can only be carreid out by the owner of this contract .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev See { IERC20 balance Of } .
Calculate x y rounding down . @ param x signed 64 . 64 bit fixed point number @ param y signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev Burning token for deflanationary features
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev See { IERC20 allowance } .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns true if account is a contract . [ import ANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev unregisters multiple users at the same time @ param self Stored crowdsale from crowdsale contract @ param registrants addresses to unregister for the sale
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Verifies whether or not a liquidity pool is migrating or has migrated . This method is exposed publicly . @ return has Migrated A boolean indicating whether or not the pool migration has started .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the amount of tokens in existence .
@ dev Returns the amount of tokens owned by account .
@ dev updates the implementation of the lending pool parameters provider @ param parameters Provider the new lending pool parameters provider implementation
@ notice Determine the prior number of votes for an account as of a block number @ dev Block number must be a finalized block or else this function will revert to prevent misinformation . @ param account The address of the account to check @ param block Number The block number to get the vote balance at @ return The number of votes the account had as of the given block
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Gets the protocol fee values for an exchange . @ return taker Fee Bips The protocol taker fee @ return maker Fee Bips The protocol maker fee
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Updates the govenance address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev See { IERC20 allowance } .
@ dev See { IERC20 total Supply } .
@ dev Returns the amount of tokens in existence .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the smallest of two numbers .
@ dev Returns true if account has been granted role .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
Play the game : 1 % chance of winning and returning true .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
uery to get the pending reward if ( users [ caller ] . last Claimed Date > expiry Date ) uint256 reward token second ( ( latest Staking Rate ( ) ) . mul ( 10 21 ) ) . div ( 365 days ) ; uint256 reward ( ( users [ caller ] . active Deposit ) . mul ( total Staked Time . mul ( reward token second ) ) ) . div ( 10 23 ) ;
@ notice Allows for the beforehand calculation of the amount of the underlying asset to be deposited in order to receive the desired amount of shares . @ param net Shares The amount of this gc Token shares to receive . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ param exchange Rate The exchange rate as obtained by exchange Rate ( ) . @ return underlying Cost The cost , in the underlying asset , to be paid . @ return fee Shares The fee amount of shares being deducted .
@ dev Sets the values for name , symbol , and decimals . All three of these values are immutable : they can only be set once during construction . @ notice To avoid variable shadowing appended Arg after arguments name .
@ notice The duration of voting on a proposal , in blocks function voting Period ( ) public pure returns ( uint ) { return 40 320 ; }
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Prevents a contract from calling itself , directly or indirectly . Calling a non Reentrant function from another non Reentrant function is not supported . It is possible to prevent this from happening by making the non Reentrant function external , and make it call a private function that does the actual work . On the first call to non Reentrant , not Entered will be true Any calls to non Reentrant after this point will fail By storing the original value once again , a refund is triggered ( see https : eips . ethereum . org EIPS eip 2200 )
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns one of the g Tokens that makes up the portfolio . This method is exposed publicly . @ param index The desired index , must be less than the token count . @ return token The g Token currently present at the given index .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev called by the owner to unpause , returns to normal state
@ dev Destroys amount tokens from account , deducting from the caller ' s allowance . See { ERC20 burn } and { ERC20 allowance } . Requirements : the caller must have allowance for accounts ' s tokens of at least amount .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ notice the amount of future funding available to oracles
@ dev Gets the approved address for a token ID , or zero if no address set Reverts if the token ID does not exist . @ param token Id uint256 ID of the token to query the approval of @ return address currently approved for the given token ID
@ dev Modify the supply without minting new tokens . This uses a change in the exchange rate between " credits " and OUSD tokens to change balances . @ param new Total Supply New total supply of OUSD . @ return uint256 representing the new total supply .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
Liquifies tokens to ethereum .
@ dev Returns the address of the current owner .
@ dev Returns the amount of tokens in existence .
@ dev Returns the largest of two numbers .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
priviledged functions
@ dev Harvest yield from the strategy if set . Only strategist or governance can harvest from the strategy .
@ dev Returns the element stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev enables borrowing on a reserve . Also sets the stable rate borrowing @ param reserve the address of the reserve @ param stable Borrow Rate Enabled true if the stable rate needs to be enabled , false otherwise
Updates a manager address and emits a corresponding event @ dev governance function called only by the registry Admin @ dev the managers list is a flexible list of role to the manager ' s address @ param role is the managers ' role name , for example " functional Manager " @ param manager is the manager updated address
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Returns the amount of tokens owned by account .
@ dev Sets amount as the allowance of spender over the owner s tokens . This internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
pure functions
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . This method is included for ERC20 compatibility . increase Allowance and decrease Allowance should be used instead . Changing an allowance with this method brings the risk that someone may transfer both the old and the new allowance if they are both greater than zero if a transfer transaction is mined before the later approve ( ) call is mined . @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev Returns the name of the token .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Fetch token information in batches @ param t2cr Address The address of the t2cr contract from where to fetch token information . @ param cursor The index from where to start iterating . @ param count The number of items to iterate . If 0 is given , defaults to t2cr . token Count ( ) . @ param filter The filter to use . Each element of the array in sequence means : Include absent addresses in result . Include registered addresses in result . Include addresses with registration requests that are not disputed in result . Include addresses with clearing requests that are not disputed in result . Include disputed addresses with registration requests in result . Include disputed addresses with clearing requests in result . @ return tokens The tokens information .
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ notice Allowed users are able to start procedure for changing monitor @ dev after CHANGE PERIOD needs to call confirm New Monitor to actually make a change @ param new Monitor address of new monitor
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ notice withdraw GYSR tokens applied during unstaking @ param amount number of GYSR to withdraw
@ notice Provides the total amount of the underlying asset ( or equivalent ) this contract is currently lending on Compound . @ return lending Reserve Underlying The underlying asset lending balance on Compound .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Sets admin Role as role ' s admin role . Emits a { Role Admin Changed } event .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the address of the current owner .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns true if the contract is paused , and false otherwise .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Sets the contract address for asset conversion delegation . This library converts the mining Token into the underlying Token and use the assets to back the reserve Token . See G Exchange . sol for further documentation . This method is exposed publicly . @ param exchange The address of the contract that implements the G Exchange interface .
Enums
@ dev Subtracts two numbers , throws on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ notice Admin is able to set new admin @ param admin Address of multisig that becomes new admin
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Registers and enables a new module .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens in existence .
Perform LP token migration for swapping liquidity providers . Take the current LP token address and return the new LP token address . Migrator should have full access to the caller ' s LP token . Return the new LP token address . Migrator must have allowance access to old LP tokens . EXACTLY the same amount of new LP tokens must be minted or else something bad will happen . This function is meant to be used to swap to the native liquidity provider in the future !
@ dev triggered when tokens are transferred between wallets @ param from source address @ param to target address @ param value transfer amount
Address of ERC20 token sold on this exchange
emitted events
@ dev gives allowance to an address to execute the interest redirection on behalf of the caller . @ param to the address to which the interest will be redirected . Pass address ( 0 ) to reset the allowance .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See { IERC20 total Supply } .
@ dev Owner can set new smart Fund ETH Factory @ param smart Fund ETH Factory address of ETH factory contract
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ notice Allows for the beforehand calculation of shares to be received minted upon depositing to the contract . @ param cost The amount of reserve token being deposited . @ param total Reserve The reserve balance as obtained by total Reserve ( ) . @ param total Supply The shares supply as obtained by total Supply ( ) . @ param deposit Fee The current deposit fee as obtained by deposit Fee ( ) . @ return net Shares The net amount of shares being received . @ return fee Shares The fee amount of shares being deducted .
@ dev Returns list of owners . @ return List of owner addresses .
transfers delegate authority when sending a token . https : medium . com bulldax finance sushiswap delegation double spending bug 5adcc7b3830f
@ dev See { IERC20 allowance } .
@ notice clean geyser , expire old fundings , etc .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the amount of tokens owned by account .
This function is for dev address migrate all balance to a multi sig address
@ dev Performs a deposit of the reserve asset to the given g Token . @ param token The g Token to deposit to . @ param amount The amount to be deposited . @ return success A boolean indicating whether or not the action succeeded .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Transfer tokens from one address to another based on allowance @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint256 the amount of tokens to be transferred
@ dev Throws if called by any account other than the owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns the amount of tokens owned by account .
@ dev Overrides ERC20Burnable burn From to allow unlimited transfers by Savings Module Skip decrease allowance
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns true if the key is in the map . O ( 1 ) .
@ notice Return the numeric platform id @ return platform id
@ dev Returns the amount of tokens owned by account .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Return migration info of the peers in the channel @ param c the channel to be viewed @ return peers ' addresses @ return peers ' deposits @ return peers ' withdrawals @ return peers ' state sequence numbers @ return peers ' transfer Out map @ return peers ' pending Pay Out map @ dev related to Ledger Migration
@ dev Returns true if the value is in the set . O ( 1 ) .
solhint disable previous line no empty blocks
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice Get the current allowance from owner for spender @ param owner The address of the account which owns the tokens to be spent @ param spender The address of the account which may transfer tokens @ return The number of tokens allowed to be spent ( 1 means infinite ) owner ; spender ;
@ notice The event emitted when the timestamp on a price is invalid and it is not written to storage
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the amount of tokens in existence .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
EXITING
@ dev Safely transfers token Id token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must exist and be owned by from . If the caller is not from , it must be have been allowed to move this token by either { approve } or { set Approval For All } . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
@ dev Modifier to make a function callable only when the contract is not paused . Requirements : The contract must not be paused .
@ dev Burns tokens and retuns the collateral value of those .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
this function isn ' t since the compiler emits automatically generated getter functions as external
@ dev Fetches the current token usd price from uniswap , with 6 decimals of precision . @ param conversion Factor 1e18 if seeking the ETH price , and a 6 decimal ETH USDC price in the case of other assets This should be impossible , but better safe than sorry Calculate uniswap time weighted average price Underflow is a property of the accumulators : https : uniswap . org audit . html # orgc9b3190 Adjust raw Uniswap Price according to the units of the non ETH asset In the case of ETH , we would have to scale by 1e6 USDC UNITS , but since base Unit2 is 1e6 ( USDC ) , it cancels unscaled Price Mantissa eth Base Unit config . base Unit exp Scale , but we simplify bc eth Base Unit exp Scale
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Gets adapted burn divisor
@ dev Returns true if the caller is the current owner .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 . solhint disable next line avoid low level calls
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Determine if reward is mature for address @ param reward Address Address requesting addition in to loyalty timestamp collection
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
@ dev Returns the address of the current owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
fetches and sorts the reserves for a pair
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Divides two exponentials , returning a new exponential . ( a scale ) ( b scale ) ( a scale ) ( scale b ) a b , which we can scale as an Exp by calling get Exp ( a . mantissa , b . mantissa )
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev See { IERC20 allowance } .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev function allowing to issue transfers in batch Require that the msg . sender and to addresses are not frozen . Require that the total value should not exceed available balance . Require that the to addresses are all verified addresses , IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF to List . length IS TOO HIGH , USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN " OUT OF GAS " TRANSACTION @ param to List The addresses of the receivers @ param amounts The number of tokens to transfer to the corresponding receiver emits to List . length Transfer events
Update the given pool ' s SUSAFE allocation point . Can only be called by the owner .
@ dev Returns the name of the token .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Transfer dai Amount Dai to recipient . Only the owner may call this function . @ param recipient address The account to transfer Dai to . @ param dai Amount uint256 The amount of Dai to transfer .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Destroys amount tokens from the caller . See { ERC20 burn } .
@ dev Returns the amount of tokens owned by account .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Burns a portion of the liquidity pool according to the defined burning rate . It must happen at most once every 7 days . This method does not actually burn the funds , but it will redeem the amounts from the pool to the caller contract , which is then assumed to perform the burn . This method is exposed publicly . @ return stakes Amount The amount of stakes ( GRO ) redeemed from the pool . @ return shares Amount The amount of shares ( g Token ) redeemed from the pool .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the downcasted uint128 from uint256 , reverting on overflow ( when the input is greater than largest uint128 ) . Counterpart to Solidity ' s uint128 operator . Requirements : input must fit into 128 bits
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . import ANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Destroys token Id . The approval is cleared when the token is burned . Requirements : token Id must exist . Emits a { Transfer } event . Clear approvals
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev See { IERC20 total Supply } .
@ dev Emitted when an execution request was approved . Specification : MUST be triggered when approve was successfully called .
@ notice Admin is able to change owner @ param owner Address of new owner
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
Returns the contract registry that the contract is set to use @ return contract Registry is the registry contract address
@ dev Returns the amount of tokens in existence .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 balance Of } .
performs chained get Amount Out calculations on any number of pairs
@ notice Add credit to a job to be paid out for work @ param credit the credit being assigned to the job @ param job the job being credited @ param amount the amount of credit being added to the job
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the amount of tokens in existence .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
GUILD TOKEN FUNCTIONS
@ dev Returns the amount of tokens in existence .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice Verifies whether a list of tokens contains a defective token . This function can be used by contracts having logic based on NF Ts core attributes , in which case the repair list is a blacklist . @ param tokens an array containing the token ids to verify . @ return true if the array contains a defective token , false otherwise .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
@ dev Sets admin Role as role ' s admin role . Emits a { Role Admin Changed } event .
@ dev Returns true if the caller is the current owner .
@ notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache . @ param account Address of the contract to check . @ param interface Id ERC165 interface to check . @ return True if account implements interface Id , false otherwise .
@ dev Returns true if the caller is the current registry Admin .
@ dev Internal function to burn a specific token Reverts if the token does not exist @ param token Id uint256 ID of the token being burned
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when the pause is triggered by account .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Divides value a by value b ( result is rounded towards 0 ) .
@ dev Returns one of the accounts that have role . index must be a value between 0 and { get Role Member Count } , non inclusive . Role bearers are not sorted in any particular way , and their ordering may change at any point . WARNING : When using { get Role Member } and { get Role Member Count } , make sure you perform all queries on the same block . See the following https : forum . openzeppelin . com t iterating over elements on enumerableset in openzeppelin contracts 2296 [ forum post ] for more information .
@ notice Only manager is able to call this function @ dev Sets the devaluation period of collateral after liquidation @ param asset The address of the main collateral token @ param new Value The devaluation period in blocks
view functions
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev filters name strings converts uppercase to lower case . makes sure it does not start end with a space makes sure it does not contain multiple spaces in a row cannot be only numbers cannot start with 0x restricts characters to A Z , a z , 0 9 , and space . @ return reprocessed string in bytes32 format
Delegation state change events
@ dev Throws if called by any account other than the owner .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See { IERC20 allowance } .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Super admin can transfer its powers to another address
@ dev Returns the cap on the token ' s total supply .
Update reward variables of the given pool to be up to date . Reserve claim ? ? ? sushi . mint ( devaddr , sushi Reward . div ( 10 ) ) ; sushi . mint ( address ( this ) , sushi Reward ) ;
Begins a farm by transferring amount of token from user to this contract and adds it to the balance of user . user must be either 1 ) msg . sender or 2 ) a wallet who has approved msg . sender as a proxy ; else this function reverts . funder must be either 1 ) msg . sender or user ; else this function reverts .
@ dev Subtracts two unsigned integers , reverts on overflow ( i . e . if subtrahend is greater than minuend ) .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Unbond liquidity for a pending keeper job
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
Updates cumulative sum of the maximum mint amount calculated by Allocator contract , the latest maximum mint amount per block , and the last recorded block number . The cumulative sum of the maximum mint amount is always added . By recording that value when the staker last stakes , the difference from the when the staker stakes can be calculated .
@ return the address of the owner .
Withdraw partial funds , normally used with a plate withdrawal require ( plate ! address ( 0 ) , " ! plate " ) ;
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev See { IERC20 total Supply } .
@ dev Returns the number of values on the set . O ( 1 ) .
Returns the committee members and their weights @ return addrs is the committee members list @ return weights is an array of uint , indicating committee members list weight @ return certification is an array of bool , indicating the committee members certification status
@ dev See { IERC20 total Supply } .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
events
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but performing a static call . Available since v3 . 3 .
decode a uq112x112 into a uint with 18 decimals of precision we only have 256 224 32 bits to spare , so scaling up by ~ 60 bits is dangerous instead , get close to : ( x 1e18 ) > > 112 without risk of overflowing , e . g . : ( x ) 2 ( 112 lg ( 1e18 ) )
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Emitted when the administration has been transferred . @ param previous Admin Address of the previous admin . @ param new Admin Address of the new admin .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice update the round and payment related parameters for subsequent rounds @ param payment Amount is the payment amount for subsequent rounds @ param min Submissions is the new minimum submission count for each round @ param max Submissions is the new maximum submission count for each round @ param restart Delay is the number of rounds an Oracle has to wait before they can initiate a round
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev Emitted when new Admin Role is set as role ' s admin role , replacing previous Admin Role DEFAULT ADMIN ROLE is the starting admin for all roles , despite { Role Admin Changed } not being emitted signaling this . Available since v3 . 1 .
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ dev Returns the name of the token .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent . To change the approve amount you first have to reduce the addresses allowance to zero by calling approve ( spender , 0 ) if it is not already 0 to mitigate the race condition described here : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729
@ dev MUST return token type ( default is " ERC20 " ) . SHOULD be implemented by the public constant state variable .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev See { IERC20 allowance } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Enable or disable approval for a third party ( " operator " ) to manage all of caller ' s tokens @ dev MUST emit the Approval For All event on success @ param operator Address to add to the set of authorized operators @ param approved True if the operator is approved , false to revoke approval
@ dev See { IERC20 total Supply } .
Events
@ return The number of decimals that the underlying token has .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
Returns the currently reward balance of the given address . @ dev calculates the up to date balances ( differ from the state ) @ param addr is the address to query @ return delegator Staking Rewards Balance the rewards awarded to the guardian role @ return guardian Staking Rewards Balance the rewards awarded to the guardian role
@ dev finalize Ico closes down the ICO and sets needed varriables
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
this low level function should be called from a contract which performs important safety checks ( uint112 reserve0 , uint112 reserve1 , ) get Reserves ( ) ; uint total Supply total Supply ; mint ( address ( 0 ) , MINIMUM LIQUIDITY ) ; if ( fee On ) k Last uint ( reserve0 ) . mul ( reserve1 ) ;
@ dev This function is required as Kyber requires to interact with token . decimals ( ) with many of its operations .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice The create option event
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
view functions
@ dev Returns the smallest of two numbers .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Stakes more LRC for an exchange . @ param exchange Addr The address of the exchange @ param amount LRC The amount of LRC to stake @ return staked LRC The total amount of LRC staked for the exchange
@ dev Sets Worker contract address @ param worker Address New worker contract address
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the number of key value pairs in the map . O ( 1 ) .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Event to show ownership has been transferred @ param previous Owner representing the address of the previous owner @ param new Owner representing the address of the new owner
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Fetches the current eth usd price from uniswap , with 6 decimals of precision . Conversion factor is 1e18 for eth usdc market , since we decode uniswap price statically with 18 decimals .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Should be called by external mechanism when reward funds are sent to this contract
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ return The growth coefficient for earning DMG while farming . Each unit represents how much DMG is earned per point
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ notice Delegate votes from msg . sender to delegatee @ param delegator The address to get delegatee for
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Throws if called by any account other than the owner .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
allow update oracle price oracle Token Address it ' s fee token address allow call Oracle only after a certain period pay for using Oracle with ETH call oracle pay for using Oracle with ERC20 transfer oracle token from sender and approve to oracle portal call oracle update data emit events
@ notice Get the config for the symbol Hash @ param symbol Hash The keccack256 of the symbol of the config to get @ return The config object
@ dev Adds a new module . The init method of the module will be called with address ( this ) as the parameter . This method must throw if the module has already been added . @ param module The module ' s address .
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Allows governance to remove a job from the systems @ param job address of the contract for which work should be performed
@ dev Throws if called by any account other than the owner .
@ dev See { IERC20 total Supply } .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ notice Initiates a new rebase operation , provided the minimum time period has elapsed . @ dev The supply adjustment equals ( total Supply Deviation From Target Rate ) rebase Lag Where Deviation From Target Rate is ( Market Oracle Rate target Rate ) target Rate and target Rate is Cpi Oracle Rate base Cpi
open functions
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the amount of tokens in existence .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns true if the value is in the set . O ( 1 ) .
performs presale burn
@ dev Returns the name of the token .
Returns the value of a virtual chain config record @ param vc Id is the virtual chain ID @ param key is the name of the config record to query @ return value is the config record value
@ dev Allows a withdrawal to be done to an adddresss that is different than initialy specified in the withdrawal request . This can be used to implement functionality like fast withdrawals . This function can only be called by an agent . @ param from The address of the account that does the withdrawal . @ param to The address to which ' amount ' tokens were going to be withdrawn . @ param token The address of the token that is withdrawn ( ' 0x0 ' for ETH ) . @ param amount The amount of tokens that are going to be withdrawn . @ param storage ID The storage ID of the withdrawal request . @ param new Recipient The new recipient address of the withdrawal .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the name of the token .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the percentual participation of a token ( including the reserve token ) in the portfolio composition . This method is exposed publicly . @ param token The given token address . @ return percent The token percentual share of the portfolio .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
Calculate maximum amount of output token given amount of USD owner by owner
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Transfers tokens held by timelock to beneficiary . solhint disable next line not rely on time
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Internal function to remove shares of the ID and convert to outstanding LP tokens .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Sets { burn Rate } to a value other than the initial one .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements : to cannot be the zero address .
@ dev Set Uniswap KTY Weth Pair contract @ dev This function can only be carreid out by the owner of this contract .
Blocks @ dev Gets the current Merkle root of this exchange ' s virtual blockchain . @ return The current Merkle root .
get Round Data and latest Round Data should both raise " No data present " if they do not have data to report , instead of returning unset values which could be misinterpreted as actual reported values .
Unlocks the contract @ dev governance function called only by the migration manager or an admin @ dev typically called by the registry contract upon unlocking all managed contracts
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
Set allowance for other address and notify Allows spender to spend no more than value tokens in your behalf , and then ping the contract about it @ param spender The address authorized to spend @ param value the max amount they can spend @ param extra Data some extra information to send to the approved contract
@ notice Gets the current votes balance for account @ param account The address to get votes balance @ return The number of current votes for account
@ dev See { IERC20 allowance } .
Special case for transact Call to support approvals on " bad " ERC20 tokens
Governance functions
@ notice An event thats emitted when an account changes its delegate
@ notice Revoke a liquidity pair from being accepted in future @ param liquidity the liquidity no longer accepted
@ dev Returns if the operator is allowed to manage all of the assets of owner . See { set Approval For All }
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
@ notice Adds a int256 value to the request with a given key name @ param self The initialized request @ param key The name of the key @ param value The int256 value to add
Sends ETH from msg . sender to this contract to mint m ETH .
@ dev Sets In Token contract address , checks it is binded to Balancer Pool @ param in Token Pool contract address
@ dev Returns True if self contains needle . @ param self The slice to search . @ param needle The text to search for in self . @ return True if needle is found in self , false otherwise .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Failure event
@ notice returns contract address registered under given registry key @ param name registry key for lookup @ return contract Addr address of contract registered under given registry key
@ dev Returns the number of key value pairs in the map . O ( 1 ) .
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
Withdraw without caring about rewards . EMERGENCY ONLY .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Assignes a new NFT to an address . @ notice Use and override this function with caution . Wrong usage can have serious consequences . @ param to Address to wich we want to add the NFT . @ param token Id Which NFT we want to add .
@ dev Multiply an Exp by a scalar , truncate , then add an to an unsigned integer , returning an unsigned integer .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev See { IERC20 balance Of } .
@ notice get block timestamp when an answer was last updated @ param round Id the answer number to retrieve the updated timestamp for @ dev # [ deprecated ] Use get Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended get Round Data instead which includes better verification information .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the name of the token .
@ dev PUBLIC FACING : External helper for the current day number since launch time @ return Current day number ( zero based )
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Integer division of two numbers , truncating the quotient .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
Only the contract owner can call this function burn the left over .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
The contract can be initialized with a number of tokens All the tokens are deposited to the owner address @ param balance Initial supply of the contract @ param name Token Name @ param symbol Token symbol @ param decimals Token decimals
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Returns the name of the token .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Validates arguments for change Owner function @ param from Index of current owner removing @ param to Index of new potential owner , should be 0 @ return Returns true if check passes , false otherwise
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice allows a keeper to activate register themselves after bonding @ param bonding the asset being activated as bond collateral
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ return true if msg . sender is the owner of the contract .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Revoke a liquidity pair from being accepted in future @ param liquidity the liquidity no longer accepted
Calculate binary exponent of x . Revert on overflow . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number require ( x < 0x400000000000000000 ) ; if ( x < 0x400000000000000000 ) return 0 ;
Validates passed address is not a zero address .
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k ) uint k Last k Last ;
@ notice Borrows are repaid by another user ( possibly the borrower ) . @ param payer the account paying off the borrow @ param borrower the account with the debt being payed off @ param repay Amount the amount of undelrying tokens being returned @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details ) EFFECTS & INTERACTIONS ( No safe failures beyond this point )
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Lerc20 more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ notice The standard EIP 20 transfer event
@ dev Updates the admin role for the address . @ param account Address to update admin role . @ param allowed Whether the address is granted the admin role .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice msg . sender approves addr to spend value tokens @ param spender The address of the account able to transfer the tokens @ param value The amount of wei to be approved for transfer @ return Whether the approval was successful or not
Withdraw token from protocol @ param protocol Protocol to withdraw from @ param token Token to withdraw @ param dn Amount Amount to withdraw ( denormalized ) @ param max N Amount Max amount of Pool Token to burn @ return Amount of Pool Token burned from user
@ dev Transfers a specific NFT ( token Id ) from one account ( from ) to another ( to ) . Requirements : from , to cannot be zero . token Id must be owned by from . If the caller is not from , it must be have been allowed to move this NFT by either { approve } or { set Approval For All } .
Adds a new managed contract address to the managed contracts list
@ notice View function that implements ERC 1271 and validates a set of signatures , one from the owner ( using ERC 1271 as well if the user signing key is a contract ) and one from the Dharma Key Registry against the supplied data . The data must be ABI encoded as ( bytes32 , bytes ) , where the first bytes32 parameter represents the hash digest for validating the supplied signatures and the second bytes parameter contains context for the requested validation . The two signatures are packed together , with the one from Dharma coming first and that from the user coming second this is so that , in future versions , multiple user signatures may be supplied if the associated key ring requires them . @ param data bytes The data used to validate the signature . @ param signatures bytes The two signatures , each 65 bytes one from the owner ( using ERC 1271 as well if the user signing key is a contract ) and one from the Dharma Key Registry . @ return The 4 byte magic value to signify a valid signature in ERC 1271 , if the signatures are both valid .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ return true if msg . sender is the owner of the contract .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ notice Exposes is Initialized bool var to child contracts with read only access
@ notice Keeper disputed
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the value associated with key . O ( 1 ) . Requirements : key must be in the map .
Update reward variables for all pools . Be careful of gas spending !
@ dev Returns true if the Address is in the list of token agents @ param agent Address address of this agent
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ return the time when the tokens are released .
@ dev See { I Strategy V2 pool Quota }
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
Service methods
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Gives permission to to to transfer token Id token to another account . The approval is cleared when the token is transferred . Only a single account can be approved at a time , so approving the zero address clears previous approvals . Requirements : The caller must own the token or be an approved operator . token Id must exist . Emits an { Approval } event .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ param staker address the staker who has deposited Uniswap Liquidity tokens @ param deposit Number deposit number for the staker @ return pair pool code and batch number associated with this deposit Number for the staker
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev releases vested tokens for the specified address . Can be called by anyone for any address .
Locks the contract to external non governance function calls @ dev governance function called only by the migration manager or an admin @ dev typically called by the registry contract upon locking all managed contracts @ dev getters and migration functions remain active also for locked contracts @ dev checked by the only When Active modifier
@ dev Converts an unsigned uint256 into a signed int256 . Requirements : input must be less than or equal to max Int256 .
@ return the symbol of the token .
@ dev Returns the amount of tokens owned by account .
Calculate x y rounding down , where x is signed 64 . 64 fixed point number and y is unsigned 256 bit integer number . Revert on overflow . @ param x signed 64 . 64 fixed point number @ param y unsigned 256 bit integer number @ return unsigned 256 bit integer number
@ dev See { IERC20 allowance } .
@ dev Give an account access to this role .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Deposits underlying assets from the user into the vault contract amount after . sub ( before ) ;
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to approve that can be used as a mitigation for problems described in IERC20 . approve . Emits an Approval event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Multiplies two unsigned integers , reverts on overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
events
@ dev Destroys amount tokens from the caller ' s account , reducing the total supply . If a send hook is registered for the caller , the corresponding function will be called with data and empty operator Data . See { IERC777Sender } . Emits a { Burned } event . Requirements the caller must have at least amount tokens .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Emitted when new Admin Role is set as role ' s admin role , replacing previous Admin Role DEFAULT ADMIN ROLE is the starting admin for all roles , despite { Role Admin Changed } not being emitted signaling this . Available since v3 . 1 .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the downcasted uint128 from uint256 , reverting on overflow ( when the input is greater than largest uint128 ) . Counterpart to Solidity ' s uint128 operator . Requirements : input must fit into 128 bits
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
function will be called after user claims ( ownership will be transfered )
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Sets admin Role as role ' s admin role . Emits a { Role Admin Changed } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Initializes the data structure . This method is exposed publicly . Note that the underlying borrowing token must match the growth reserve token given that funds borrowed will be reinvested in the provided growth token ( g Token ) . @ param reserve Token The ERC 20 token address of the reserve token ( c Token ) . @ param mining Token The ERC 20 token address to be collected from liquidity mining ( COMP ) . @ param borrow Token The ERC 20 token address of the borrow token ( c Token ) . @ param growth Token The ERC 20 token address of the growth token ( g Token ) .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the address of the current owner .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . NOTE : This is a feature of the next version of Open Zeppelin Contracts . @ dev Get it via npm install @ openzeppelin contracts @ next . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the address of the current owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
Accepts addresses balance migration from a previous rewards contract @ dev the function may be called by any caller that approves the amounts provided for transfer @ param addrs is the list migrated addresses @ param migrated Guardian Staking Rewards is the list of received guardian rewards balance for each address @ param migrated Delegator Staking Rewards is the list of received delegator rewards balance for each address @ param total Amount is the total amount of staking rewards migrated for all addresses in the list . Must match the sum of migrated Guardian Staking Rewards and migrated Delegator Staking Rewards lists .
Return the value of ' game Started ' to know if the game has started
@ dev Approve or remove operator as an operator for the caller . Operators can call { transfer From } or { safe Transfer From } for any token owned by the caller . Requirements : The operator cannot be the caller . Emits an { Approval For All } event .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
Function calls
@ notice Get current undelegate lockup duration
Update reward variables for all pools . Be careful of gas spending !
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Modifier to make a function callable only when the contract is not paused . Requirements : The contract must not be paused .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Throws if called by any account other than the owner .
@ dev Returns the amount of tokens owned by account .
@ dev use this when reporting a known error from the money market or a non upgradeable collaborator
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the amount of tokens owned by account .
@ notice Transfer amount tokens from src to dst @ param src The address of the source account @ param dst The address of the destination account @ param amount The number of tokens to transfer @ return Whether or not the transfer succeeded
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev vest the sale contributor tokens for 100 days , 1 % gradual release after 3 month later , no cliff
Mutative
@ return The token users receive as they unstake .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ notice An event thats emitted when an account changes its delegate
@ notice view the shell token balance of a given account @ param account the account to view the balance of @ return balance the shell token ballance of the given account
@ dev Returns true if the caller is the current owner .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Withdraws the amount staked for this exchange . This can only be done if the exchange has been correctly shutdown : The exchange owner has shutdown the exchange All deposit requests are processed All funds are returned to the users ( merkle root is reset to initial state ) Can only be called by the exchange owner . @ return amount LRC The amount of LRC withdrawn
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
solhint disable previous line no empty blocks
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
Update the given pool ' s COR Es allocation point . Can only be called by the owner . Note contract owner is meant to be a governance contract allowing CORE governance consensus
@ dev Changes required sigs for minor transactions @ param self Wallet in contract storage @ param required Minor The new signature requirement @ param confirm True if confirming , false if revoking confirmation @ param data Message data passed from wallet contract @ return bool Returns true if successful , false otherwise @ return bytes32 Returns the tx ID , can be used for confirm revoke functions
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ notice Emitted when set new treasury
@ dev on ERC1155Received implementation per IERC1155Receiver spec
METHODS constructor stores initial daily limit and records the present day ' s index .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns true if the contract is paused , and false otherwise .
@ dev Returns the name of the token .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 allowance } .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice withdraw funds after unbonding has finished
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
balance Of would give the amount staked . As this is 1 to 1 , this is also the holder ' s share
Removes a subscription plan contract to the authorized subscribers list @ dev governance function called only by the functional manager @ param addr is the address of the subscription plan contract
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
Hashes the string and returns a bytes32 value
Logged when the owner of a node transfers ownership to a new account .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Adds a key value pair to a map , or updates the value for an existing key . O ( 1 ) . Returns true if the key was added to the map , that is if it was not already present . We read and store the key ' s index to prevent multiple reads from the same storage slot if ( key Index 0 ) { The entry is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Withdraw all funds , normally used when migrating strategies require ( vault ! address ( 0 ) , " Golff : ! vault " ) ;
@ dev Adds owner to wallet @ param self Wallet in contract storage @ param new Owner Address for new owner @ param confirm True if confirming , false if revoking confirmation @ param data Message data passed from wallet contract @ return bool Returns true if successful , false otherwise @ return bytes32 Returns the tx ID , can be used for confirm revoke functions
Logged when the TTL of a node changes
@ dev Checks if left Exp > right Exp .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies on extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Gets the balance of the specified address without freezing tokens . @ param owner The address to query the the balance of . @ return An uint256 representing the amount owned by the passed address .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Modifier to make a function callable only when the contract is not paused .
Pool info
Quit the system , migrating the cdp ( ink , art ) to a different dst urn
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Emitted when new Admin Role is set as role ' s admin role , replacing previous Admin Role DEFAULT ADMIN ROLE is the starting admin for all roles , despite { Role Admin Changed } not being emitted signaling this . Available since v3 . 1 .
set the enable claim block
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
Enum for detect fund type in create fund function NOTE : You can add a new type at the end , but do not change this order
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the amount of tokens in existence .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Subtracts two numbers , throws on overflow ( i . e . if subtrahend is greater than minuend ) .
receive eth from uniswap swap
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Moves amount tokens from the caller ' s account to recipient . If send or receive hooks are registered for the caller and recipient , the corresponding functions will be called with data and empty operator Data . See { IERC777Sender } and { IERC777Recipient } . Emits a { Sent } event . Requirements the caller must have at least amount tokens . recipient cannot be the zero address . if recipient is a contract , it must implement the { IERC777Recipient } interface .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a Transfer event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the smallest of two numbers .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements : account cannot be the zero address . account must have at least amount tokens .
@ notice Get the total amount of tokens staked by account Address at block number block Number @ param account Address Account requesting for @ param block Number Block number at which we are requesting @ return The amount of tokens staked by the account at the given block number
@ notice Keeper resolved
@ notice Sets the minimum and maximum amount of the g Token reserve profit to be processed on every operation . See growth Gulp Range ( ) . This is a priviledged function restricted to the contract owner . @ param growth Min Gulp Amount The minimum profit of the g Token reserve to be processed per deposit withdrawal . @ param growth Max Gulp Amount The maximum profit of the g Token reserve to be processed per deposit withdrawal .
True if the spender can transfer tokens on the user ' s behalf to this contract .
@ dev Throws if called by any account other than the owner .
Query balance and total Supply in History @ dev Queries the balance of owner at a specific block Number @ param owner The address from which the balance will be retrieved @ param block Number The block number when the balance is queried @ return The balance at block Number These next few lines are used when the balance of the token is requested before a check point was ever created for this token , it requires that the parent Token . balance Of At be queried at the genesis block for that token as this contains initial balance of this token Has no parent This will return the expected balance during normal situations
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the name of the token .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev GET The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 Eth Items .
@ notice Checks if Boost Repay could be triggered for the CDP @ dev Called by MCD Monitor to enforce the min max check @ param method Type of action to be called @ param user The actual address that owns the Compound position @ return Boolean if it can be called and the ratio check if cdp is subscribed check if boost and boost allowed
@ notice Allows the guardian Address to execute protocol actions @ param target Contract Registry Key key in registry of target contract @ param call Value amount of wei if a token transfer is involved @ param function Signature function signature of the function to be executed if proposal is successful @ param call Data encoded value ( s ) to call function with if proposal is successful
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev See { IERC20 total Supply } .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ notice Returns number of tokens that the owner has allowed the spender to withdraw
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens owned by account .
@ notice admin function to unpause the contract
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Function to initialize the contract @ dev staking Address must be initialized separately after Staking contract is deployed @ dev service Provider Factory Address must be initialized separately after Service Provider Factory contract is deployed @ dev delegate Manager Address must be initialized separately after Delegate Manager contract is deployed @ param token Address address of ERC20 token that will be claimed @ param governance Address address for Governance proxy contract
@ dev See { IERC165 supports Interface } . Time complexity O ( 1 ) , guaranteed to always use less than 30 000 gas .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice sets the pending Gov @ param pending Gov The address of the rebaser contract to use for authentication .
Main functions
@ dev Returns true if and only if the function is running in the constructor extcodesize checks the size of the code stored in an address , and address returns the current address . Since the code is still not deployed when running a constructor , any checks on its code size will yield zero , making it an effective way to detect if a contract is under construction or not .
@ notice Swift resolvers call to update LXL service status . @ dev Swift resolvers must first confirm to participate and can continue with details cancel LXL service . @ param details Context re : status update . @ param registered If true , swift resolver can participate in LXL resolution .
@ dev Returns the amount of tokens in existence .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ return The admin slot .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Performs the reserve adjustment actions leaving a liquidity room , if necessary . It will attempt to incorporate the liquidity mining assets into the reserve and adjust the collateralization targeting the configured ratio . This method is exposed publicly . @ param room Amount The underlying token amount to be available after the operation . This is revelant for withdrawals , once the room amount is withdrawn the reserve should reflect the configured collateralization ratio . @ return success A boolean indicating whether or not both actions suceeded .
@ dev Returns whether the target address is a contract . @ param addr Address to check . @ return address Check True if addr is a contract , false if not .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the address of the current owner .
@ dev Multiplies two exponentials , returning a new exponential . We add half the scale before dividing so that we get rounding instead of truncation . See " Listing 6 " and text above it at https : accu . org index . php journals 1717 Without this change , a result like 6 . 6 . . . e 19 will be truncated to 0 instead of being rounded to 1e 18 . The only error div can return is Math Error . DIVISION BY ZERO but we control exp Scale and it is not zero .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ notice Burn tokens for a given staker @ dev Called when slash occurs @ param stake Account Account for which funds will be burned @ param amount amount to burn burning zero tokens is not allowed checkpoint updated staking balance checkpoint total supply burn

@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Sets the collateralization ratio and margin . These values are percentual and relative to the maximum collateralization ratio provided by the underlying asset . This method is exposed publicly . @ param collateralization Ratio The target collateralization ratio , between lend and borrow , that the reserve will try to maintain . @ param collateralization Margin The deviation from the target ratio that should be accepted .
@ return the current total amount of tokens staked by all users
@ dev Adds two unsigned integers , reverts on overflow .
@ notice Returns normalized ( to USD with 18 decimals ) summary balance of pool using all tokens in this protocol
@ dev Returns the amount of tokens in existence .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the list of enabled modules .
A Basis Point is 1 100 of a percent . e . g . 10 basis points ( e . g . 0 . 1 % ) on 5000 is 5000 0 . 001 > 5
@ dev Returns the address of the current owner .
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
@ notice Used if an aggregator contract has been proposed . @ return round Id is the round ID for which data was retrieved @ return answer is the answer for the given round @ return started At is the timestamp when the round was started . ( Only some Aggregator V3Interface implementations return meaningful values ) @ return updated At is the timestamp when the round last was updated ( i . e . answer was last computed ) @ return answered In Round is the round ID of the round in which the answer was computed .
@ dev Returns the address of the current owner .
@ dev See { ERC20 before Token Transfer } . Requirements : minted tokens must not cause the total supply to go over the cap . if ( from address ( 0 ) ) {
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Returns the value stored at position index in the set . O ( 1 ) . Note that there are no guarantees on the ordering of values inside the array , and it may change when more values are added or removed . Requirements : index must be strictly less than { length } .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the address of the current owner .
The amount of bytes each rollup transaction uses in the block data for data availability . This is the maximum amount of bytes of all different transaction types .
@ dev Adds a key value pair to a map , or updates the value for an existing key . O ( 1 ) . Returns true if the key was added to the map , that is if it was not already present . We read and store the key ' s index to prevent multiple reads from the same storage slot if ( key Index 0 ) { The entry is stored at length 1 , but we add 1 to all indexes and use 0 as a sentinel value
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns whether refundees can withdraw their deposits ( be refunded ) . The overridden function receives a ' payee ' argument , but we ignore it here since the condition is global , not per payee .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements : to cannot be the zero address .
Set the latest Allocator contract address . Only the owner can execute this function .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ notice The standard EIP 20 approval event
@ dev Returns the amount of tokens in existence .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Requirements : the caller must have role ' s admin role .
@ dev Efficiently delete from an unordered array by moving the last element to the " hole " and reducing the array length . Can change the order of the list and invalidate previously held indexes . @ notice stake List Ref length and stake Index are already ensured valid in stake End ( ) @ param stake List Ref Reference to stake Lists [ staker Addr ] array in storage @ param stake Index Index of the element to delete
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
administrator can manually disable the ambassador phase .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Retrieves the total supply at the time snapshot Id was created .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Integer division of two numbers , truncating the quotient . assert ( b > 0 ) ; Solidity automatically throws when dividing by 0 uint256 c a b ; assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
Convert signed 64 . 64 fixed point number into signed 128 . 128 fixed point number . @ param x signed 64 . 64 bit fixed point number @ return signed 128 . 128 fixed point number
@ dev Returns the amount of tokens in existence .
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
main withdraw function that can be called anytime will send all funds from the contract
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
Pending Withdrawal
@ notice Delegate votes from msg . sender to delegatee @ param delegatee The address to delegate votes to
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Called when contract is deprecated
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Validates that an asset ' s registration matches the given params @ param asset Hash the address of the asset to check @ param proxy Address the expected proxy address on Switcheo Trade Hub @ param to Asset Hash the expected asset hash on Switcheo Trade Hub
No rebalance implementation for lower fees and faster swaps Check balance
@ dev transfer token for a specified address @ param to The address to transfer to . @ param value The amount to be transferred .
@ notice get past rounds answers @ param round Id the round number to retrieve the answer for @ dev # [ deprecated ] Use get Round Data instead . This does not error if no answer has been reached , it will simply return 0 . Either wait to point to an already answered Aggregator or use the recommended get Round Data instead which includes better verification information .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfer From . This is zero by default . This value changes when approve or transfer From are called .
@ dev Integer division of two numbers , truncating the quotient .
Claim tokens for reserve wallets
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Revokes role from the calling account . Roles are often managed via { grant Role } and { revoke Role } : this function ' s purpose is to provide a mechanism for accounts to lose their privileges if they are compromised ( such as when a trusted device is misplaced ) . If the calling account had been granted role , emits a { Role Revoked } event . Requirements : the caller must be account .
@ dev Function to check the amount of tokens that an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the amount of tokens owned by account .
transfer Ownership to other address
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Throws if called by any account other than the owner .
@ dev Throws if called by any account other than the owner .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Initializes the data structure . This method is exposed publicly . @ param reserve Token The ERC 20 token address of the reserve token ( c Token ) . @ param underlying Token The ERC 20 token address of the underlying token that backs up the reserve token . @ param mining Token The ERC 20 token address to be collected from liquidity mining ( COMP ) .
Calculate sqrt ( x ) rounding down . Revert if x < 0 . @ param x signed 64 . 64 bit fixed point number @ return signed 64 . 64 bit fixed point number
@ notice The sender liquidates the borrowers collateral . The collateral seized is transferred to the liquidator . @ param borrower The borrower of this a Token to be liquidated @ param a Token Collateral The market in which to seize collateral from the borrower @ param repay Amount The amount of the underlying borrowed asset to repay @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ notice Get total delegated stake locked up for a service provider
@ notice Call account target , supplying value amount and data data . Only the owner may call this function . @ param target address The account to call . @ param amount uint256 The amount of ether to include as an endowment . @ param data bytes The data to include along with the call . @ return A boolean to indicate if the call was successful , as well as the returned data or revert reason .
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ notice recalculate the amount of LINK available for payouts
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
update update User Event Permission true for disallow and false for allow notice this is only done by owner
Return the random amount to burn based on the amount we want to transfer . Between 1 % and 10 % .
support delegates burn del delegates to backhole
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 allowance } .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev See { IERC20 total Supply } .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
Sets the maximum delegators staking reward portion @ dev governance function called only by the functional manager @ param max Delegators Staking Rewards Percent Mille is the maximum delegators portion in percent mille ( 0 100 , 000 )
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice An event thats emitted when a delegate account ' s vote balance changes
@ notice deposit amount amount of liquidity for user @ param amount the amount of liquidity to add for shares @ return success failure
@ dev Returns the amount of tokens in existence .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
[ Grey list ] An EOA can safely interact with the system no matter what . If you ' re using Metamask , you ' re using an EOA . Only smart contracts may be affected by this grey list . This contract will not be able to ban any EOA from the system even if an EOA is being added to the grey List , he she will still be able to interact with the whole system as if nothing happened . Only smart contracts will be affected by being added to the grey List . This grey list is only used in Vault . sol , see the code there for reference
@ dev Burns a specific ERC721 token . @ param token Id uint256 id of the ERC721 token to be burned . solhint disable next line max line length
Allow token to be traded sent from account to account allow for staking and governance plug in
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Change Governance of the contract to a new account ( new Governor ) . @ param new Governor Address of the new Governor
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens owned by account .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Update reward variables for all pools . Be careful of gas spending !
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Approve the passed address to spend the specified amount of tokens on behalf of msg . sender . Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 @ param spender The address which will spend the funds . @ param value The amount of tokens to be spent .
@ dev See { IERC20 balance Of } .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
@ dev Returns the name of the token .
@ dev The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed function quorum Votes ( ) public pure returns ( uint ) { return 40 000 000e18 ; }
@ notice Creates amount token to to . Must only be called by the owner .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice Implemented by jobs to show that a keeper performed work @ param keeper address of the keeper that performed the work
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies on extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Internal function that abstracts the algorithm to be performed with borrowed funds . It receives the funds , deposited in the current contract , and must ensure they are available as balance of the current contract , including fees , before it returns . @ param token The ERC 20 contract address . @ param amount The amount being borrowed . @ param fee The fee , in addition to the amount borrowed , to be repaid . @ param params Additional user parameters provided when the flash loan was requested . @ return success A boolean indicating success .
Views
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when from buy option Amount option and create new option . @ param from user ' s account @ param settlement user ' s input settlement paid for buy new option . @ param option Price option ' s paid price @ param settlement Amount settement cost @ param option Amount mint option token amount .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
In case of catastrophic failure
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
Safe Recycle transfer function , just in case if rounding error causes pool to not have enough Recycles .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an { Approval } event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ notice Creates amount token to to . Must only be called by the owner ( Master Star ) .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Performs generic transactions . Any module that has been added to this wallet can use this method to transact on any third party contract with msg . sender as this wallet itself . Note : 1 ) this method must ONLY allow invocations from a module that has been added to this wallet . The wallet owner shall NOT be permitted to call this method directly . 2 ) Reentrancy inside this function should NOT cause any problems . @ param mode The transaction mode , 1 for CALL , 2 for DELEGATECALL . @ param to The desitination address . @ param value The amount of Ether to transfer . @ param data The data to send over using to . call { value : value } ( data ) @ return return Data The transaction ' s return value .
@ dev Liquidate the given position by converting it to ETH and return back to caller . @ param id The position ID to perform liquidation 1 . Convert the position back to LP tokens and use liquidate strategy . 2 . Return all available ETH back to the operator .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Sets a new token price .
@ dev Returns the address of the current owner .
solhint disable previous line no empty blocks
Reserve some percentage of HOLY token distribution ( e . g . initially , 10 % of tokens are reserved for future pools to be added )
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ param addr The user to look up staking information for . @ return The number of staking tokens deposited for addr .
@ dev Returns true if the caller is the current owner .
@ return the name of the token .
Update reward variables of the given pool to be up to date . sushi . mint ( devaddr , sushi Reward . div ( 10 ) ) ;
@ dev Returns the amount of tokens in existence .
@ dev Checks if a module has been added to this wallet . @ param module The module to check . @ return True if the module exists ; False otherwise .
@ dev Creates a two asset liquidity pool and funds it by depositing both assets . The create pool is public with a 50 % 50 % distribution and 10 % swap fee . @ param token0 The ERC 20 token for the first asset of the pair . @ param amount0 The amount of the first asset of the pair to be deposited . @ param token1 The ERC 20 token for the second asset of the pair . @ param amount1 The amount of the second asset of the pair to be deposited . @ return pool The address of the newly created pool .
@ dev Returns the admin role that controls role . See { grant Role } and { revoke Role } . To change a role ' s admin , use { set Role Admin } .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Updates the rewards token .
@ dev Contract Status . INIT functions
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev See { IERC165 supports Interface } .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Throws if called by any account other than the owner .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev Sets admin Role as role ' s admin role . Emits a { Role Admin Changed } event .
@ dev Whenever an { IERC721 } token Id token is transferred to this contract via { IERC721 safe Transfer From } by operator from from , this function is called . It must return its Solidity selector to confirm the token transfer . If any other value is returned or the interface is not implemented by the recipient , the transfer will be reverted . The selector can be obtained in Solidity with IERC721 . on ERC721Received . selector .
emitted when the charity is disabled
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev This event will be emitted every time the implementation gets upgraded @ param implementation representing the address of the upgraded implementation
Functionality for secondary pool escrow . Transfers AUSC tokens from msg . sender to this escrow . At most per day , mints a fixed number of escrow tokens to the pool , and notifies the pool . The period 1 day should match the secondary pool .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
deprecate current contract if favour of a new one
@ dev Returns the total reserve amount held liquid by the contract summed up with the underlying reserve of all g Tokens that make up the portfolio . This method is exposed publicly . @ return total Reserve The computed total reserve amount .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Revokes role from account . If account had been granted role , emits a { Role Revoked } event . Requirements : the caller must have role ' s admin role .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Integer division of two unsigned integers truncating the quotient , reverts on division by zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ return true if msg . sender is the owner of the contract .
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the average of two numbers . The result is rounded towards zero . ( a + b ) 2 can overflow , so we distribute
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . import ANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ return The total supply of OUSD .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Gets the balance of the specified address . @ param owner address to query the balance of @ return uint256 representing the amount owned by the passed address
Check if current round is initialized
@ dev Restrict operation to profit deposit authority only
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the amount of tokens in existence .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ notice An event thats emitted when the minter address is changed
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Allow owner to change alpaca price
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the downcasted int128 from int256 , reverting on overflow ( when the input is less than smallest int128 or greater than largest int128 ) . Counterpart to Solidity ' s int128 operator . Requirements : input must fit into 128 bits Available since v3 . 1 .
@ dev Returns true if the caller is the current owner .
@ dev Joins an array of slices , using self as a delimiter , returning a newly allocated string . @ param self The delimiter to use . @ param parts A list of slices to join . @ return A newly allocated string containing all the slices in parts , joined with self .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Returns the amount of tokens in existence .
Sets the amount of LINK to be paid for the collateral Value Job Id
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Returns if a token is suppoprted by this contract .
Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Gives permission to to to transfer token Id token to another account . The approval is cleared when the token is transferred . Only a single account can be approved at a time , so approving the zero address clears previous approvals . Requirements : The caller must own the token or be an approved operator . token Id must exist . Emits an { Approval } event .
Deletion Functions
hi and lo are only 4 bits and between 0 and 16 this method converts those values to the unicode ascii code point for the hex representation uses upper case for the characters
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ return The token users deposit as stake .
@ dev Sets { decimals } to a value other than the default one of 18 . WARNING : This function should only be called from the constructor . Most applications that interact with token contracts will not expect { decimals } to ever change , and may work incorrectly if it does .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev See { IERC20 balance Of } .
@ dev Safely transfers token Id token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked . Requirements : from cannot be the zero address . to cannot be the zero address . token Id token must exist and be owned by from . If the caller is not from , it must be have been allowed to move this token by either { approve } or { set Approval For All } . If to refers to a smart contract , it must implement { IERC721Receiver on ERC721Received } , which is called upon a safe transfer . Emits a { Transfer } event .
@ dev Returns the length of a null terminated bytes32 string . @ param self The value to find the length of . @ return The length of the string , from 0 to 32 .
this low level function should be called from a contract which performs important safety checks ( uint112 reserve0 , uint112 reserve1 , ) get Reserves ( ) ; uint total Supply total Supply ; mint ( address ( 0 ) , MINIMUM LIQUIDITY ) ; if ( fee On ) k Last uint ( reserve0 ) . mul ( reserve1 ) ;
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls Return data is optional solhint disable next line max line length
@ dev See { IERC20 allowance } .
solhint disable previous line no empty blocks
@ dev Destroys amount tokens from account , deducting from the caller ' s allowance . See { ERC20 burn } and { ERC20 allowance } . Requirements : the caller must have allowance for accounts ' s tokens of at least amount .
returns Q112 encoded value
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Sets the values for { name } and { symbol } , initializes { decimals } with a default value of 18 . To select a different value for { decimals } , use { setup Decimals } . All three of these values are immutable : they can only be set once during construction .
@ dev Returns the length of a null terminated bytes32 string . @ param self The value to find the length of . @ return The length of the string , from 0 to 32 .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev See { IERC20 balance Of } .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev See { IERC20 total Supply } .
@ dev Returns the number of decimals used to get its user representation . For example , if decimals equals 2 , a balance of 505 tokens should be displayed to a user as 5 , 05 ( 505 10 2 ) . Tokens usually opt for a value of 18 , imitating the relationship between Ether and Wei . This is the value { ERC20 } uses , unless { setup Decimals } is called . NOTE : This information is only used for display purposes : it in no way affects any of the arithmetic of the contract , including { IERC20 balance Of } and { IERC20 transfer } .
@ dev See { IERC20 total Supply } .
@ notice Transfer amount tokens from msg . sender to dst @ param dst The address of the destination account @ param amount The number of tokens to transfer @ return Whether or not the transfer succeeded
@ dev Returns the value associated with key . O ( 1 ) . Requirements : key must be in the map .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ notice View function that will return the action ID or message hash that will need to be prefixed ( according to EIP 191 0x45 ) , hashed , and signed by both the user signing key and by the key returned for this smart wallet by the Dharma Key Registry in order to construct a valid signature for a given generic action . Any nonce value may be supplied , which enables constructing valid message hashes for multiple future actions ahead of time . @ param to address The target to call into as part of the generic action . @ param data bytes The data to supply when calling into the target . @ param nonce uint256 The nonce to use . @ param minimum Action Gas uint256 The minimum amount of gas that must be provided to this call be aware that additional gas must still be included to account for the cost of overhead incurred up until the start of this function call . @ return The action ID , which will need to be prefixed , hashed and signed in order to construct a valid signature .
@ notice Gets the maximum amount of debt available to generate @ param cdp Id Id of the CDP @ param ilk Ilk of the CDP @ dev Substracts 10 wei to aviod rounding error later on
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC721 safe Transfer From } .
encode a uint112 as a UQ112x112
@ dev Scales a given integer to the power of the full scale . @ param x Simple uint256 to scale @ return Scaled value a to an exact number
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ notice Provides a g Token that was added to this contract by the owner at a given index . Note that the index to token association is preserved in between token removals , however removals may may shuffle it around . @ param index The desired index , must be less than the token count . @ return token The g Token currently present at the given index .
@ dev Increase the amount of tokens that an owner has allowed to a spender . This method should be used instead of approve ( ) to avoid the double approval vulnerability described above . @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ dev global Constraints Count return the global constraint pre and post count @ return uint256 global Constraints Pre count . @ return uint256 global Constraints Post count .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Divide an Exp by a scalar , returning a new Exp .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the amount of tokens owned by account .
@ notice Add credit to a job to be paid out for work @ param job the job being credited @ param amount the amount of credit being added to the job
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Divide an Exp by a scalar , returning a new Exp .
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Starts the sale Only the contract owner can call this function
@ dev Must be called after crowdsale ends , to do some extra finalization work . Calls the contract ' s finalization function .
@ return True if there is an active season for farming , or false if there isn ' t one .
@ dev Sets admin Role as role ' s admin role . Emits a { Role Admin Changed } event .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Returns the amount of tokens in existence .
@ dev See { IERC20 balance Of } .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Revokes role from account . If account had been granted role , emits a { Role Revoked } event . Requirements : the caller must have role ' s admin role .
Returns the reward amount of the calculation model before DIP4 . It can be calculated by subtracting " the last cumulative sum of reward unit price " from " the current cumulative sum of reward unit price , " and multiplying by the staking amount .
Withdraw without caring about rewards . EMERGENCY ONLY .
@ notice Add reward to existing epoch or crete a new one @ param protocol Protocol for reward @ param token Reward token @ param epoch Epoch number can be 0 to create new Epoch @ param amount Amount of Reward token to deposit if ( epoch 0 ) epoch epochs Length ; if ( epoch End < block . timestamp ) epoch End block . timestamp ;
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Contract initializer . called once by the factory at time of deployment
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Returns true if the value is in the set . O ( 1 ) .
solhint disable previous line no empty blocks
@ notice Allows liquidity providers to remove liquidity @ param liquidity the pair being unbound @ param job the job being unbound from
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
Converts all incoming Ethereum to tokens for the caller , and passes down the referral address ( if any )
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
Allows a Lock manager to assign a descriptive name for this Lock . @ param lock Name The new name for the lock @ dev Throws if called by other than a Lock manager
Deletes the value of the uint256 type that mapped to the given key . Only the owner can execute this function .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
Get the token balance for account token Owner
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev See { IERC20 total Supply } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Send the specified amount of token to the specified address and freeze it . @ param to Address to which token will be frozen . @ param amount Amount of token to freeze .
@ dev Same as { xref Address function Call address bytes string } [ function Call ] , but performing a delegate call . Available since v3 . 3 . solhint disable next line avoid low level calls
Internal functions
@ dev Asserts that vault is in catastrophic failure mode .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ return the TVL marked when the tokens were released last time .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Remove an account ' s access to this role .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
Convert signed 64 . 64 fixed point number into signed 128 . 128 fixed point number . @ param x signed 64 . 64 bit fixed point number @ return signed 128 . 128 fixed point number
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
divide a UQ112x112 by a uint112 , returning a UQ112x112
@ notice Validate token info @ param token token info to be validated @ return validated token info
@ notice Used to check if is governance contract before setting governance address in other contracts
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Events
@ dev Event triggered when a reward tier is deleted @ param index of tier to deleted
@ dev Throws if called by any account other than the minter .
@ dev Returns the current balance of the given asset .
@ dev Connector Details
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ notice Returns the current per block supply interest rate for this a Token @ return The supply interest rate per block , scaled by 1e18 require ( e0 0 , " supply Rate Per Block : calculating borrow Rate failed " ) ;
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Withdraws all balance out of the vault .
@ dev Sets amount as the allowance of spender over the owner s tokens . This is internal function is equivalent to approve , and can be used to e . g . set automatic allowances for certain subsystems , etc . Emits an Approval event . Requirements : owner cannot be the zero address . spender cannot be the zero address .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Allows the current owner to transfer control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Returns the amount of tokens in existence .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev freeze your tokens to the specified address . Be careful , gas usage is not deterministic , and depends on how many freezes to address already has . @ param to Address to which token will be freeze . @ param amount Amount of token to freeze . @ param until Release date , must be in future .
View function to see pending BT Fs on frontend .
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Delegates execution to an implementation contract . This is a low level function that doesn ' t return to its internal call site . It will return to the external caller whatever the implementation returns . @ param implementation Address to delegate . Copy msg . data . We take full control of memory in this inline assembly block because it will not return to Solidity code . We overwrite the Solidity scratch pad at memory position 0 . Call the implementation . out and outsize are 0 because we don ' t know the size yet . Copy the returned data . delegatecall returns 0 on error .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev See { IERC20 balance Of } .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev See { IERC20 balance Of } .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice begin the bonding process for a new keeper @ param bonding the asset being bound @ param amount the amount of bonding asset being bound
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
Admin Events
@ dev Returns the owner of the token Id token . Requirements : token Id must exist .
@ dev Emitted when the pause is lifted by a pauser ( account ) .
@ notice Creates amount token to to . Must only be called by the owner ( Travel Agency ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns true if account is a contract . This test is non exhaustive , and there may be false negatives : during the execution of a contract ' s constructor , its address will be reported as not containing a contract . IMPORTANT : It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ notice Set the Delegate Manager address @ dev Only callable by Governance address @ param address address for new Delegate Manager contract
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
@ dev Function to check the amount of tokens that an owner has allowed to a spender . @ param owner The address which owns the funds . @ param spender The address which will spend the funds . @ return The number of tokens still available for the spender .
@ notice Creates amount token to to . Must only be called by the owner .
@ dev Returns the name of the token .
@ dev Mint initial liquidity tokens . The liquidity provider needs to have called dai . approve @ param dai In The initial Dai liquidity to provide .
@ dev Returns the cap on the token ' s total supply .
Extends the subscription of an existing virtual chain . @ dev Called only by : an authorized subscription plan contract @ dev assumes that the msg . sender approved the amount prior to the call @ param vc Id is the virtual chain ID @ param amount is the amount paid for the virtual chain subscription extension @ param tier is the virtual chain tier , must match the tier selected in the virtual creation @ param rate is the virtual chain tier rate as determined by the subscription plan @ param payer is the address paying for the subscription extension
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Gets the current borrow interest rate based on the given asset , total cash , total borrows and total reserves . @ dev The return value should be scaled by 1e18 , thus a return value of ( true , 1000000000000 ) implies an interest rate of 0 . 000001 or 0 . 0001 % per block . @ param cash The total cash of the underlying asset in the C Token @ param borrows The total borrows of the underlying asset in the C Token @ param reserves The total reserves of the underlying asset in the C Token @ return Success or failure and the borrow interest rate per block scaled by 10e18
REMOVE LIQUIDITY
@ dev Returns the amount of tokens owned by account .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns whether spender is allowed to manage token Id . Requirements : token Id must exist .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Mints token Id and transfers it to to . WARNING : Usage of this method is discouraged , use { safe Mint } whenever possible Requirements : token Id must not exist . to cannot be the zero address . Emits a { Transfer } event .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Converts an address into address payable . Note that this is simply a type cast : the actual underlying value is not changed . Available since v2 . 4 . 0 .
Get the token balance for account token Owner
@ dev Leaves the contract without owner . It will not be possible to call only Owner functions anymore . Can only be called by the current owner . NOTE : Renouncing ownership will leave the contract without an owner , thereby removing any functionality that is only available to the owner .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Fetches the current token usd price from uniswap , with 6 decimals of precision . @ param conversion Factor 1e18 if seeking the ETH price , and a 6 decimal ETH USDC price in the case of other assets This should be impossible , but better safe than sorry Calculate uniswap time weighted average price Underflow is a property of the accumulators : https : uniswap . org audit . html # orgc9b3190 Adjust raw Uniswap Price according to the units of the non ETH asset In the case of ETH , we would have to scale by 1e6 USDC UNITS , but since base Unit2 is 1e6 ( USDC ) , it cancels unscaled Price Mantissa eth Base Unit config . base Unit exp Scale , but we simplify bc eth Base Unit exp Scale
@ dev Returns the address of the current owner .
Safe Math sub function @ dev function for safe subtraction , throws on overflow .
@ notice Get total currently staked for a delegator , for a given service provider
@ dev Returns the interface hash for an interface Name , as defined in the corresponding https : eips . ethereum . org EIPS eip 1820 # interface name [ section of the EIP ] .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Available since v2 . 4 . 0 .
Liquifies tokens to ethereum .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
Top ups the fee pool with the given amount at the given rate @ dev Called by : subscriptions contract . ( not enforced ) @ dev fills the rewards in 30 days buckets based on the monthly Rate @ param amount is the amount to fill @ param monthly Rate is the monthly rate @ param from Timestamp is the to start fill the buckets , determines the first bucket to fill and the amount filled in the first bucket . add the partial amount to the first bucket following buckets are added with the monthly rate
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Atomically decreases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address . spender must have allowance for the caller of at least subtracted Value .
@ dev Approve 0 for a certain address NOTE : Some ERC20 has no standard approve logic , and not allow do new approve if alredy approved . @ param token address of ERC20 @ param spender address of spender
Returns token balance of an account
@ dev Deprecated . This function has issues similar to the ones found in { IERC20 approve } , and its usage is discouraged . Whenever possible , use { safe Increase Allowance } and { safe Decrease Allowance } instead . safe Approve should only be called when setting an initial allowance , or when resetting it to zero . To increase and decrease it , use ' safe Increase Allowance ' and ' safe Decrease Allowance ' solhint disable next line max line length
@ dev Function to change the price of the token @ param self Stored crowdsale from crowdsale contract @ param tokens Per Eth new token price ( amount of tokens per ether ) @ return true if the token price changed successfully
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the admin role that controls role . See { grant Role } and { revoke Role } . To change a role ' s admin , use { set Role Admin } .
@ dev Returns the amount of tokens owned by account .
@ dev Destoys amount tokens from account . amount is then deducted from the caller ' s allowance . See burn and approve .
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ return The result of safely multiplying x and y , interpreting the operands as fixed point decimals of the specified precision unit . @ dev The operands should be in the form of a the specified unit factor which will be divided out after the product of x and y is evaluated , so that product must be less than 2 256 . Unlike multiply Decimal , this function rounds the result to the nearest increment . Rounding is useful when you need to retain fidelity for small decimal numbers ( eg . small fractions or percentages ) .
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
@ dev Emitted when the implementation is upgraded . @ param implementation Address of the new implementation .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . We use { Address . function Call } to perform this call , which verifies that the target address contains contract code and also asserts for success in the low level call . if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
Deposit LP tokens to Master Chef for SUSHI allocation .
@ dev Change owning address of the token contract , specifically for minting @ param self Stored token from token contract @ param new Owner Address for the new owner @ return True if completed
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Moves amount tokens from sender to recipient using the allowance mechanism . amount is then deducted from the caller ' s allowance . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice A method to get stakeholder information @ return address Stakeholder address @ return stake Amount Staking amount @ return created At Staking created date @ return expired At Expiration time @ return reward Earned rewards
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Function to check the amount of tokens that an owner allowed to a spender . @ param owner address The address which owns the funds . @ param spender address The address which will spend the funds . @ return A uint256 specifying the amount of tokens still available for the spender .
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
transfers delegate authority when sending a token . https : medium . com bulldax finance sushiswap delegation double spending bug 5adcc7b3830f
@ notice begin the bonding process for a new keeper
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Burning token for deflanationary features
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Throws if called by any account other than the owner .
Inner Because of https : github . com ethereum EI Ps blob master EIPS eip 20 . md # transfer 1
@ dev Sets a new annual rate and cap for the staking reward .
@ dev Returns the amount of tokens owned by account .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ notice Accrues interest and adds reserves by transferring from admin @ param add Amount Amount of reserves to add @ return uint 0 success , otherwise a failure ( see Error Reporter . sol for details )
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev Returns true if the value is in the set . O ( 1 ) .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Add a value to a set . O ( 1 ) . Returns true if the value was added to the set , that is if it was not already present .
@ dev Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) From Monolith DAO Token . sol @ param spender The address which will spend the funds . @ param added Value The amount of tokens to increase the allowance by .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the name of the token .
@ dev Sets the values for { name } and { symbol } , initializes { decimals } with a default value of 18 . To select a different value for { decimals } , use { setup Decimals } . All three of these values are immutable : they can only be set once during construction .
@ dev Returns a token ID at a given index of all the tokens stored by the contract . Use along with { total Supply } to enumerate all tokens .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Overrides ERC20Burnable burn From to allow unlimited transfers by Savings Module Skip decrease allowance
@ dev Transfer tokens to a specified address . @ param to The address to transfer to . @ param value The amount to be transferred . @ return True on success , false otherwise .
Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ notice An event thats emitted when the minter address is changed
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice an event emitted when a transaction fails
Withdraw without caring about rewards . EMERGENCY ONLY .
@ dev See { IERC20 transfer } . Requirements : recipient cannot be the zero address . the caller must have a balance of at least amount .
Return reward multiplier over the given from to to block .
@ dev Used to salvage any token deposited into the contract by mistake . @ param token Address Token address to salvage . @ param amount Amount of token to salvage .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
CHECK BALANCE
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ notice Get information about a service endpoint given its service id @ param service Type type of service , must be a valid service from Service Type Manager @ param service Id id of service
To take back all LP what last staked
@ dev Destroys amount tokens from account , reducing the total supply . Emits a { Transfer } event with to set to the zero address . Requirements account cannot be the zero address . account must have at least amount tokens .
@ dev Changes the admin of the proxy . Only the current admin can call this function . @ param new Admin Address to transfer proxy administration to .
@ dev Submits an onchain request to withdraw Ether or ERC20 tokens from the protocol fees account . The complete balance is always withdrawn . Anyone can request a withdrawal of the protocol fees . Note that after such an operation , it will take the owner some time ( no more than MAX AGE FORCED REQUEST UNTIL WITHDRAW MODE ) to process the request and create the deposit to the offchain account . @ param token Address The address of the token , use 0x0 for Ether .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev See { IERC20 total Supply } .
@ dev Gets the total amount of tokens stored by the contract . @ return uint256 representing the total amount of tokens
Returns a guardian ' s delegators staking reward portion @ dev If not explicitly set , returns the default Delegators Staking Rewards Percent Mille @ return delegator Rewards Ratio Percent Mille is the delegators portion in percent mille
@ dev Returns an Ethereum Signed Message , created from a hash . This replicates the behavior of the https : github . com ethereum wiki wiki JSON RPC # eth sign [ eth sign ] JSON RPC method . See { recover } . 32 is the length in bytes of hash , enforced by the type signature above
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
@ dev Returns the integer division of two unsigned integers . Reverts with custom message on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Returns the manager for account . See { set Manager } .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
Deposit LP tokens to Travel Agency for CITY allocation .
@ dev Returns the amount of tokens in existence .
@ dev Returns the 5 requests Id ' s with the top payouts in an array . @ param data is the array to get the top 5 from @ return to 5 max amounts and their respective index within the array max [ j ] data [ j + 1 ] ; max Index [ j ] j + 1 ;
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf . @ param operator operator address to set the approval @ param approved representing the status of the approval to be set
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ notice withdraw stuck funds
@ dev Transfer tokens from one address to another @ param from address The address which you want to send tokens from @ param to address The address which you want to transfer to @ param value uint the amount of tokens to be transferred Check is not needed because sub ( allowance , value ) will already throw if this condition is not met if ( value > allowance ) throw ;
@ dev PUBLIC FACING : External helper to return most global info with a single call . Ugly implementation due to limitations of the standard ABI encoder . @ return Fixed array of values
@ dev Adds two numbers , throws on overflow .
@ return True if the market is enabled for this DMM token ( IE DMM : DAI ) or false if it is not enabled .
@ notice admin function to unpause the contract
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Modifier to use in the initializer function of a contract .
@ dev Emitted when account is granted role . sender is the account that originated the contract call , an admin role bearer except when using { setup Role } .
@ dev unlocks reward tokens based on funding schedules handle any leftover normal case : unlock some shares from each funding schedule
@ notice ERC1155 batch transfer receiver which repairs a batch of tokens and removes them from the repair list . @ dev This contract must have been given a minter role for the inventory prior to caslling this function . @ dev Reverts if ids is an empty array . @ dev Reverts if the transfer was not operated through inventory Contract . @ dev Reverts if ids contains an id not in the repair list . @ dev Reverts if the defective tokens transfer to the graveyard fails . @ dev Reverts if the replacement tokens minting to the owner fails . @ dev Reverts if the REVV compensation transfer fails . @ dev Emits an ERC1155 Transfer Batch event for the defective tokens transfer to the graveyard . @ dev Emits an ERC1155 Transfer Batch event for the replacement tokens minting to the owner . @ dev Emits an ERC20 Transfer event for the REVV compensation transfer . @ dev Emits a Repaired Batch event . @ param operator the address which initiated the batch transfer ( i . e . msg . sender ) . @ param from the address which previously owned the token . @ param defective Tokens an array containing the ids of the defective tokens to repair . @ param values an array containing amounts of each token being transferred ( order and length must match ids array ) . @ param data additional data with no specified format . @ return bytes4 ( keccak256 ( " on ERC1155Batch Received ( address , address , uint256 [ ] , uint256 [ ] , bytes ) " ) )
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies on extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Emitted when the allowance of a spender for an owner is set by a call to { approve } . value is the new allowance .
@ dev Hook that is called before any transfer of tokens . This includes minting and burning . Calling conditions : when from and to are both non zero , amount of from ' s tokens will be to transferred to to . when from is zero , amount tokens will be minted for to . when to is zero , amount of from ' s tokens will be burned . from and to are never both zero . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Payback borrowed ETH ERC20 Token . @ param token token address to payback . ( For ETH : 0x Eeeee Eeee Ee Eee Ee Ee Eee EE Eeeee Eeeeeeee E Ee E ) @ param amt token amount to payback . @ param get Id Get token amount at this ID from Insta Memory Contract . @ param set Id Set token amount at this ID in Insta Memory Contract .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev See { IERC20 allowance } .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
@ dev Appends a byte to the end of the buffer . Resizes if doing so would exceed the capacity of the buffer . @ param buf The buffer to append to . @ param data The data to append . @ return buffer The original buffer . let bufptr : mload ( buf ) let buflen : mload ( bufptr ) let dest : add ( add ( bufptr , buflen ) , len ) mstore ( bufptr , add ( buflen , len ) )
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ notice Get vote direction and vote magnitude for a given proposal and voter @ param proposal Id id of the proposal @ param voter address of the voter we want to check @ return returns vote direction and magnitude if valid vote , else default values
@ return the symbol of the token .
@ dev proxy Delegate Id
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
Set the latest Withdraw Storage contract address . Only the owner can execute this function .
Set the latest Policy Group contract address . Only the owner can execute this function .
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
Service methods
Set the migrator contract . Can only be called by the owner .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero . Solidity only automatically asserts when dividing by 0 assert ( a b c + a % b ) ; There is no case in which this doesn ' t hold
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Mint the specified amount of token to the specified address and freeze it until the specified date . Be careful , gas usage is not deterministic , and depends on how many freezes to address already has . @ param to Address to which token will be freeze . @ param amount Amount of token to mint and freeze . @ param until Release date , must be in future . @ return A boolean that indicates if the operation was successful .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the amount of tokens owned by account .
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev Grants role to account . If account had not been already granted role , emits a { Role Granted } event . Note that unlike { grant Role } , this function doesn ' t perform any checks on the calling account . [ WARNING ] This function should only be called from the constructor when setting up the initial roles for the system . Using this function in any other way is effectively circumventing the admin system imposed by { Access Control } .
@ dev only hidden owner can transfer ownership
@ return the total supply of the token
Adds a subscription plan contract to the authorized subscribers list @ dev governance function called only by the functional manager @ param addr is the address of the subscription plan contract
@ notice Destroy the contract
@ dev Asserts that sender is staking Proxy contract .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . solhint disable next line avoid low level calls , avoid call value
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Gets the id of the delegation fee corresponding to the given epoch @ param epoch for which epoch is querying delegation fee @ param from delegation Fees starting index
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Removes a value from a set . O ( 1 ) . Returns true if the value was removed from the set , that is if it was present . We read and store the value ' s index to prevent multiple reads from the same storage slot if ( value Index ! 0 ) { To delete an element from the values array in O ( 1 ) , we swap the element to delete with the last one in the array , and then remove the last element ( sometimes called as ' swap and pop ' ) . This modifies the order of the array , as noted in { at } . When the value to delete is the last one , the swap operation is unnecessary . However , since this occurs so rarely , we still do the swap anyway to avoid the gas cost of adding an ' if ' statement . Move the last value to the index where the value to delete is Update the index for the moved value set . indexes [ lastvalue ] to Delete Index + 1 ; Delete the slot where the moved value was stored Delete the index for the deleted slot
@ dev Updates the set of claim topics that a trusted issuer is allowed to emit . Requires that this Claim Issuer contract already exists in the registry Requires that the provided claim Topics set is not empty @ param trusted Issuer the claim issuer to update . @ param claim Topics the set of claim topics that the trusted issuer is allowed to emit This function can only be called by the owner of the Trusted Issuers Registry contract emits a Claim Topics Updated event
@ notice Provides the address receiving the liquidity pool migration . @ return migration Recipient An address to which funds will be sent upon liquidity pool migration completion .
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin contracts pull 522
Enter the contract , get TPS for your TRB
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Fallback function . Implemented entirely in fallback .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Authorize third party transfer by increasing decreasing allowed rather than setting it @ param self Stored token from token contract @ param spender Address to authorize @ param value Change Increase or decrease in number of tokens authorized account may send @ param increase True if increasing allowance , false if decreasing allowance @ return True if completed
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Transfers ownership of the contract to a new account ( new Owner ) .
@ dev Atomically increases the allowance granted to spender by the caller . This is an alternative to { approve } that can be used as a mitigation for problems described in { IERC20 approve } . Emits an { Approval } event indicating the updated allowance . Requirements : spender cannot be the zero address .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
cal pending rewards for given pool
@ dev Sets amount as the allowance of spender over the caller ' s tokens . Returns a boolean value indicating whether the operation succeeded . IMPORTANT : Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering . One possible solution to mitigate this race condition is to first reduce the spender ' s allowance to 0 and set the desired value afterwards : https : github . com ethereum EI Ps issues 20 # issuecomment 263524729 Emits an { Approval } event .
@ dev Returns the subtraction of two unsigned integers , reverting on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Emitted when the pause is triggered by account .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Imitates a Solidity high level call ( i . e . a regular function call to a contract ) , relaxing the requirement on the return value : the return value is optional ( but if data is returned , it must not be false ) . @ param token The token targeted by the call . @ param data The call data ( encoded using abi . encode or one of its variants ) . We need to perform a low level call here , to bypass Solidity ' s return data size checking mechanism , since we ' re implementing it ourselves . A Solidity high level call has three parts : 1 . The target address is checked to verify it contains contract code 2 . The call itself is made , and success asserted 3 . The return value is decoded , which in turn checks the size of the returned data . solhint disable next line max line length solhint disable next line avoid low level calls if ( returndata . length > 0 ) { solhint disable next line max line length
@ dev Multiply an Exp by a scalar , truncate , then add an to an unsigned integer , returning an unsigned integer .
@ dev Allows the current owner to transfer control of the contract to a new Owner . @ param new Owner The address to transfer ownership to .
should only be called by controller
@ dev Checks whether or not there is sufficient allowance for this contract to move amount from from and whether or not from has a balance of at least amount . Does NOT do a transfer .
@ dev Same as { xref Address function Call With Value address bytes uint256 } [ function Call With Value ] , but with error Message as a fallback revert reason when target reverts . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice Sets the incentivizer contract
@ dev Moves tokens amount from sender to recipient . This is internal function is equivalent to { transfer } , and can be used to e . g . implement automatic token fees , slashing mechanisms , etc . Emits a { Transfer } event . Requirements : sender cannot be the zero address . recipient cannot be the zero address . sender must have a balance of at least amount .
@ dev Emitted when value tokens of token type id are transferred from from to to by operator .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice The standard EIP 20 transfer event
@ notice Get the official price for a symbol @ param symbol The symbol to fetch the price of @ return Price denominated in USD , with 6 decimals
@ dev See { IERC20 transfer From } . Emits an { Approval } event indicating the updated allowance . This is not required by the EIP . See the note at the beginning of { ERC20 } ; Requirements : sender and recipient cannot be the zero address . sender must have a balance of at least amount . the caller must have allowance for sender ' s tokens of at least amount .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ return true if msg . sender is the owner of the contract .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns if a token is suppoprted by this contract .
@ dev See { ERC20 decimals } . Always returns 18 , as per the [ ERC777 EIP ] ( https : eips . ethereum . org EIPS eip 777 # backward compatibility ) .
@ dev Returns the multiplication of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s operator . Requirements : Multiplication cannot overflow . Gas optimization : this is cheaper than requiring ' a ' not being zero , but the benefit is lost if ' b ' is also tested . See : https : github . com Open Zeppelin openzeppelin solidity pull 522
@ dev Returns the amount of tokens owned by account .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Emitted when value tokens are moved from one account ( from ) to another ( to ) . Note that value may be zero .
@ dev Hook that is called before any token transfer . This includes minting and burning . Calling conditions : When from and to are both non zero , from ' s token Id will be transferred to to . When from is zero , token Id will be minted for to . When to is zero , from ' s token Id will be burned . from cannot be the zero address . to cannot be the zero address . To learn more about hooks , head to xref : ROOT : extending contracts . adoc # using hooks [ Using Hooks ] .
@ dev Function to check the amount of tokens that an owner has allowed to a spender . @ param owner The address which owns the funds . @ param spender The address which will spend the funds . @ return The number of tokens still available for the spender .
y Token functions
@ dev Returns the amount of tokens in existence .
@ dev Returns the name of the token .
Custom logic in here for how much the plates allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
@ dev Creates amount tokens and assigns them to account , increasing the total supply . Emits a { Transfer } event with from set to the zero address . Requirements to cannot be the zero address .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
@ dev Returns the number of values on the set . O ( 1 ) .
@ dev Modifies self to contain everything from the first occurrence of needle to the end of the slice . self is set to the empty slice if needle is not found . @ param self The slice to search and modify . @ param needle The text to search for . @ return self .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow . Available since v2 . 4 . 0 .
@ dev Returns the symbol of the token , usually a shorter version of the name .
@ dev Creates new position for user @ param asset The address of the main collateral token @ param user The address of a position ' s owner @ param oracle Type The type of an oracle
@ dev Transfers ownership of the contract to a new account ( new Owner ) . Can only be called by the current owner .
@ dev This function should be called as the final step of the flash loan to properly implement the repay of the loan . @ param token The reserve token . @ param gross Amount The amount to be repayed including repay fees .
calc In Given Out a I token Amount In b O token Balance Out b O \ ( w O w I ) \ b I token Balance In b I | | | ^ 1 | a O token Amount Out a I \ \ ( b O a O ) w I token Weight In w O token Weight Out ( 1 s F ) s F swap Fee ( + collected Fee )
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ notice Creates amount token to to . Must only be called by the owner ( Master Chef ) .
Contract balance of coin normalized to 1e18
@ dev Returns the number of values in the set . O ( 1 ) .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Destroys token Id . The approval is cleared when the token is burned . Requirements : token Id must exist . Emits a { Transfer } event . Clear approvals Clear metadata ( if any )
naps stuff
@ return the token being held .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed According to EIP 1052 , 0x0 is the value returned for not yet created accounts and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned for accounts without code , i . e . keccak256 ( ' ' ) solhint disable next line no inline assembly
@ dev Performs a Solidity function call using a low level call . A plain call is an unsafe replacement for a function call : use this function instead . If target reverts with a revert reason , it is bubbled up by this function ( like regular Solidity function calls ) . Returns the raw returned data . To convert to the expected return value , use https : solidity . readthedocs . io en latest units and global variables . html ? highlight abi . decode # abi encoding and decoding functions [ abi . decode ] . Requirements : target must be a contract . calling target with data must not revert . Available since v3 . 1 .
solhint disable previous line no empty blocks
Validates passed address equals to the three addresses .
@ dev Replacement for Solidity ' s transfer : sends amount wei to recipient , forwarding all available gas and reverting on errors . https : eips . ethereum . org EIPS eip 1884 [ EIP1884 ] increases the gas cost of certain opcodes , possibly making contracts go over the 2300 gas limit imposed by transfer , making them unable to receive funds via transfer . { send Value } removes this limitation . https : diligence . consensys . net posts 2019 09 stop using soliditys transfer now [ Learn more ] . IMPORTANT : because control is transferred to recipient , care must be taken to not create reentrancy vulnerabilities . Consider using { Reentrancy Guard } or the https : solidity . readthedocs . io en v0 . 5 . 11 security considerations . html # use the checks effects interactions pattern [ checks effects interactions pattern ] . Available since v2 . 4 . 0 . solhint disable next line avoid call value
@ dev Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through { transfer From } . This is zero by default . This value changes when { approve } or { transfer From } are called .
@ dev Give an account access to this role .
@ dev Returns true if account is a contract . [ IMPORTANT ] It is unsafe to assume that an address for which this function returns false is an externally owned account ( EOA ) and not a contract . Among others , is Contract will return false for the following types of addresses : an externally owned account a contract in construction an address where a contract will be created an address where a contract lived , but was destroyed This method relies in extcodesize , which returns 0 for contracts in construction , since the code is only stored at the end of the constructor execution . solhint disable next line no inline assembly
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on underflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot underflow .
@ dev Returns the integer division of two unsigned integers . Reverts on division by zero . The result is rounded towards zero . Counterpart to Solidity ' s operator . Note : this function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Same as { xref Address function Call address bytes } [ function Call ] , but also transferring value wei to target . Requirements : the calling contract must have an ETH balance of at least value . the called Solidity function must be payable . Available since v3 . 1 .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ notice An event thats emitted when a delegate account ' s vote balance changes
Division , always rounds up require ( b > 0 , " div by 0 " ) ;
@ dev Returns the subtraction of two unsigned integers , reverting with custom message on overflow ( when the result is negative ) . Counterpart to Solidity ' s operator . Requirements : Subtraction cannot overflow .
transfer , mint and burn are the only functions where the balances are modified , so it is there that the snapshots are updated . Note that the update happens before the balance change , with the pre modified value . The same is true for the total supply and mint and burn .
Set the latest Property Factory contract address . Only the owner can execute this function .
@ dev See { IERC20 approve } . Requirements : spender cannot be the zero address .
@ dev Moves amount tokens from the caller ' s account to recipient . Returns a boolean value indicating whether the operation succeeded . Emits a { Transfer } event .
@ dev Returns the remainder of dividing two unsigned integers . ( unsigned integer modulo ) , Reverts with custom message when dividing by zero . Counterpart to Solidity ' s % operator . This function uses a revert opcode ( which leaves remaining gas untouched ) while Solidity uses an invalid opcode to revert ( consuming all remaining gas ) . Requirements : The divisor cannot be zero .
@ dev Returns the addition of two unsigned integers , reverting on overflow . Counterpart to Solidity ' s + operator . Requirements : Addition cannot overflow .
