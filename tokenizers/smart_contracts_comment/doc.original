// Recommend: 86400 86400 86400 3600 50 10 live // Recommend: 240 240 240 120 50 10 test
// Initialize the auction
// Place one's bid
// Increase one's bid
// Clean up during phase 3
// Initialize the auction
// Commit one's bid. This also entails sending an amount of ether at least // equal to, but potentially more than, one's bid; if you send a greater // amount than the difference between the submission and your actual bid // will be refunded to you (even in all-pay auctions). This protects bid // privacy.
// Reveal one's bid
// Clean up during phase 2
// Enum holding additional data (marked union / sum datatype)
// using Heap[T] = T[]; ?
/// @dev the number of elements stored in the queue.
/// @dev the number of elements this queue can hold /// @invariant capacity() < length()
/// @dev push a new element to the back of the queue /// @precondition length() < capacity() - 1
/// @dev remove and return the element at the front of the queue /// @precondition length() > 0
// Create a Gavmble contract.
// TODO: allow giving a dead hash. // Provide a chance of `pIn256` in 256 (approx `floor(pIn256/256.0*100)`%) that one later claim from // `msg.caller` which provides the inverse Keccak hash of `key` will result in a transfer of // `web3.toEth(floor(floor(msg.value * 99 / 100) * 256 / pIn256))` back to them.
// Send `web3.toEth(winningsWithKey(sha3(bet), bet))` to `msg.sender` if and only if they are // `orders[sha3(bet)].owner`.
// Insert something
// Computes the sum of all stored data.
/// Appends `_data` to the end of the list `self`.
/// Removes the element identified by the iterator /// `_index` from the list `self`.
/// @return an iterator pointing to the first element whose data /// is `_value` or an invalid iterator otherwise.
// Iterator interface
/// @dev Computes the modular exponential (x ** k) % m.
/// @dev Does a byte-by-byte lexicographical comparison of two strings. /// @return a negative number if `_a` is smaller, zero if they are equal /// and a positive numbe if `_b` is smaller.
/// @dev Compares two strings and returns true iff they are equal.
/// @dev Finds the index of the first occurrence of _needle in _haystack
//events are returned after functions are successfully called
/// Function that is called once an auction ends.
/// Claim that scrypt(data) == hash. With reference to above, /// values[0] = pbkdf2(data) (the "input") and /// pbkdf2(values[2048]) should be equal to hash, values[2048] is called "output".
/// Challenger queries claimant for the value on a wire `_i`. /// Value 0 is the input, value 1024 is the first input to the second /// half of the computation, value 2048 is the output.
/// Claimant responds to challenge, committing to a value.
/// Convicts the claimant to have provided inputs and outputs for a single /// step that do not match the computation of the step. /// q1, q2 and q3 are query indices providing the relevant values. /// q1 is the query index of the first input, q2 the query index of /// the output and q2 is the query index of the auxiliary input only /// used in the second half of the scrypt computation.
/// Convicts the claimant to have provided an incorrect value for value[0].
/// Convicts the claimant to have provided an incorrect value for value[2048].
/// Verifies a salsa step in the first half of the scrypt computation.
/// Verifies a salsa step in the second half of the scrypt computation.
/// PBKDF2 restricted to c=1, hash = hmacsha256 and dklen being a multiple of 32 not larger than 128
// EVENTS // this contract only has six types of events: it can accept a confirmation, in which case // we record owner and operation (hash) alongside it.
// some others are in the case of an owner changing.
// the last one is emitted if the required signatures change
// MODIFIERS // simple single-sig function modifier.
// multi-sig function modifier: the operation must have an intrinsic hash in order // that later attempts can be realised as the same underlying operation and // thus count as confirmations.
// METHODS // constructor is given number of sigs required to do protected "onlymanyowners" transactions // as well as the selection of addresses capable of confirming them.
// Revokes a prior confirmation of the given operation
// Replaces an owner `_from` with another `_to`.
// Gets an owner by 0-indexed position (using numOwners as the count)
// INTERNAL METHODS
// MODIFIERS // simple modifier for daily limit.
// METHODS // constructor - stores initial daily limit and records the present day's index.
// (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.
// resets the amount already spent today. needs many of the owners to confirm.
// checks to see if there is at least `_value` left from the daily limit today. if there is, subtracts it and // returns true. otherwise just returns false.
// determines today's index.
// EVENTS // logged events: // Funds has arrived into the wallet (record how much).
// Single transaction going out of the wallet (record who signed for it, how much, and to whom it's going).
// Multi-sig transaction going out of the wallet (record who signed for it last, the operation hash, how much, and to whom it's going).
// Confirmation still needed for a transaction.
// TODO: document
// METHODS // constructor - just pass on the owner array to the multiowned and // the limit to daylimit
// kills the contract sending everything to `_to`.
// Outside-visible transact entry point. Executes transaction immediately if below daily spend limit. // If not, goes into multisig process. We provide a hash on return to allow the sender to provide // shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value // and _data arguments). They still get the option of using them if they want, anyways.
// confirm a transaction through just the hash. we use the previous transactions map, m_txs, in order // to determine the body of the transaction from the hash provided.
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
// Indicates when an address has withdrawn their supply of tokens
// Indicates when an address has withdrawn their supply of extra wei
// Logs when owner has pulled eth
// Generic Notice message that includes and address and number
// Indicates when an error has occurred in the execution of a function
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/eth at that time, /// 3 is address token purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _token Token being sold
/// @dev function to check if the crowdsale is currently active /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if the crowdsale has ended /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if a purchase is valid /// @param self Stored crowdsale from crowdsale contract /// @return true if the transaction can buy tokens
/// @dev Function called by purchasers to pull tokens /// @param self Stored crowdsale from crowdsale contract /// @return true if tokens were withdrawn
/// @dev Function called by purchasers to pull leftover wei from their purchases /// @param self Stored crowdsale from crowdsale contract /// @return true if wei was withdrawn
/// @dev send ether from the completed crowdsale to the owners wallet address /// @param self Stored crowdsale from crowdsale contract /// @return true if owner withdrew eth
/// @dev Function to change the price of the token /// @param self Stored crowdsale from crowdsale contract /// @param _tokensPerEth new token price (amount of tokens per ether) /// @return true if the token price changed successfully
/// @dev function to set tokens for the sale /// @param self Stored Crowdsale from crowdsale contract /// @return true if tokens set successfully
/// @dev Gets the price and buy cap for individual addresses at the given milestone index /// @param self Stored Crowdsale from crowdsale contract /// @param timestamp Time during sale for which data is requested /// @return A 3-element array with 0 the timestamp, 1 the price in cents, 2 the address cap
/// @dev Gets the number of tokens sold thus far /// @param self Stored Crowdsale from crowdsale contract /// @return Number of tokens sold
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/ETH at that time, /// 3 is address purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _token Token being sold
/// @dev Called when an address wants to purchase tokens /// @param self Stored crowdsale from crowdsale contract /// @param _amount amount of wei that the buyer is sending /// @return true on succesful purchase
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
// Indicates when an address has withdrawn their supply of tokens
// Indicates when an address has withdrawn their supply of extra wei
// Logs when owner has pulled eth
// Generic Notice message that includes and address and number
// Indicates when an error has occurred in the execution of a function
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/eth at that time, /// 3 is address token purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _token Token being sold
/// @dev function to check if the crowdsale is currently active /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if the crowdsale has ended /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if a purchase is valid /// @param self Stored crowdsale from crowdsale contract /// @return true if the transaction can buy tokens
/// @dev Function called by purchasers to pull tokens /// @param self Stored crowdsale from crowdsale contract /// @return true if tokens were withdrawn
/// @dev Function called by purchasers to pull leftover wei from their purchases /// @param self Stored crowdsale from crowdsale contract /// @return true if wei was withdrawn
/// @dev send ether from the completed crowdsale to the owners wallet address /// @param self Stored crowdsale from crowdsale contract /// @return true if owner withdrew eth
/// @dev Function to change the price of the token /// @param self Stored crowdsale from crowdsale contract /// @param _tokensPerEth new token price (amount of tokens per ether) /// @return true if the token price changed successfully
/// @dev function to set tokens for the sale /// @param self Stored Crowdsale from crowdsale contract /// @return true if tokens set successfully
/// @dev Gets the price and buy cap for individual addresses at the given milestone index /// @param self Stored Crowdsale from crowdsale contract /// @param timestamp Time during sale for which data is requested /// @return A 3-element array with 0 the timestamp, 1 the price in cents, 2 the address cap
/// @dev Gets the number of tokens sold thus far /// @param self Stored Crowdsale from crowdsale contract /// @return Number of tokens sold
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/ETH at that time, /// 3 is address purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _token Token being sold
/// @dev Called when an address wants to purchase tokens /// @param self Stored crowdsale from crowdsale contract /// @param _amount amount of wei that the buyer is sending /// @return true on succesful purchase
// fallback function can be used to buy tokens
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _capAmountInCents Total to be raised in cents /// @param _startTime Timestamp of sale start time /// @param _endTime Timestamp of sale end time /// @param _tokenPricePoints Array of each price point during sale cents/token /// @param _fallbackExchangeRate Exchange rate of cents/ETH /// @param _changeInterval The number of seconds between each step /// @param _percentBurn Percentage of extra tokens to burn /// @param _token Token being sold
/// @dev Called when an address wants to purchase tokens /// @param self Stored crowdsale from crowdsale contract /// @param _amount amound of wei that the buyer is sending /// @return true on succesful purchase
// Logs when a user is registered in the system before the sale
// Logs when a user is unregistered from the system before the sale
// Logs when there is an error with user registration
// Logs when there is an increase in the contribution cap per address
// Logs when the address cap is initially calculated
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/ETH at that time, /// 3 is address purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _staticCap Whether or not the address cap is going to be static /// @param _token Token being sold
/// @dev register user function. can only be called by the owner when a user registers on the web app. /// puts their address in the registered mapping and increments the numRegistered /// @param self Stored crowdsale from crowdsale contract /// @param _registrant address to be registered for the sale
/// @dev registers multiple users at the same time /// @param self Stored crowdsale from crowdsale contract /// @param _registrants addresses to register for the sale
/// @dev Cancels a user's registration status can only be called by the owner when a user cancels their registration. /// sets their address field in the registered mapping to false and decrements the numRegistered /// @param self Stored crowdsale from crowdsale contract
/// @dev unregisters multiple users at the same time /// @param self Stored crowdsale from crowdsale contract /// @param _registrants addresses to unregister for the sale
/// @dev function that calculates address cap from the number of users registered /// @param self Stored crowdsale from crowdsale contract
/// @dev utility function for the receivePurchase function. returns the lower number /// @param a first argument /// @param b second argument
/// @dev Called when an address wants to purchase tokens /// @param self Stored crowdsale from crowdsale contract /// @param _amount amound of wei that the buyer is sending /// @return true on succesful purchase
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
// Indicates when an address has withdrawn their supply of tokens
// Indicates when an address has withdrawn their supply of extra wei
// Logs when owner has pulled eth
// Generic Notice message that includes and address and number
// Indicates when an error has occurred in the execution of a function
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/eth at that time, /// 3 is address token purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _token Token being sold
/// @dev function to check if the crowdsale is currently active /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if the crowdsale has ended /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if a purchase is valid /// @param self Stored crowdsale from crowdsale contract /// @return true if the transaction can buy tokens
/// @dev Function called by purchasers to pull tokens /// @param self Stored crowdsale from crowdsale contract /// @return true if tokens were withdrawn
/// @dev Function called by purchasers to pull leftover wei from their purchases /// @param self Stored crowdsale from crowdsale contract /// @return true if wei was withdrawn
/// @dev send ether from the completed crowdsale to the owners wallet address /// @param self Stored crowdsale from crowdsale contract /// @return true if owner withdrew eth
/// @dev Function to change the price of the token /// @param self Stored crowdsale from crowdsale contract /// @param _tokensPerEth new token price (amount of tokens per ether) /// @return true if the token price changed successfully
/// @dev function to set tokens for the sale /// @param self Stored Crowdsale from crowdsale contract /// @return true if tokens set successfully
/// @dev Gets the price and buy cap for individual addresses at the given milestone index /// @param self Stored Crowdsale from crowdsale contract /// @param timestamp Time during sale for which data is requested /// @return A 3-element array with 0 the timestamp, 1 the price in cents, 2 the address cap
/// @dev Gets the number of tokens sold thus far /// @param self Stored Crowdsale from crowdsale contract /// @return Number of tokens sold
// Logs when a user is registered in the system before the sale
// Logs when a user is unregistered from the system before the sale
// Logs when there is an error with user registration
// Logs when there is an increase in the contribution cap per address
// Logs when the address cap is initially calculated
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/ETH at that time, /// 3 is address purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _staticCap Whether or not the address cap is going to be static /// @param _token Token being sold
/// @dev register user function. can only be called by the owner when a user registers on the web app. /// puts their address in the registered mapping and increments the numRegistered /// @param self Stored crowdsale from crowdsale contract /// @param _registrant address to be registered for the sale
/// @dev registers multiple users at the same time /// @param self Stored crowdsale from crowdsale contract /// @param _registrants addresses to register for the sale
/// @dev Cancels a user's registration status can only be called by the owner when a user cancels their registration. /// sets their address field in the registered mapping to false and decrements the numRegistered /// @param self Stored crowdsale from crowdsale contract
/// @dev unregisters multiple users at the same time /// @param self Stored crowdsale from crowdsale contract /// @param _registrants addresses to unregister for the sale
/// @dev function that calculates address cap from the number of users registered /// @param self Stored crowdsale from crowdsale contract
/// @dev utility function for the receivePurchase function. returns the lower number /// @param a first argument /// @param b second argument
/// @dev Called when an address wants to purchase tokens /// @param self Stored crowdsale from crowdsale contract /// @param _amount amound of wei that the buyer is sending /// @return true on succesful purchase
// fallback function can be used to buy tokens
// fallback function can be used to buy tokens
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
// Indicates when tokens are bought during the sale
// Logs when a buyer has exceeded the address cap and tells them to withdraw their leftover wei
// Logs when a user is registered in the system before the sale
// Logs when a user is unregistered from the system before the sale
// Logs when there is an error
// Logs when there is an increase in the contribution cap per address
// Logs when the address cap is initially calculated
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _capAmountInCents Total to be raised in cents /// @param _startTime Timestamp of sale start time /// @param _endTime Timestamp of sale end time /// @param _fallbackExchangeRate Exchange rate of cents/ETH /// @param _changeInterval The number of seconds between each step /// @param _percentBurn Percentage of extra tokens to burn /// @param _capPercentMultiplier percent of the address cap that we multiply to increase every time interval /// @param _fallbackAddressCap cap of wei allowed for each address to spend /// @param _token Token being sold
/// @dev register user function. can only be called by the owner when a user registers on the web app. /// puts their address in the registered mapping and increments the numRegistered /// @param self Stored crowdsale from crowdsale contract /// @param _registrant address to be registered for the sale
/// @dev registers multiple users at the same time /// @param self Stored crowdsale from crowdsale contract /// @param _registrants addresses to register for the sale
/// @dev Cancels a user's registration status can only be called by the owner when a user cancels their registration. /// sets their address field in the registered mapping to false and decrements the numRegistered /// @param self Stored crowdsale from crowdsale contract
/// @dev unregisters multiple users at the same time /// @param self Stored crowdsale from crowdsale contract /// @param _registrants addresses to unregister for the sale
/// @dev function that calculates address cap from the number of users registered /// @param self Stored crowdsale from crowdsale contract
/// @dev utility function for the receivePurchase function. returns the lower number /// @param a first argument /// @param b second argument
/// @dev Called when an address wants to purchase tokens /// @param self Stored crowdsale from crowdsale contract /// @param _amount amound of wei that the buyer is sending /// @return true on succesful purchase
// Indicates when a bidder submits a bid to the crowdsale
// Indicates when a bidder manually withdraws their bid from the crowdsale
// Indicates when a bid is removed by the automated bid removal process
// Generic Error Msg Event
// Indicates when the price of the token changes
// Logs the current bucket that the valuation points to, the total valuation of // the sale, and the amount of ETH committed, including total bids that will eventually get partial purchases
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item arrays such that, in each 3 element /// array index-0 is a timestamp, index-1 is price in tokens/ETH /// index-2 is address purchase cap at that time, 0 if no address cap /// @param _priceBonusPercent the bonus amount for early bidders /// @param _minimumRaise minimim amount that the sale needs to make to be successfull /// @param _endWithdrawalTime timestamp that indicates that manual withdrawals are no longer allowed /// @param _endTime Timestamp of sale end time /// @param _percentBeingSold percentage of total tokens being sold in the sale /// @param _tokenName name of the token being sold. ex: "Jason Network Token" /// @param _tokenSymbol symbol of the token. ex: "JNT" /// @param _tokenDecimals number of decimals in the token /// @param _allowMinting whether or not to allow minting of the token after the sale
/// @dev calculates the number of digits in a given number /// @param _number the number for which we're caluclating digits /// @return _digits the number of digits in _number
/// @dev calculates the number of tokens purchased based on the amount of wei ///      spent and the price of tokens /// @param _amount amound of wei that the buyer sent /// @param _price price of tokens in the sale, in tokens/ETH /// @return uint256 numTokens the number of tokens purchased /// @return remainder  any remaining wei leftover from integer division
/// @dev Called when an address wants to submit a bid to the sale /// @param self Stored crowdsale from crowdsale contract /// @return currentBonus percentage of the bonus that is applied for the purchase
/// @dev Called when an address wants to submit bid to the sale /// @param self Stored crowdsale from crowdsale contract /// @param _amount amound of wei that the buyer is sending /// @param _personalCap the total crowdsale valuation (wei) that the bidder is comfortable with /// @param _valuePredict prediction of where the valuation will go in the linked list. saves on searching time /// @return true on succesful bid
/// @dev Called when an address wants to manually withdraw their bid from the ///      sale. puts their wei in the LeftoverWei mapping /// @param self Stored crowdsale from crowdsale contract /// @return true on succesful
/// @dev This should be called once the sale is over to commit all bids into ///      the owner's bucket. /// @param self stored crowdsale from crowdsale contract
/// @dev Mints the token being sold by taking the percentage of the token supply ///      being sold in this sale along with the valuation, derives all necessary ///      values and then transfers owner tokens to the owner. /// @param self Stored crowdsale from crowdsale contract
/// @dev returns a boolean indicating if the sale is canceled. ///      This can either be if the minimum raise hasn't been met ///      or if it is 30 days after the sale and the owner hasn't finalized the sale. /// @return bool canceled indicating if the sale is canceled or not
/// @dev If the address' personal cap is below the pointer, refund them all their ETH. ///      if it is above the pointer, calculate tokens purchased and refund leftoever ETH /// @param self Stored crowdsale from crowdsale contract /// @return bool success if the contract runs successfully
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
// Indicates when an address has withdrawn their supply of tokens
// Indicates when an address has withdrawn their supply of extra wei
// Logs when owner has pulled eth
// Generic Notice message that includes and address and number
// Indicates when an error has occurred in the execution of a function
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item sets such that, in each 3 element /// set, 1 is timestamp, 2 is price in tokens/eth at that time, /// 3 is address token purchase cap at that time, 0 if no address cap /// @param _endTime Timestamp of sale end time /// @param _percentBurn Percentage of extra tokens to burn /// @param _token Token being sold
/// @dev function to check if the crowdsale is currently active /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if the crowdsale has ended /// @param self Stored crowdsale from crowdsale contract /// @return success
/// @dev function to check if a purchase is valid /// @param self Stored crowdsale from crowdsale contract /// @return true if the transaction can buy tokens
/// @dev Function called by purchasers to pull tokens /// @param self Stored crowdsale from crowdsale contract /// @return true if tokens were withdrawn
/// @dev Function called by purchasers to pull leftover wei from their purchases /// @param self Stored crowdsale from crowdsale contract /// @return true if wei was withdrawn
/// @dev send ether from the completed crowdsale to the owners wallet address /// @param self Stored crowdsale from crowdsale contract /// @return true if owner withdrew eth
/// @dev Function to change the price of the token /// @param self Stored crowdsale from crowdsale contract /// @param _tokensPerEth new token price (amount of tokens per ether) /// @return true if the token price changed successfully
/// @dev function to set tokens for the sale /// @param self Stored Crowdsale from crowdsale contract /// @return true if tokens set successfully
/// @dev Gets the price and buy cap for individual addresses at the given milestone index /// @param self Stored Crowdsale from crowdsale contract /// @param timestamp Time during sale for which data is requested /// @return A 3-element array with 0 the timestamp, 1 the price in cents, 2 the address cap
/// @dev Gets the number of tokens sold thus far /// @param self Stored Crowdsale from crowdsale contract /// @return Number of tokens sold
// Indicates when a bidder submits a bid to the crowdsale
// Indicates when a bidder manually withdraws their bid from the crowdsale
// Indicates when a bid is removed by the automated bid removal process
// Generic Error Msg Event
// Indicates when the price of the token changes
// Logs the current bucket that the valuation points to, the total valuation of // the sale, and the amount of ETH committed, including total bids that will eventually get partial purchases
/// @dev Called by a crowdsale contract upon creation. /// @param self Stored crowdsale from crowdsale contract /// @param _owner Address of crowdsale owner /// @param _saleData Array of 3 item arrays such that, in each 3 element /// array index-0 is a timestamp, index-1 is price in tokens/ETH /// index-2 is address purchase cap at that time, 0 if no address cap /// @param _priceBonusPercent the bonus amount for early bidders /// @param _minimumRaise minimim amount that the sale needs to make to be successfull /// @param _endWithdrawalTime timestamp that indicates that manual withdrawals are no longer allowed /// @param _endTime Timestamp of sale end time /// @param _percentBeingSold percentage of total tokens being sold in the sale /// @param _tokenName name of the token being sold. ex: "Jason Network Token" /// @param _tokenSymbol symbol of the token. ex: "JNT" /// @param _tokenDecimals number of decimals in the token /// @param _allowMinting whether or not to allow minting of the token after the sale
/// @dev calculates the number of digits in a given number /// @param _number the number for which we're caluclating digits /// @return _digits the number of digits in _number
/// @dev calculates the number of tokens purchased based on the amount of wei ///      spent and the price of tokens /// @param _amount amound of wei that the buyer sent /// @param _price price of tokens in the sale, in tokens/ETH /// @return uint256 numTokens the number of tokens purchased /// @return remainder  any remaining wei leftover from integer division
/// @dev Called when an address wants to submit a bid to the sale /// @param self Stored crowdsale from crowdsale contract /// @return currentBonus percentage of the bonus that is applied for the purchase
/// @dev Called when an address wants to submit bid to the sale /// @param self Stored crowdsale from crowdsale contract /// @param _amount amound of wei that the buyer is sending /// @param _personalCap the total crowdsale valuation (wei) that the bidder is comfortable with /// @param _valuePredict prediction of where the valuation will go in the linked list. saves on searching time /// @return true on succesful bid
/// @dev Called when an address wants to manually withdraw their bid from the ///      sale. puts their wei in the LeftoverWei mapping /// @param self Stored crowdsale from crowdsale contract /// @return true on succesful
/// @dev This should be called once the sale is over to commit all bids into ///      the owner's bucket. /// @param self stored crowdsale from crowdsale contract
/// @dev Mints the token being sold by taking the percentage of the token supply ///      being sold in this sale along with the valuation, derives all necessary ///      values and then transfers owner tokens to the owner. /// @param self Stored crowdsale from crowdsale contract
/// @dev returns a boolean indicating if the sale is canceled. ///      This can either be if the minimum raise hasn't been met ///      or if it is 30 days after the sale and the owner hasn't finalized the sale. /// @return bool canceled indicating if the sale is canceled or not
/// @dev If the address' personal cap is below the pointer, refund them all their ETH. ///      if it is above the pointer, calculate tokens purchased and refund leftoever ETH /// @param self Stored crowdsale from crowdsale contract /// @return bool success if the contract runs successfully
/// @dev returns true if the list exists /// @param self stored linked list from contract
/// @dev returns true if the node exists /// @param self stored linked list from contract /// @param _node a node to search for
/// @dev Returns the number of elements in the list /// @param self stored linked list from contract
/// @dev Returns the links of a node as a tuple /// @param self stored linked list from contract /// @param _node id of the node to get
/// @dev Returns the link of a node `_node` in direction `_direction`. /// @param self stored linked list from contract /// @param _node id of the node to step from /// @param _direction direction to step in
/// @dev Can be used before `insert` to build an ordered list /// @param self stored linked list from contract /// @param _node an existing node to search from, e.g. HEAD. /// @param _value value to seek /// @param _direction direction to seek in //  @return next first node beyond '_node' in direction `_direction`
/// @dev Creates a bidirectional link between two nodes on direction `_direction` /// @param self stored linked list from contract /// @param _node first node for linking /// @param _link  node to link to in the _direction
/// @dev Insert node `_new` beside existing node `_node` in direction `_direction`. /// @param self stored linked list from contract /// @param _node existing node /// @param _new  new node to insert /// @param _direction direction to insert node in
/// @dev removes an entry from the linked list /// @param self stored linked list from contract /// @param _node node to remove from the list
/// @dev pushes an enrty to the head of the linked list /// @param self stored linked list from contract /// @param _node new entry to push to the head /// @param _direction push to the head (NEXT) or tail (PREV)
/// @dev pops the first entry from the linked list /// @param self stored linked list from contract /// @param _direction pop from the head (NEXT) or the tail (PREV)
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
/// @dev returns true if the list exists /// @param self stored linked list from contract
/// @dev returns true if the node exists /// @param self stored linked list from contract /// @param _node a node to search for
/// @dev Returns the number of elements in the list /// @param self stored linked list from contract
/// @dev Returns the links of a node as a tuple /// @param self stored linked list from contract /// @param _node id of the node to get
/// @dev Returns the link of a node `_node` in direction `_direction`. /// @param self stored linked list from contract /// @param _node id of the node to step from /// @param _direction direction to step in
/// @dev Can be used before `insert` to build an ordered list /// @param self stored linked list from contract /// @param _node an existing node to search from, e.g. HEAD. /// @param _value value to seek /// @param _direction direction to seek in //  @return next first node beyond '_node' in direction `_direction`
/// @dev Creates a bidirectional link between two nodes on direction `_direction` /// @param self stored linked list from contract /// @param _node first node for linking /// @param _link  node to link to in the _direction
/// @dev Insert node `_new` beside existing node `_node` in direction `_direction`. /// @param self stored linked list from contract /// @param _node existing node /// @param _new  new node to insert /// @param _direction direction to insert node in
/// @dev removes an entry from the linked list /// @param self stored linked list from contract /// @param _node node to remove from the list
/// @dev pushes an entry to the head of the linked list /// @param self stored linked list from contract /// @param _node new entry to push to the head /// @param _direction push to the head (NEXT) or tail (PREV)
/// @dev pops the first entry from the linked list /// @param self stored linked list from contract /// @param _direction pop from the head (NEXT) or the tail (PREV)
/// @dev returns true if the list exists /// @param self stored linked list from contract
/// @dev returns true if the node exists /// @param self stored linked list from contract /// @param _node a node to search for
/// @dev Returns the number of elements in the list /// @param self stored linked list from contract
/// @dev Returns the links of a node as a tuple /// @param self stored linked list from contract /// @param _node id of the node to get
/// @dev Returns the link of a node `_node` in direction `_direction`. /// @param self stored linked list from contract /// @param _node id of the node to step from /// @param _direction direction to step in
/// @dev Can be used before `insert` to build an ordered list /// @param self stored linked list from contract /// @param _node an existing node to search from, e.g. HEAD. /// @param _value value to seek /// @param _direction direction to seek in //  @return next first node beyond '_node' in direction `_direction`
/// @dev Creates a bidirectional link between two nodes on direction `_direction` /// @param self stored linked list from contract /// @param _node first node for linking /// @param _link  node to link to in the _direction
/// @dev Insert node `_new` beside existing node `_node` in direction `_direction`. /// @param self stored linked list from contract /// @param _node existing node /// @param _new  new node to insert /// @param _direction direction to insert node in
/// @dev removes an entry from the linked list /// @param self stored linked list from contract /// @param _node node to remove from the list
/// @dev pushes an enrty to the head of the linked list /// @param self stored linked list from contract /// @param _node new entry to push to the head /// @param _direction push to the head (NEXT) or tail (PREV)
/// @dev pops the first entry from the linked list /// @param self stored linked list from contract /// @param _direction pop from the head (NEXT) or the tail (PREV)
/// @dev checks to see if a node exists
/// @dev Returns the number of elements in the list
/// @dev Returns the links of a node as and array /// @param _node id of the node to get
/// @dev Returns the link of a node `n` in direction `d`. /// @param _node id of the node to step from /// @param _direction direction to step in
/// @dev Can be used before `insert` to build an ordered list /// @param _node an existing node to search from, e.g. HEAD. /// @param _value value to seek /// @param _direction direction to seek in //  @return next first node beyond '_node' in direction `_direction`
/// @dev Insert node `_new` beside existing node `_node` in direction `_direction`. /// @param _node existing node /// @param _new  new node to insert /// @param _direction direction to insert node in
/// @dev removes an entry from the linked list /// @param _node node to remove from the list
/// @dev pushes an enrty to the head of the linked list /// @param _node new entry to push to the head /// @param _direction push to the head (NEXT) or tail (PREV)
/// @dev pops the first entry from the linked list /// @param _direction pop from the head (NEXT) or the tail (PREV)
/* * @dev Returns a slice containing the entire string. * @param self The string to make a slice from. * @return A newly allocated slice containing the entire string. */
/* * @dev Returns the length of a null-terminated bytes32 string. * @param self The value to find the length of. * @return The length of the string, from 0 to 32. */
/* * @dev Returns a slice containing the entire bytes32, interpreted as a *      null-termintaed utf-8 string. * @param self The bytes32 value to convert to a slice. * @return A new slice containing the value of the input argument up to the *         first null. */
/* * @dev Returns a new slice containing the same data as the current slice. * @param self The slice to copy. * @return A new slice containing the same data as `self`. */
/* * @dev Copies a slice to a new string. * @param self The slice to copy. * @return A newly allocated string containing the slice's text. */
/* * @dev Returns the length in runes of the slice. Note that this operation *      takes time proportional to the length of the slice; avoid using it *      in loops, and call `slice.empty()` if you only need to know whether *      the slice is empty or not. * @param self The slice to operate on. * @return The length of the slice in runes. */
/* * @dev Returns true if the slice is empty (has a length of 0). * @param self The slice to operate on. * @return True if the slice is empty, False otherwise. */
/* * @dev Returns a positive number if `other` comes lexicographically after *      `self`, a negative number if it comes before, or zero if the *      contents of the two slices are equal. Comparison is done per-rune, *      on unicode codepoints. * @param self The first slice to compare. * @param other The second slice to compare. * @return The result of the comparison. */
/* * @dev Returns true if the two slices contain the same text. * @param self The first slice to compare. * @param self The second slice to compare. * @return True if the slices are equal, false otherwise. */
/* * @dev Extracts the first rune in the slice into `rune`, advancing the *      slice to point to the next rune and returning `rune`. * @param self The slice to operate on. * @param rune The slice that will contain the first rune. * @return `rune`. */
/* * @dev Returns the first rune in the slice, advancing the slice to point *      to the next rune. * @param self The slice to operate on. * @return A slice containing only the first rune from `self`. */
/* * @dev Returns the number of the first codepoint in the slice. * @param self The slice to operate on. * @return The number of the first codepoint in the slice. */
/* * @dev Returns the keccak-256 hash of the slice. * @param self The slice to hash. * @return The hash of the slice. */
/* * @dev Returns true if `self` starts with `needle`. * @param self The slice to operate on. * @param needle The slice to search for. * @return True if the slice starts with the provided text, false otherwise. */
/* * @dev If `self` starts with `needle`, `needle` is removed from the *      beginning of `self`. Otherwise, `self` is unmodified. * @param self The slice to operate on. * @param needle The slice to search for. * @return `self` */
/* * @dev Returns true if the slice ends with `needle`. * @param self The slice to operate on. * @param needle The slice to search for. * @return True if the slice starts with the provided text, false otherwise. */
/* * @dev If `self` ends with `needle`, `needle` is removed from the *      end of `self`. Otherwise, `self` is unmodified. * @param self The slice to operate on. * @param needle The slice to search for. * @return `self` */
// Returns the memory address of the first byte of the first occurrence of // `needle` in `self`, or the first byte after `self` if not found.
// Returns the memory address of the first byte after the last occurrence of // `needle` in `self`, or the address of `self` if not found.
/* * @dev Modifies `self` to contain everything from the first occurrence of *      `needle` to the end of the slice. `self` is set to the empty slice *      if `needle` is not found. * @param self The slice to search and modify. * @param needle The text to search for. * @return `self`. */
/* * @dev Modifies `self` to contain the part of the string from the start of *      `self` to the end of the first occurrence of `needle`. If `needle` *      is not found, `self` is set to the empty slice. * @param self The slice to search and modify. * @param needle The text to search for. * @return `self`. */
/* * @dev Splits the slice, setting `self` to everything after the first *      occurrence of `needle`, and `token` to everything before it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and `token` is set to the entirety of `self`. * @param self The slice to split. * @param needle The text to search for in `self`. * @param token An output parameter to which the first token is written. * @return `token`. */
/* * @dev Splits the slice, setting `self` to everything after the first *      occurrence of `needle`, and returning everything before it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and the entirety of `self` is returned. * @param self The slice to split. * @param needle The text to search for in `self`. * @return The part of `self` up to the first occurrence of `delim`. */
/* * @dev Splits the slice, setting `self` to everything before the last *      occurrence of `needle`, and `token` to everything after it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and `token` is set to the entirety of `self`. * @param self The slice to split. * @param needle The text to search for in `self`. * @param token An output parameter to which the first token is written. * @return `token`. */
/* * @dev Splits the slice, setting `self` to everything before the last *      occurrence of `needle`, and returning everything after it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and the entirety of `self` is returned. * @param self The slice to split. * @param needle The text to search for in `self`. * @return The part of `self` after the last occurrence of `delim`. */
/* * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`. * @param self The slice to search. * @param needle The text to search for in `self`. * @return The number of occurrences of `needle` found in `self`. */
/* * @dev Returns True if `self` contains `needle`. * @param self The slice to search. * @param needle The text to search for in `self`. * @return True if `needle` is found in `self`, false otherwise. */
/* * @dev Returns a newly allocated string containing the concatenation of *      `self` and `other`. * @param self The first slice to concatenate. * @param other The second slice to concatenate. * @return The concatenation of the two strings. */
/* * @dev Joins an array of slices, using `self` as a delimiter, returning a *      newly allocated string. * @param self The delimiter to use. * @param parts A list of slices to join. * @return A newly allocated string containing all the slices in `parts`, *         joined with `self`. */
/* * @dev Returns a slice containing the entire string. * @param self The string to make a slice from. * @return A newly allocated slice containing the entire string. */
/* * @dev Returns the length of a null-terminated bytes32 string. * @param self The value to find the length of. * @return The length of the string, from 0 to 32. */
/* * @dev Returns a slice containing the entire bytes32, interpreted as a *      null-termintaed utf-8 string. * @param self The bytes32 value to convert to a slice. * @return A new slice containing the value of the input argument up to the *         first null. */
/* * @dev Returns a new slice containing the same data as the current slice. * @param self The slice to copy. * @return A new slice containing the same data as `self`. */
/* * @dev Copies a slice to a new string. * @param self The slice to copy. * @return A newly allocated string containing the slice's text. */
/* * @dev Returns the length in runes of the slice. Note that this operation *      takes time proportional to the length of the slice; avoid using it *      in loops, and call `slice.empty()` if you only need to know whether *      the slice is empty or not. * @param self The slice to operate on. * @return The length of the slice in runes. */
/* * @dev Returns true if the slice is empty (has a length of 0). * @param self The slice to operate on. * @return True if the slice is empty, False otherwise. */
/* * @dev Returns a positive number if `other` comes lexicographically after *      `self`, a negative number if it comes before, or zero if the *      contents of the two slices are equal. Comparison is done per-rune, *      on unicode codepoints. * @param self The first slice to compare. * @param other The second slice to compare. * @return The result of the comparison. */
/* * @dev Returns true if the two slices contain the same text. * @param self The first slice to compare. * @param self The second slice to compare. * @return True if the slices are equal, false otherwise. */
/* * @dev Extracts the first rune in the slice into `rune`, advancing the *      slice to point to the next rune and returning `rune`. * @param self The slice to operate on. * @param rune The slice that will contain the first rune. * @return `rune`. */
/* * @dev Returns the first rune in the slice, advancing the slice to point *      to the next rune. * @param self The slice to operate on. * @return A slice containing only the first rune from `self`. */
/* * @dev Returns the number of the first codepoint in the slice. * @param self The slice to operate on. * @return The number of the first codepoint in the slice. */
/* * @dev Returns the keccak-256 hash of the slice. * @param self The slice to hash. * @return The hash of the slice. */
/* * @dev Returns true if `self` starts with `needle`. * @param self The slice to operate on. * @param needle The slice to search for. * @return True if the slice starts with the provided text, false otherwise. */
/* * @dev If `self` starts with `needle`, `needle` is removed from the *      beginning of `self`. Otherwise, `self` is unmodified. * @param self The slice to operate on. * @param needle The slice to search for. * @return `self` */
/* * @dev Returns true if the slice ends with `needle`. * @param self The slice to operate on. * @param needle The slice to search for. * @return True if the slice starts with the provided text, false otherwise. */
/* * @dev If `self` ends with `needle`, `needle` is removed from the *      end of `self`. Otherwise, `self` is unmodified. * @param self The slice to operate on. * @param needle The slice to search for. * @return `self` */
// Returns the memory address of the first byte of the first occurrence of // `needle` in `self`, or the first byte after `self` if not found.
// Returns the memory address of the first byte after the last occurrence of // `needle` in `self`, or the address of `self` if not found.
/* * @dev Modifies `self` to contain everything from the first occurrence of *      `needle` to the end of the slice. `self` is set to the empty slice *      if `needle` is not found. * @param self The slice to search and modify. * @param needle The text to search for. * @return `self`. */
/* * @dev Modifies `self` to contain the part of the string from the start of *      `self` to the end of the first occurrence of `needle`. If `needle` *      is not found, `self` is set to the empty slice. * @param self The slice to search and modify. * @param needle The text to search for. * @return `self`. */
/* * @dev Splits the slice, setting `self` to everything after the first *      occurrence of `needle`, and `token` to everything before it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and `token` is set to the entirety of `self`. * @param self The slice to split. * @param needle The text to search for in `self`. * @param token An output parameter to which the first token is written. * @return `token`. */
/* * @dev Splits the slice, setting `self` to everything after the first *      occurrence of `needle`, and returning everything before it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and the entirety of `self` is returned. * @param self The slice to split. * @param needle The text to search for in `self`. * @return The part of `self` up to the first occurrence of `delim`. */
/* * @dev Splits the slice, setting `self` to everything before the last *      occurrence of `needle`, and `token` to everything after it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and `token` is set to the entirety of `self`. * @param self The slice to split. * @param needle The text to search for in `self`. * @param token An output parameter to which the first token is written. * @return `token`. */
/* * @dev Splits the slice, setting `self` to everything before the last *      occurrence of `needle`, and returning everything after it. If *      `needle` does not occur in `self`, `self` is set to the empty slice, *      and the entirety of `self` is returned. * @param self The slice to split. * @param needle The text to search for in `self`. * @return The part of `self` after the last occurrence of `delim`. */
/* * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`. * @param self The slice to search. * @param needle The text to search for in `self`. * @return The number of occurrences of `needle` found in `self`. */
/* * @dev Returns True if `self` contains `needle`. * @param self The slice to search. * @param needle The text to search for in `self`. * @return True if `needle` is found in `self`, false otherwise. */
/* * @dev Returns a newly allocated string containing the concatenation of *      `self` and `other`. * @param self The first slice to concatenate. * @param other The second slice to concatenate. * @return The concatenation of the two strings. */
/* * @dev Joins an array of slices, using `self` as a delimiter, returning a *      newly allocated string. * @param self The delimiter to use. * @param parts A list of slices to join. * @return A newly allocated string containing all the slices in `parts`, *         joined with `self`. */
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
// Generic Error message, error code and string
// Logs when a user is registered in the system for vesting
// Logs when a user is unregistered from the system
// Logs when a user replaces themselves with a different beneficiary
// Logs when a user withdraws their ETH from vesting
// Logs when a user withdraws their tokens from the contract
/// @dev Called by the token vesting contract upon creation. /// @param self Stored token from token contract /// @param _owner the owner of the vesting contract /// @param _isToken indicates if the vesting is for tokens or ETH /// @param _startTime the start time of the vesting (UNIX timestamp) /// @param _endTime the end time of the vesting     (UNIX timestamp) /// @param _numReleases number of times during vesting that the contract releases coins
/// @dev function owner has to call before the vesting starts to initialize the ETH balance of the contract. /// @param self Stored vesting from vesting contract /// @param _balance the balance that is being vested.  msg.value from the contract call.
/// @dev function owner has to call before the vesting starts to initialize the token balance of the contract. /// @param self Stored vesting from vesting contract /// @param _balance the balance that is being vested.  owner has to have sent tokens to the contract before calling this function
/// @dev register user function, can only be called by the owner. registers amount /// of vesting into the address and reduces contractBalance /// @param self Stored vesting from vesting contract /// @param _registrant address to be registered for the vesting /// @param _vestAmount amount of ETH or tokens to vest for address /// @param _bonus amount of bonus tokens or eth if no withdrawal prior to endTime
/// @dev registers multiple users at the same time. each registrant must be /// receiving the same amount of tokens or ETH /// @param self Stored vesting from vesting contract /// @param _registrants addresses to register for the vesting /// @param _vestAmount amount of ETH or tokens to vest /// @param _bonus amount of ETH or token bonus
/// @dev Cancels a user's registration status can only be called by the owner /// when a user cancels their registration. sets their address field in the /// holding amount mapping to 0, decrements the numRegistered, and adds amount /// back into contractBalance /// @param self Stored vesting from vesting contract
/// @dev unregisters multiple users at the same time /// @param self Stored vesting from vesting contract /// @param _registrants addresses to unregister for the vesting
/// @dev allows a participant to replace themselves in the vesting schedule with a new address /// @param self Stored vesting from vesting contract /// @param _replacementRegistrant new address to replace the caller with
/// @dev calculates the number of tokens or ETH available for the beneficiary to withdraw /// @param self Stored vesting from vesting contract /// @param _beneficiary the sender, who will be withdrawing their balance
/// @dev allows participants to withdraw their vested ETH /// @param self Stored vesting from vesting contract
/// @dev allows participants to withdraw their vested tokens /// @param self Stored vesting from vesting contract /// @param token the token contract that is being withdrawn
/// @dev allows the owner to send vested ETH to participants /// @param self Stored vesting from vesting contract /// @param _beneficiary registered address to send the ETH to
/// @dev allows the owner to send vested tokens to participants /// @param self Stored vesting from vesting contract /// @param token the token contract that is being withdrawn /// @param _beneficiary registered address to send the tokens to
/// @dev Allows the owner to withdraw any ETH left in the contractBalance /// @param self Stored vesting from vesting contract
/// @dev Allows the owner to withdraw any tokens left in the contractBalance /// @param self Stored vesting from vesting contract
/// @dev Returns the percentage of the vesting that has been released at the current moment
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
// Generic Error message, error code and string
// Logs when a user is registered in the system for vesting
// Logs when a user is unregistered from the system
// Logs when a user replaces themselves with a different beneficiary
// Logs when a user withdraws their ETH from vesting
// Logs when a user withdraws their tokens from the contract
/// @dev Called by the token vesting contract upon creation. /// @param self Stored token from token contract /// @param _owner the owner of the vesting contract /// @param _isToken indicates if the vesting is for tokens or ETH /// @param _startTime the start time of the vesting (UNIX timestamp) /// @param _endTime the end time of the vesting     (UNIX timestamp) /// @param _numReleases number of times during vesting that the contract releases coins
/// @dev function owner has to call before the vesting starts to initialize the ETH balance of the contract. /// @param self Stored vesting from vesting contract /// @param _balance the balance that is being vested.  msg.value from the contract call.
/// @dev function owner has to call before the vesting starts to initialize the token balance of the contract. /// @param self Stored vesting from vesting contract /// @param _balance the balance that is being vested.  owner has to have sent tokens to the contract before calling this function
/// @dev register user function, can only be called by the owner. registers amount /// of vesting into the address and reduces contractBalance /// @param self Stored vesting from vesting contract /// @param _registrant address to be registered for the vesting /// @param _vestAmount amount of ETH or tokens to vest for address /// @param _bonus amount of bonus tokens or eth if no withdrawal prior to endTime
/// @dev registers multiple users at the same time. each registrant must be /// receiving the same amount of tokens or ETH /// @param self Stored vesting from vesting contract /// @param _registrants addresses to register for the vesting /// @param _vestAmount amount of ETH or tokens to vest /// @param _bonus amount of ETH or token bonus
/// @dev Cancels a user's registration status can only be called by the owner /// when a user cancels their registration. sets their address field in the /// holding amount mapping to 0, decrements the numRegistered, and adds amount /// back into contractBalance /// @param self Stored vesting from vesting contract
/// @dev unregisters multiple users at the same time /// @param self Stored vesting from vesting contract /// @param _registrants addresses to unregister for the vesting
/// @dev allows a participant to replace themselves in the vesting schedule with a new address /// @param self Stored vesting from vesting contract /// @param _replacementRegistrant new address to replace the caller with
/// @dev calculates the number of tokens or ETH available for the beneficiary to withdraw /// @param self Stored vesting from vesting contract /// @param _beneficiary the sender, who will be withdrawing their balance
/// @dev allows participants to withdraw their vested ETH /// @param self Stored vesting from vesting contract
/// @dev allows participants to withdraw their vested tokens /// @param self Stored vesting from vesting contract /// @param token the token contract that is being withdrawn
/// @dev allows the owner to send vested ETH to participants /// @param self Stored vesting from vesting contract /// @param _beneficiary registered address to send the ETH to
/// @dev allows the owner to send vested tokens to participants /// @param self Stored vesting from vesting contract /// @param token the token contract that is being withdrawn /// @param _beneficiary registered address to send the tokens to
/// @dev Allows the owner to withdraw any ETH left in the contractBalance /// @param self Stored vesting from vesting contract
/// @dev Allows the owner to withdraw any tokens left in the contractBalance /// @param self Stored vesting from vesting contract
/// @dev Returns the percentage of the vesting that has been released at the current moment
// Generic Error message, error code and string
// Logs when a user is registered in the system for vesting
// Logs when a user is unregistered from the system
// Logs when a user replaces themselves with a different beneficiary
// Logs when a user withdraws their ETH from vesting
// Generic Error message, error code and string
// Logs when a user is registered in the system for vesting
// Logs when a user is unregistered from the system
// Logs when a user replaces themselves with a different beneficiary
// Logs when a user withdraws their tokens from the contract
/// @dev Validates arguments for changeOwner function /// @param _from Index of current owner removing /// @param _to Index of new potential owner, should be 0 /// @return Returns true if check passes, false otherwise
/// @dev Validates arguments for addOwner function /// @param _index Index of new owner, should be 0 /// @param _length Current length of owner array /// @return Returns true if check passes, false otherwise
/// @dev Validates arguments for removeOwner function /// @param _index Index of owner removing /// @param _length Current number of owners /// @param _min Minimum owners currently required to meet sig requirements /// @return Returs true if check passes, false otherwise
/// @dev Validates arguments for changing any of the sig requirement parameters /// @param _newRequired The new sig requirement /// @param _length Current number of owners /// @return Returns true if checks pass, false otherwise
/// @dev Used later to calculate the number of confirmations needed for tx /// @param _required Number of sigs required /// @param _count Current number of sigs
/// @dev Changes owner address to a new address /// @param self Wallet in contract storage /// @param _from Current owner address /// @param _to New address /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Adds owner to wallet /// @param self Wallet in contract storage /// @param _newOwner Address for new owner /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Removes owner from wallet /// @param self Wallet in contract storage /// @param _ownerRemoving Address of owner to be removed /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes required sigs to change wallet parameters /// @param self Wallet in contract storage /// @param _requiredAdmin The new signature requirement /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes required sigs for major transactions /// @param self Wallet in contract storage /// @param _requiredMajor The new signature requirement /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes required sigs for minor transactions /// @param self Wallet in contract storage /// @param _requiredMinor The new signature requirement /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes threshold for major transaction day spend per token /// @param self Wallet in contract storage /// @param _token Address of token, ether is 0 /// @param _majorThreshold New threshold /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Get list of wallet owners, will return fixed 50 until fork /// @param self Wallet in contract storage /// @return address[51] Returns entire 51 owner slots
/// @dev Get index of an owner /// @param self Wallet in contract storage /// @param _owner Address of owner /// @return uint256 Index of the owner
/// @dev Get max number of wallet owners /// @param self Wallet in contract storage /// @return uint256 Maximum number of owners
/// @dev Get number of wallet owners /// @param self Wallet in contract storage /// @return uint256 Number of owners
/// @dev Get sig requirements for administrative changes /// @param self Wallet in contract storage /// @return uint256 Number of sigs required
/// @dev Get sig requirements for minor tx spends /// @param self Wallet in contract storage /// @return uint256 Number of sigs required
/// @dev Get sig requirements for major tx spends /// @param self Wallet in contract storage /// @return uint256 Number of sigs required
/// @dev Get current day spend for token /// @param self Wallet in contract storage /// @param _token Address of token, 0 for ether /// @return uint256[2] 0-index is day timestamp, 1-index is the day spend
/// @dev Get major tx threshold per token /// @param self Wallet in contract storage /// @param _token Address of token, 0 for ether /// @return uint256 Threshold amount
/// @dev Get the number of tx's with the same id /// @param self Wallet in contract storage /// @param _id ID of transactions requested /// @return uint256 Number of tx's with same ID
/// @dev Get list of confirmations for a tx, use getTransactionLength to get latest number /// @param self Wallet in contract storage /// @param _id ID of transaction requested /// @param _txIndex The transaction index number /// @return uint256[50] Returns list of confirmations, fixed at 50 until fork
/// @dev Retrieve tx confirmation count /// @param self Wallet in contract storage /// @param _id ID of transaction requested /// @param _txIndex The transaction index number /// @return uint256 Returns the current number of tx confirmations
/// @dev Retrieve if transaction was successful /// @param self Wallet in contract storage /// @param _id ID of transaction requested /// @param _txIndex The transaction index number /// @return bool Returns true if tx successfully executed, false otherwise
/// @dev Constructor /// @param self The wallet in contract storage /// @param _owners Array of initial owners /// @param _requiredAdmin Set number of sigs for administrative tasks /// @param _requiredMajor Set number of sigs for major tx /// @param _requiredMinor Set number of sigs for minor tx /// @param _majorThreshold Set major tx threshold amount for ether /// @return Will return true when complete
/// @dev Verifies a confirming owner has not confirmed already /// @param self Contract wallet in storage /// @param _id ID of the tx being checked /// @param _txIndex Index number of this tx /// @return Returns true if check passes, false otherwise
/// @dev Used later to calculate the number of confirmations needed for tx /// @param _required Number of sigs required /// @param _count Current number of sigs
/// @dev Used to check if tx is moving tokens and parses amount /// @param _txData Data for proposed tx /// @return bool True if transaction is moving tokens /// @return uint256 Amount of tokens involved, 0 if not spending tx
/// @dev Retrieves sig requirement for spending tx /// @param self Contract wallet in storage /// @param _to Target address of transaction /// @param _value Amount of ether spend /// @param _isTransfer True if transferring other tokens, false otherwise /// @param _amount Amount of tokens being transferred, 0 if not a transfer tx /// @return uint256 The required sigs for tx
/// @dev Function to create new contract /// @param _txData Transaction data /// @param _value Amount of eth sending to new contract
/// @dev Create and execute transaction from wallet /// @param self Wallet in contract storage /// @param _to Address of target /// @param _value Amount of ether sending /// @param _txData Data for executing transaction /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Confirms a current pending tx, will execute if final confirmation /// @param self Wallet in contract storage /// @param _id ID of the transaction /// @return Returns true if successful, false otherwise
/// @dev Revokes a prior confirmation from sender, call with tx ID /// @param self Wallet in contract storage /// @param _id ID of the transaction /// @return Returns true if successful, false otherwise
/// @dev Sum vector /// @param self Storage array containing uint256 type variables /// @return sum The sum of all elements, does not check for overflow
/// @dev Returns the max value in an array. /// @param self Storage array containing uint256 type variables /// @return maxValue The highest value in the array
/// @dev Returns the minimum value in an array. /// @param self Storage array containing uint256 type variables /// @return minValue The highest value in the array
/// @dev Finds the index of a given value in an array /// @param self Storage array containing uint256 type variables /// @param value The value to search for /// @param isSorted True if the array is sorted, false otherwise /// @return found True if the value was found, false otherwise /// @return index The index of the given value, returns 0 if found is false
/// @dev Utility function for heapSort /// @param index The index of child node /// @return pI The parent node index
/// @dev Utility function for heapSort /// @param index The index of parent node /// @return lcI The index of left child
/// @dev Sorts given array in place /// @param self Storage array containing uint256 type variables
/// @dev Removes duplicates from a given array. /// @param self Storage array containing uint256 type variables
/// @dev Multiplies two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The product of a and b, or 0 if there is overflow
/// @dev Divides two numbers but checks for 0 in the divisor first. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if `b` is 0 /// @return res The quotient of a and b, or 0 if `b` is 0
/// @dev Adds two numbers and checks for overflow before returning. /// Does not throw. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is overflow /// @return res The sum of a and b, or 0 if there is overflow
/// @dev Subtracts two numbers and checks for underflow before returning. /// Does not throw but rather logs an Err event if there is underflow. /// @param a First number /// @param b Second number /// @return err False normally, or true if there is underflow /// @return res The difference between a and b, or 0 if there is underflow
/// @dev Called by the Standard Token upon creation. /// @param self Stored token from token contract /// @param _name Name of the new token /// @param _symbol Symbol of the new token /// @param _decimals Decimal places for the token represented /// @param _initial_supply The initial token supply /// @param _allowMinting True if additional tokens can be created, false otherwise
/// @dev Transfer tokens from caller's account to another account. /// @param self Stored token from token contract /// @param _to Address to send tokens /// @param _value Number of tokens to send /// @return True if completed
/// @dev Authorized caller transfers tokens from one account to another /// @param self Stored token from token contract /// @param _from Address to send tokens from /// @param _to Address to send tokens to /// @param _value Number of tokens to send /// @return True if completed
/// @dev Retrieve token balance for an account /// @param self Stored token from token contract /// @param _owner Address to retrieve balance of /// @return balance The number of tokens in the subject account
/// @dev Authorize an account to send tokens on caller's behalf /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _value Number of tokens authorized account may send /// @return True if completed
/// @dev Remaining tokens third party spender has to send /// @param self Stored token from token contract /// @param _owner Address of token holder /// @param _spender Address of authorized spender /// @return remaining Number of tokens spender has left in owner's account
/// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it /// @param self Stored token from token contract /// @param _spender Address to authorize /// @param _valueChange Increase or decrease in number of tokens authorized account may send /// @param _increase True if increasing allowance, false if decreasing allowance /// @return True if completed
/// @dev Change owning address of the token contract, specifically for minting /// @param self Stored token from token contract /// @param _newOwner Address for the new owner /// @return True if completed
/// @dev Mints additional tokens, new tokens go to owner /// @param self Stored token from token contract /// @param _amount Number of tokens to mint /// @return True if completed
/// @dev Permanent stops minting /// @param self Stored token from token contract /// @return True if completed
/// @dev Permanently burn tokens /// @param self Stored token from token contract /// @param _amount Amount of tokens to burn /// @return True if completed
/// @dev Validates arguments for changeOwner function /// @param _from Index of current owner removing /// @param _to Index of new potential owner, should be 0 /// @return Returns true if check passes, false otherwise
/// @dev Validates arguments for addOwner function /// @param _index Index of new owner, should be 0 /// @param _length Current length of owner array /// @return Returns true if check passes, false otherwise
/// @dev Validates arguments for removeOwner function /// @param _index Index of owner removing /// @param _length Current number of owners /// @param _min Minimum owners currently required to meet sig requirements /// @return Returs true if check passes, false otherwise
/// @dev Validates arguments for changing any of the sig requirement parameters /// @param _newRequired The new sig requirement /// @param _length Current number of owners /// @return Returns true if checks pass, false otherwise
/// @dev Used later to calculate the number of confirmations needed for tx /// @param _required Number of sigs required /// @param _count Current number of sigs
/// @dev Changes owner address to a new address /// @param self Wallet in contract storage /// @param _from Current owner address /// @param _to New address /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Adds owner to wallet /// @param self Wallet in contract storage /// @param _newOwner Address for new owner /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Removes owner from wallet /// @param self Wallet in contract storage /// @param _ownerRemoving Address of owner to be removed /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes required sigs to change wallet parameters /// @param self Wallet in contract storage /// @param _requiredAdmin The new signature requirement /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes required sigs for major transactions /// @param self Wallet in contract storage /// @param _requiredMajor The new signature requirement /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes required sigs for minor transactions /// @param self Wallet in contract storage /// @param _requiredMinor The new signature requirement /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Changes threshold for major transaction day spend per token /// @param self Wallet in contract storage /// @param _token Address of token, ether is 0 /// @param _majorThreshold New threshold /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Get list of wallet owners, will return fixed 50 until fork /// @param self Wallet in contract storage /// @return address[51] Returns entire 51 owner slots
/// @dev Get index of an owner /// @param self Wallet in contract storage /// @param _owner Address of owner /// @return uint256 Index of the owner
/// @dev Get max number of wallet owners /// @param self Wallet in contract storage /// @return uint256 Maximum number of owners
/// @dev Get number of wallet owners /// @param self Wallet in contract storage /// @return uint256 Number of owners
/// @dev Get sig requirements for administrative changes /// @param self Wallet in contract storage /// @return uint256 Number of sigs required
/// @dev Get sig requirements for minor tx spends /// @param self Wallet in contract storage /// @return uint256 Number of sigs required
/// @dev Get sig requirements for major tx spends /// @param self Wallet in contract storage /// @return uint256 Number of sigs required
/// @dev Get current day spend for token /// @param self Wallet in contract storage /// @param _token Address of token, 0 for ether /// @return uint256[2] 0-index is day timestamp, 1-index is the day spend
/// @dev Get major tx threshold per token /// @param self Wallet in contract storage /// @param _token Address of token, 0 for ether /// @return uint256 Threshold amount
/// @dev Get the number of tx's with the same id /// @param self Wallet in contract storage /// @param _id ID of transactions requested /// @return uint256 Number of tx's with same ID
/// @dev Get list of confirmations for a tx, use getTransactionLength to get latest number /// @param self Wallet in contract storage /// @param _id ID of transaction requested /// @param _txIndex The transaction index number /// @return uint256[50] Returns list of confirmations, fixed at 50 until fork
/// @dev Retrieve tx confirmation count /// @param self Wallet in contract storage /// @param _id ID of transaction requested /// @param _txIndex The transaction index number /// @return uint256 Returns the current number of tx confirmations
/// @dev Retrieve if transaction was successful /// @param self Wallet in contract storage /// @param _id ID of transaction requested /// @param _txIndex The transaction index number /// @return bool Returns true if tx successfully executed, false otherwise
/// @dev Constructor /// @param self The wallet in contract storage /// @param _owners Array of initial owners /// @param _requiredAdmin Set number of sigs for administrative tasks /// @param _requiredMajor Set number of sigs for major tx /// @param _requiredMinor Set number of sigs for minor tx /// @param _majorThreshold Set major tx threshold amount for ether /// @return Will return true when complete
/// @dev Verifies a confirming owner has not confirmed already /// @param self Contract wallet in storage /// @param _id ID of the tx being checked /// @param _txIndex Index number of this tx /// @return Returns true if check passes, false otherwise
/// @dev Used later to calculate the number of confirmations needed for tx /// @param _required Number of sigs required /// @param _count Current number of sigs
/// @dev Used to check if tx is moving tokens and parses amount /// @param _txData Data for proposed tx /// @return bool True if transaction is moving tokens /// @return uint256 Amount of tokens involved, 0 if not spending tx
/// @dev Retrieves sig requirement for spending tx /// @param self Contract wallet in storage /// @param _to Target address of transaction /// @param _value Amount of ether spend /// @param _isTransfer True if transferring other tokens, false otherwise /// @param _amount Amount of tokens being transferred, 0 if not a transfer tx /// @return uint256 The required sigs for tx
/// @dev Function to create new contract /// @param _txData Transaction data /// @param _value Amount of eth sending to new contract
/// @dev Create and execute transaction from wallet /// @param self Wallet in contract storage /// @param _to Address of target /// @param _value Amount of ether sending /// @param _txData Data for executing transaction /// @param _confirm True if confirming, false if revoking confirmation /// @param _data Message data passed from wallet contract /// @return bool Returns true if successful, false otherwise /// @return bytes32 Returns the tx ID, can be used for confirm/revoke functions
/// @dev Confirms a current pending tx, will execute if final confirmation /// @param self Wallet in contract storage /// @param _id ID of the transaction /// @return Returns true if successful, false otherwise
/// @dev Revokes a prior confirmation from sender, call with tx ID /// @param self Wallet in contract storage /// @param _id ID of the transaction /// @return Returns true if successful, false otherwise
/** * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` * * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite * {RoleAdminChanged} not being emitted signaling this. * * _Available since v3.1._ */
/** * @dev Emitted when `account` is granted `role`. * * `sender` is the account that originated the contract call, an admin role * bearer except when using {_setupRole}. */
/** * @dev Emitted when `account` is revoked `role`. * * `sender` is the account that originated the contract call: *   - if using `revokeRole`, it is the admin role bearer *   - if using `renounceRole`, it is the role bearer (i.e. `account`) */
/** * @dev Modifier that checks that an account has a specific role. Reverts * with a standardized message including the required role. * * The format of the revert reason is given by the following regular expression: * *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/ */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev Returns `true` if `account` has been granted `role`. */
/** * @dev Revert with a standard message if `account` is missing `role`. * * The format of the revert reason is given by the following regular expression: * *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/ */
/** * @dev Returns the admin role that controls `role`. See {grantRole} and * {revokeRole}. * * To change a role's admin, use {_setRoleAdmin}. */
/** * @dev Grants `role` to `account`. * * If `account` had not been already granted `role`, emits a {RoleGranted} * event. * * Requirements: * * - the caller must have ``role``'s admin role. */
/** * @dev Revokes `role` from `account`. * * If `account` had been granted `role`, emits a {RoleRevoked} event. * * Requirements: * * - the caller must have ``role``'s admin role. */
/** * @dev Revokes `role` from the calling account. * * Roles are often managed via {grantRole} and {revokeRole}: this function's * purpose is to provide a mechanism for accounts to lose their privileges * if they are compromised (such as when a trusted device is misplaced). * * If the calling account had been granted `role`, emits a {RoleRevoked} * event. * * Requirements: * * - the caller must be `account`. */
/** * @dev Grants `role` to `account`. * * If `account` had not been already granted `role`, emits a {RoleGranted} * event. Note that unlike {grantRole}, this function doesn't perform any * checks on the calling account. * * [WARNING] * ==== * This function should only be called from the constructor when setting * up the initial roles for the system. * * Using this function in any other way is effectively circumventing the admin * system imposed by {AccessControl}. * ==== */
/** * @dev Sets `adminRole` as ``role``'s admin role. * * Emits a {RoleAdminChanged} event. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev Returns one of the accounts that have `role`. `index` must be a * value between 0 and {getRoleMemberCount}, non-inclusive. * * Role bearers are not sorted in any particular way, and their ordering may * change at any point. * * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure * you perform all queries on the same block. See the following * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] * for more information. */
/** * @dev Returns the number of accounts that have `role`. Can be used * together with {getRoleMember} to enumerate all bearers of a role. */
/** * @dev Overload {grantRole} to track enumerable memberships */
/** * @dev Overload {revokeRole} to track enumerable memberships */
/** * @dev Overload {renounceRole} to track enumerable memberships */
/** * @dev Overload {_setupRole} to track enumerable memberships */
/** * @dev Returns the address of the current owner. */
/** * @dev Throws if called by any account other than the owner. */
/** * @dev Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner. */
/** * @dev Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner. */
/** * @dev Getter for the total shares held by payees. */
/** * @dev Getter for the total amount of Ether already released. */
/** * @dev Getter for the amount of shares held by an account. */
/** * @dev Getter for the amount of Ether already released to a payee. */
/** * @dev Getter for the address of the payee number `index`. */
/** * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the * total shares and their previous withdrawals. */
/** * @dev Add a new payee to the contract. * @param account The address of the payee to add. * @param shares_ The number of shares owned by the payee. */
/** * @dev Emitted when a call is scheduled as part of operation `id`. */
/** * @dev Emitted when a call is performed as part of operation `id`. */
/** * @dev Emitted when operation `id` is cancelled. */
/** * @dev Emitted when the minimum delay for future operations is modified. */
/** * @dev Modifier to make a function callable only by a certain role. In * addition to checking the sender's role, `address(0)` 's role is also * considered. Granting a role to `address(0)` is equivalent to enabling * this role for everyone. */
/** * @dev Returns whether an id correspond to a registered operation. This * includes both Pending, Ready and Done operations. */
/** * @dev Returns whether an operation is pending or not. */
/** * @dev Returns whether an operation is ready or not. */
/** * @dev Returns whether an operation is done or not. */
/** * @dev Returns the timestamp at with an operation becomes ready (0 for * unset operations, 1 for done operations). */
/** * @dev Returns the minimum delay for an operation to become valid. * * This value can be changed by executing an operation that calls `updateDelay`. */
/** * @dev Returns the identifier of an operation containing a single * transaction. */
/** * @dev Returns the identifier of an operation containing a batch of * transactions. */
/** * @dev Schedule an operation containing a single transaction. * * Emits a {CallScheduled} event. * * Requirements: * * - the caller must have the 'proposer' role. */
/** * @dev Schedule an operation containing a batch of transactions. * * Emits one {CallScheduled} event per transaction in the batch. * * Requirements: * * - the caller must have the 'proposer' role. */
/** * @dev Schedule an operation that is to becomes valid after a given delay. */
/** * @dev Cancel an operation. * * Requirements: * * - the caller must have the 'proposer' role. */
/** * @dev Execute an (ready) operation containing a single transaction. * * Emits a {CallExecuted} event. * * Requirements: * * - the caller must have the 'executor' role. */
/** * @dev Execute an (ready) operation containing a batch of transactions. * * Emits one {CallExecuted} event per transaction in the batch. * * Requirements: * * - the caller must have the 'executor' role. */
/** * @dev Checks before execution of an operation's calls. */
/** * @dev Checks after execution of an operation's calls. */
/** * @dev Execute an operation's call. * * Emits a {CallExecuted} event. */
/** * @dev Changes the minimum timelock duration for future operations. * * Emits a {MinDelayChange} event. * * Requirements: * * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing * an operation where the timelock is the target and the data is the ABI-encoded call to this function. */
/** * @dev Should return whether the signature provided is valid for the provided data * @param hash      Hash of the data to be signed * @param signature Signature byte array associated with _data */
/** * @dev Receive a flash loan. * @param initiator The initiator of the loan. * @param token The loan currency. * @param amount The amount of tokens lent. * @param fee The additional amount of tokens to repay. * @param data Arbitrary data structure, intended to contain user-defined parameters. * @return The keccak256 hash of "ERC3156FlashBorrower.onFlashLoan" */
/** * @dev The amount of currency available to be lended. * @param token The loan currency. * @return The amount of `token` that can be borrowed. */
/** * @dev The fee to be charged for a given loan. * @param token The loan currency. * @param amount The amount of tokens lent. * @return The amount of `token` to be charged for the loan, on top of the returned principal. */
/** * @dev Initiate a flash loan. * @param receiver The receiver of the tokens in the loan, and the receiver of the callback. * @param token The loan currency. * @param amount The amount of tokens lent. * @param data Arbitrary data structure, intended to contain user-defined parameters. */
// Emitted in ERC777Mock. Here for easier decoding
// test helper function to call asyncTransfer
// using the do* naming convention to avoid warnings due to clashing opcode names
/** * @dev Implement supportsInterface(bytes4) using a lookup table. */
/** * @dev Private method for registering an interface. */
// Not having any checks in this function is dangerous! Do not do this outside tests!
/** * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`. * * This function uses the create opcode, which should never revert. */
/** * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`. * * This function uses the create2 opcode and a `salt` to deterministically deploy * the clone. Using the same `implementation` and `salt` multiple time will revert, since * the clones cannot be deployed twice at the same address. */
/** * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}. */
/** * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}. */
/** * @dev Delegates the current call to `implementation`. * * This function does not return to its internall call site, it will return directly to the external caller. */
/** * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function * and {_fallback} should delegate. */
/** * @dev Delegates the current call to the address returned by `_implementation()`. * * This function does not return to its internall call site, it will return directly to the external caller. */
/** * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback` * call, or as part of the Solidity `fallback` or `receive` functions. * * If overriden should call `super._beforeFallback()`. */
/** * @dev Returns the current beacon address. */
/** * @dev Returns the current implementation address of the associated beacon. */
/** * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}. * * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. * * Requirements: * * - `beacon` must be a contract. * - The implementation returned by `beacon` must be a contract. */
/** * @dev Must return an address that can be used as a delegate call target. * * {BeaconProxy} will check that this address is a contract. */
/** * @dev Emitted when the implementation returned by the beacon is changed. */
/** * @dev Returns the current implementation address. */
/** * @dev Upgrades the beacon to a new implementation. * * Emits an {Upgraded} event. * * Requirements: * * - msg.sender must be the owner of the contract. * - `newImplementation` must be a contract. */
/** * @dev Sets the implementation contract address for this beacon * * Requirements: * * - `newImplementation` must be a contract. */
/** * @dev Returns the current implementation address. */
/** * @dev Returns the current implementation address. */
/** * @dev Stores a new address in the EIP1967 implementation slot. */
/** * @dev Returns the current beacon. */
/** * @dev Stores a new beacon in the EIP1967 beacon slot. */
/** * @dev Returns the current admin. */
/** * @dev Stores a new address in the EIP1967 admin slot. */
/** * @dev Emitted when the implementation is upgraded. */
/** * @dev Emitted when the beacon is upgraded. */
/** * @dev Emitted when the admin account has changed. */
/** * @dev Perform implementation upgrade * * Emits an {Upgraded} event. */
/** * @dev Perform implementation upgrade with additional setup call. * * Emits an {Upgraded} event. */
/** * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call. * * Emits an {Upgraded} event. */
/** * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that). * * Emits a {BeaconUpgraded} event. */
/** * @dev Changes the admin of the proxy. * * Emits an {AdminChanged} event. */
/** * @dev Returns the current implementation of `proxy`. * * Requirements: * * - This contract must be the admin of `proxy`. */
/** * @dev Returns the current admin of `proxy`. * * Requirements: * * - This contract must be the admin of `proxy`. */
/** * @dev Changes the admin of `proxy` to `newAdmin`. * * Requirements: * * - This contract must be the current admin of `proxy`. */
/** * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}. * * Requirements: * * - This contract must be the admin of `proxy`. */
/** * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See * {TransparentUpgradeableProxy-upgradeToAndCall}. * * Requirements: * * - This contract must be the admin of `proxy`. */
/** * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin. */
/** * @dev Returns the current admin. * * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}. * * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` */
/** * @dev Returns the current implementation. * * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}. * * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` */
/** * @dev Changes the admin of the proxy. * * Emits an {AdminChanged} event. * * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}. */
/** * @dev Upgrade the implementation of the proxy. * * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}. */
/** * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the * proxied contract. * * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}. */
/** * @dev Returns the current admin. */
/** * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}. */
/** * @dev Modifier to protect an initializer function from being invoked twice. */
/** * @dev Emitted when the pause is triggered by `account`. */
/** * @dev Emitted when the pause is lifted by `account`. */
/** * @dev Returns true if the contract is paused, and false otherwise. */
/** * @dev Modifier to make a function callable only when the contract is not paused. * * Requirements: * * - The contract must not be paused. */
/** * @dev Modifier to make a function callable only when the contract is paused. * * Requirements: * * - The contract must be paused. */
/** * @dev Triggers stopped state. * * Requirements: * * - The contract must not be paused. */
/** * @dev Returns to normal state. * * Requirements: * * - The contract must be paused. */
/** * @dev Withdraw accumulated payments, forwarding all gas to the recipient. * * Note that _any_ account can call this function, not just the `payee`. * This means that contracts unaware of the `PullPayment` protocol can still * receive funds this way, by having a separate account call * {withdrawPayments}. * * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. * Make sure you trust the recipient, or are either following the * checks-effects-interactions pattern or using {ReentrancyGuard}. * * @param payee Whose payments will be withdrawn. */
/** * @dev Returns the payments owed to an address. * @param dest The creditor's address. */
/** * @dev Called by the payer to store the sent amount as credit to be pulled. * Funds sent in this way are stored in an intermediate {Escrow} contract, so * there is no danger of them being spent before withdrawal. * * @param dest The destination address of the funds. * @param amount The amount to transfer. */
/** * @dev Prevents a contract from calling itself, directly or indirectly. * Calling a `nonReentrant` function from another `nonReentrant` * function is not supported. It is possible to prevent this from happening * by making the `nonReentrant` function external, and make it call a * `private` function that does the actual work. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev See {IERC1155MetadataURI-uri}. * * This implementation returns the same URI for *all* token types. It relies * on the token type ID substitution mechanism * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. * * Clients calling this function must replace the `\{id\}` substring with the * actual token type ID. */
/** * @dev See {IERC1155-balanceOf}. * * Requirements: * * - `account` cannot be the zero address. */
/** * @dev See {IERC1155-balanceOfBatch}. * * Requirements: * * - `accounts` and `ids` must have the same length. */
/** * @dev See {IERC1155-setApprovalForAll}. */
/** * @dev See {IERC1155-isApprovedForAll}. */
/** * @dev See {IERC1155-safeTransferFrom}. */
/** * @dev See {IERC1155-safeBatchTransferFrom}. */
/** * @dev Sets a new URI for all token types, by relying on the token type ID * substitution mechanism * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. * * By this mechanism, any occurrence of the `\{id\}` substring in either the * URI or any of the amounts in the JSON file at said URI will be replaced by * clients with the token type ID. * * For example, the `https://token-cdn-domain/\{id\}.json` URI would be * interpreted by clients as * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json` * for token type ID 0x4cce0. * * See {uri}. * * Because these URIs cannot be meaningfully represented by the {URI} event, * this function emits no events. */
/** * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`. * * Emits a {TransferSingle} event. * * Requirements: * * - `account` cannot be the zero address. * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the * acceptance magic value. */
/** * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}. * * Requirements: * * - `ids` and `amounts` must have the same length. * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the * acceptance magic value. */
/** * @dev Destroys `amount` tokens of token type `id` from `account` * * Requirements: * * - `account` cannot be the zero address. * - `account` must have at least `amount` tokens of token type `id`. */
/** * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}. * * Requirements: * * - `ids` and `amounts` must have the same length. */
/** * @dev Hook that is called before any token transfer. This includes minting * and burning, as well as batched variants. * * The same hook is called on both single and batched variants. For single * transfers, the length of the `id` and `amount` arrays will be 1. * * Calling conditions (for each `id` and `amount` pair): * * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens * of token type `id` will be  transferred to `to`. * - When `from` is zero, `amount` tokens of token type `id` will be minted * for `to`. * - when `to` is zero, `amount` of ``from``'s tokens of token type `id` * will be burned. * - `from` and `to` are never both zero. * - `ids` and `amounts` have the same, non-zero length. * * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]. */
/** * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`. */
/** * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all * transfers. */
/** * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to * `approved`. */
/** * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. * * If an {URI} event was emitted for `id`, the standard * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value * returned by {IERC1155MetadataURI-uri}. */
/** * @dev Returns the amount of tokens of token type `id` owned by `account`. * * Requirements: * * - `account` cannot be the zero address. */
/** * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. * * Requirements: * * - `accounts` and `ids` must have the same length. */
/** * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, * * Emits an {ApprovalForAll} event. * * Requirements: * * - `operator` cannot be the caller. */
/** * @dev Returns true if `operator` is approved to transfer ``account``'s tokens. * * See {setApprovalForAll}. */
/** * @dev Transfers `amount` tokens of token type `id` from `from` to `to`. * * Emits a {TransferSingle} event. * * Requirements: * * - `to` cannot be the zero address. * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}. * - `from` must have a balance of tokens of type `id` of at least `amount`. * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the * acceptance magic value. */
/** * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. * * Emits a {TransferBatch} event. * * Requirements: * * - `ids` and `amounts` must have the same length. * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the * acceptance magic value. */
/** @dev Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61, or its own function selector). @param operator The address which initiated the transfer (i.e. msg.sender) @param from The address which previously owned the token @param id The ID of the token being transferred @param value The amount of tokens being transferred @param data Additional data with no specified format @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed */
/** @dev Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81, or its own function selector). @param operator The address which initiated the batch transfer (i.e. msg.sender) @param from The address which previously owned the token @param ids An array containing ids of each token being transferred (order and length must match values array) @param values An array containing amounts of each token being transferred (order and length must match ids array) @param data Additional data with no specified format @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed */
/** * @dev See {ERC1155-_beforeTokenTransfer}. * * Requirements: * * - the contract must not be paused. */
/** * @dev Returns the URI for token type `id`. * * If the `\{id\}` substring is present in the URI, it must be replaced by * clients with the actual token type ID. */
/** * @dev Creates `amount` new tokens for `to`, of token type `id`. * * See {ERC1155-_mint}. * * Requirements: * * - the caller must have the `MINTER_ROLE`. */
/** * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}. */
/** * @dev Pauses all token transfers. * * See {ERC1155Pausable} and {Pausable-_pause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`. */
/** * @dev Unpauses all token transfers. * * See {ERC1155Pausable} and {Pausable-_unpause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev Returns the name of the token. */
/** * @dev Returns the symbol of the token, usually a shorter version of the * name. */
/** * @dev Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless this function is * overridden; * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}. */
/** * @dev See {IERC20-totalSupply}. */
/** * @dev See {IERC20-balanceOf}. */
/** * @dev See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`. */
/** * @dev See {IERC20-allowance}. */
/** * @dev See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address. */
/** * @dev See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}. * * Requirements: * * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`. */
/** * @dev Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. */
/** * @dev Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`. */
/** * @dev Moves tokens `amount` from `sender` to `recipient`. * * This is internal function is equivalent to {transfer}, and can be used to * e.g. implement automatic token fees, slashing mechanisms, etc. * * Emits a {Transfer} event. * * Requirements: * * - `sender` cannot be the zero address. * - `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. */
/** @dev Creates `amount` tokens and assigns them to `account`, increasing * the total supply. * * Emits a {Transfer} event with `from` set to the zero address. * * Requirements: * * - `to` cannot be the zero address. */
/** * @dev Destroys `amount` tokens from `account`, reducing the * total supply. * * Emits a {Transfer} event with `to` set to the zero address. * * Requirements: * * - `account` cannot be the zero address. * - `account` must have at least `amount` tokens. */
/** * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens. * * This internal function is equivalent to `approve`, and can be used to * e.g. set automatic allowances for certain subsystems, etc. * * Emits an {Approval} event. * * Requirements: * * - `owner` cannot be the zero address. * - `spender` cannot be the zero address. */
/** * @dev Hook that is called before any transfer of tokens. This includes * minting and burning. * * Calling conditions: * * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens * will be to transferred to `to`. * - when `from` is zero, `amount` tokens will be minted for `to`. * - when `to` is zero, `amount` of ``from``'s tokens will be burned. * - `from` and `to` are never both zero. * * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]. */
/** * @dev Returns the amount of tokens in existence. */
/** * @dev Returns the amount of tokens owned by `account`. */
/** * @dev Moves `amount` tokens from the caller's account to `recipient`. * * Returns a boolean value indicating whether the operation succeeded. * * Emits a {Transfer} event. */
/** * @dev Returns the remaining number of tokens that `spender` will be * allowed to spend on behalf of `owner` through {transferFrom}. This is * zero by default. * * This value changes when {approve} or {transferFrom} are called. */
/** * @dev Sets `amount` as the allowance of `spender` over the caller's tokens. * * Returns a boolean value indicating whether the operation succeeded. * * IMPORTANT: Beware that changing an allowance with this method brings the risk * that someone may use both the old and the new allowance by unfortunate * transaction ordering. One possible solution to mitigate this race * condition is to first reduce the spender's allowance to 0 and set the * desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 * * Emits an {Approval} event. */
/** * @dev Moves `amount` tokens from `sender` to `recipient` using the * allowance mechanism. `amount` is then deducted from the caller's * allowance. * * Returns a boolean value indicating whether the operation succeeded. * * Emits a {Transfer} event. */
/** * @dev Emitted when `value` tokens are moved from one account (`from`) to * another (`to`). * * Note that `value` may be zero. */
/** * @dev Emitted when the allowance of a `spender` for an `owner` is set by * a call to {approve}. `value` is the new allowance. */
/** * @dev Returns the maximum amount of tokens available for loan. * @param token The address of the token that is requested. * @return The amont of token that can be loaned. */
/** * @dev Returns the fee applied when doing flash loans. By default this * implementation has 0 fees. This function can be overloaded to make * the flash loan mechanism deflationary. * @param token The token to be flash loaned. * @param amount The amount of tokens to be loaned. * @return The fees applied to the corresponding flash loan. */
/** * @dev Performs a flash loan. New tokens are minted and sent to the * `receiver`, who is required to implement the {IERC3156FlashBorrower} * interface. By the end of the flash loan, the receiver is expected to own * amount + fee tokens and have them approved back to the token contract itself so * they can be burned. * @param receiver The receiver of the flash loan. Should implement the * {IERC3156FlashBorrower.onFlashLoan} interface. * @param token The token to be flash loaned. Only `address(this)` is * supported. * @param amount The amount of tokens to be loaned. * @param data An arbitrary datafield that is passed to the receiver. * @return `true` is the flash loan was successfull. */
/** * @dev See {IERC20Permit-permit}. */
/** * @dev See {IERC20Permit-nonces}. */
// solhint-disable-next-line func-name-mixedcase
/** * @dev "Consume a nonce": return the current value and increment. */
/** * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens, * given ``owner``'s signed approval. * * IMPORTANT: The same issues {IERC20-approve} has related to transaction * ordering also apply here. * * Emits an {Approval} event. * * Requirements: * * - `spender` cannot be the zero address. * - `deadline` must be a timestamp in the future. * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` * over the EIP712-formatted function arguments. * - the signature must use ``owner``'s current nonce (see {nonces}). * * For more information on the signature format, see the * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP * section]. */
/** * @dev Returns the current nonce for `owner`. This value must be * included whenever a signature is generated for {permit}. * * Every successful call to {permit} increases ``owner``'s nonce by one. This * prevents a signature from being used multiple times. */
// solhint-disable-next-line func-name-mixedcase
/** * @dev Destroys `amount` tokens from the caller. * * See {ERC20-_burn}. */
/** * @dev Destroys `amount` tokens from `account`, deducting from the caller's * allowance. * * See {ERC20-_burn} and {ERC20-allowance}. * * Requirements: * * - the caller must have allowance for ``accounts``'s tokens of at least * `amount`. */
/** * @dev Returns the cap on the token's total supply. */
/** * @dev See {ERC20-_mint}. */
/** * @dev See {ERC20-_beforeTokenTransfer}. * * Requirements: * * - the contract must not be paused. */
/** * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created. */
/** * @dev Creates a new snapshot and returns its snapshot id. * * Emits a {Snapshot} event that contains the same id. * * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a * set of accounts, for example using {AccessControl}, or it may be open to the public. * * [WARNING] * ==== * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking, * you must consider that it can potentially be used by attackers in two ways. * * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs * section above. * * We haven't measured the actual numbers; if this is something you're interested in please reach out to us. * ==== */
/** * @dev Retrieves the balance of `account` at the time `snapshotId` was created. */
/** * @dev Retrieves the total supply at the time `snapshotId` was created. */
// Update balance and/or total supply snapshots before the values are modified. This is implemented // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.
/** * @dev Returns the name of the token. */
/** * @dev Returns the symbol of the token. */
/** * @dev Returns the decimals places of the token. */
/** * @dev Creates `amount` new tokens for `to`. * * See {ERC20-_mint}. * * Requirements: * * - the caller must have the `MINTER_ROLE`. */
/** * @dev Pauses all token transfers. * * See {ERC20Pausable} and {Pausable-_pause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`. */
/** * @dev Unpauses all token transfers. * * See {ERC20Pausable} and {Pausable-_unpause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`. */
/** * @dev Deprecated. This function has issues similar to the ones found in * {IERC20-approve}, and its usage is discouraged. * * Whenever possible, use {safeIncreaseAllowance} and * {safeDecreaseAllowance} instead. */
/** * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement * on the return value: the return value is optional (but if data is returned, it must not be false). * @param token The token targeted by the call. * @param data The call data (encoded using abi.encode or one of its variants). */
/** * @return the token being held. */
/** * @return the beneficiary of the tokens. */
/** * @return the time when the tokens are released. */
/** * @notice Transfers tokens held by timelock to beneficiary. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev See {IERC721-balanceOf}. */
/** * @dev See {IERC721-ownerOf}. */
/** * @dev See {IERC721Metadata-name}. */
/** * @dev See {IERC721Metadata-symbol}. */
/** * @dev See {IERC721Metadata-tokenURI}. */
/** * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden * in child contracts. */
/** * @dev See {IERC721-approve}. */
/** * @dev See {IERC721-getApproved}. */
/** * @dev See {IERC721-setApprovalForAll}. */
/** * @dev See {IERC721-isApprovedForAll}. */
/** * @dev See {IERC721-transferFrom}. */
/** * @dev See {IERC721-safeTransferFrom}. */
/** * @dev See {IERC721-safeTransferFrom}. */
/** * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients * are aware of the ERC721 protocol to prevent tokens from being forever locked. * * `_data` is additional data, it has no specified format and it is sent in call to `to`. * * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. * implement alternative mechanisms to perform token transfer, such as signature-based. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must exist and be owned by `from`. * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. * * Emits a {Transfer} event. */
/** * @dev Returns whether `tokenId` exists. * * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}. * * Tokens start existing when they are minted (`_mint`), * and stop existing when they are burned (`_burn`). */
/** * @dev Returns whether `spender` is allowed to manage `tokenId`. * * Requirements: * * - `tokenId` must exist. */
/** * @dev Safely mints `tokenId` and transfers it to `to`. * * Requirements: * * - `tokenId` must not exist. * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. * * Emits a {Transfer} event. */
/** * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is * forwarded in {IERC721Receiver-onERC721Received} to contract recipients. */
/** * @dev Mints `tokenId` and transfers it to `to`. * * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible * * Requirements: * * - `tokenId` must not exist. * - `to` cannot be the zero address. * * Emits a {Transfer} event. */
/** * @dev Destroys `tokenId`. * The approval is cleared when the token is burned. * * Requirements: * * - `tokenId` must exist. * * Emits a {Transfer} event. */
/** * @dev Transfers `tokenId` from `from` to `to`. *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender. * * Requirements: * * - `to` cannot be the zero address. * - `tokenId` token must be owned by `from`. * * Emits a {Transfer} event. */
/** * @dev Approve `to` to operate on `tokenId` * * Emits a {Approval} event. */
/** * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address. * The call is not executed if the target address is not a contract. * * @param from address representing the previous owner of the given token ID * @param to target address that will receive the tokens * @param tokenId uint256 ID of the token to be transferred * @param _data bytes optional data to send along with the call * @return bool whether the call correctly returned the expected magic value */
/** * @dev Hook that is called before any token transfer. This includes minting * and burning. * * Calling conditions: * * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be * transferred to `to`. * - When `from` is zero, `tokenId` will be minted for `to`. * - When `to` is zero, ``from``'s `tokenId` will be burned. * - `from` cannot be the zero address. * - `to` cannot be the zero address. * * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]. */
/** * @dev Emitted when `tokenId` token is transferred from `from` to `to`. */
/** * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token. */
/** * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets. */
/** * @dev Returns the number of tokens in ``owner``'s account. */
/** * @dev Returns the owner of the `tokenId` token. * * Requirements: * * - `tokenId` must exist. */
/** * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients * are aware of the ERC721 protocol to prevent tokens from being forever locked. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must exist and be owned by `from`. * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. * * Emits a {Transfer} event. */
/** * @dev Transfers `tokenId` token from `from` to `to`. * * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must be owned by `from`. * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. * * Emits a {Transfer} event. */
/** * @dev Gives permission to `to` to transfer `tokenId` token to another account. * The approval is cleared when the token is transferred. * * Only a single account can be approved at a time, so approving the zero address clears previous approvals. * * Requirements: * * - The caller must own the token or be an approved operator. * - `tokenId` must exist. * * Emits an {Approval} event. */
/** * @dev Returns the account approved for `tokenId` token. * * Requirements: * * - `tokenId` must exist. */
/** * @dev Approve or remove `operator` as an operator for the caller. * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. * * Requirements: * * - The `operator` cannot be the caller. * * Emits an {ApprovalForAll} event. */
/** * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`. * * See {setApprovalForAll} */
/** * @dev Safely transfers `tokenId` token from `from` to `to`. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must exist and be owned by `from`. * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. * * Emits a {Transfer} event. */
/** * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} * by `operator` from `from`, this function is called. * * It must return its Solidity selector to confirm the token transfer. * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. * * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`. */
/** * @dev Burns `tokenId`. See {ERC721-_burn}. * * Requirements: * * - The caller must own `tokenId` or be an approved operator. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}. */
/** * @dev See {IERC721Enumerable-totalSupply}. */
/** * @dev See {IERC721Enumerable-tokenByIndex}. */
/** * @dev Hook that is called before any token transfer. This includes minting * and burning. * * Calling conditions: * * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be * transferred to `to`. * - When `from` is zero, `tokenId` will be minted for `to`. * - When `to` is zero, ``from``'s `tokenId` will be burned. * - `from` cannot be the zero address. * - `to` cannot be the zero address. * * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]. */
/** * @dev Private function to add a token to this extension's ownership-tracking data structures. * @param to address representing the new owner of the given token ID * @param tokenId uint256 ID of the token to be added to the tokens list of the given address */
/** * @dev Private function to add a token to this extension's token tracking data structures. * @param tokenId uint256 ID of the token to be added to the tokens list */
/** * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for * gas optimizations e.g. when performing a transfer operation (avoiding double writes). * This has O(1) time complexity, but alters the order of the _ownedTokens array. * @param from address representing the previous owner of the given token ID * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address */
/** * @dev Private function to remove a token from this extension's token tracking data structures. * This has O(1) time complexity, but alters the order of the _allTokens array. * @param tokenId uint256 ID of the token to be removed from the tokens list */
/** * @dev See {ERC721-_beforeTokenTransfer}. * * Requirements: * * - the contract must not be paused. */
/** * @dev See {IERC721Metadata-tokenURI}. */
/** * @dev Sets `_tokenURI` as the tokenURI of `tokenId`. * * Requirements: * * - `tokenId` must exist. */
/** * @dev Destroys `tokenId`. * The approval is cleared when the token is burned. * * Requirements: * * - `tokenId` must exist. * * Emits a {Transfer} event. */
/** * @dev Returns the total amount of tokens stored by the contract. */
/** * @dev Returns a token ID owned by `owner` at a given `index` of its token list. * Use along with {balanceOf} to enumerate all of ``owner``'s tokens. */
/** * @dev Returns a token ID at a given `index` of all the tokens stored by the contract. * Use along with {totalSupply} to enumerate all tokens. */
/** * @dev Returns the token collection name. */
/** * @dev Returns the token collection symbol. */
/** * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token. */
/** * @dev Creates a new token for `to`. Its token ID will be automatically * assigned (and available on the emitted {IERC721-Transfer} event), and the token * URI autogenerated based on the base URI passed at construction. * * See {ERC721-_mint}. * * Requirements: * * - the caller must have the `MINTER_ROLE`. */
/** * @dev Pauses all token transfers. * * See {ERC721Pausable} and {Pausable-_pause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`. */
/** * @dev Unpauses all token transfers. * * See {ERC721Pausable} and {Pausable-_unpause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev See {IERC721Receiver-onERC721Received}. * * Always returns `IERC721Receiver.onERC721Received.selector`. */
/** * @dev See {IERC777-name}. */
/** * @dev See {IERC777-symbol}. */
/** * @dev See {ERC20-decimals}. * * Always returns 18, as per the * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility). */
/** * @dev See {IERC777-granularity}. * * This implementation always returns `1`. */
/** * @dev See {IERC777-totalSupply}. */
/** * @dev Returns the amount of tokens owned by an account (`tokenHolder`). */
/** * @dev See {IERC777-send}. * * Also emits a {IERC20-Transfer} event for ERC20 compatibility. */
/** * @dev See {IERC20-transfer}. * * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} * interface if it is a contract. * * Also emits a {Sent} event. */
/** * @dev See {IERC777-burn}. * * Also emits a {IERC20-Transfer} event for ERC20 compatibility. */
/** * @dev See {IERC777-isOperatorFor}. */
/** * @dev See {IERC777-authorizeOperator}. */
/** * @dev See {IERC777-revokeOperator}. */
/** * @dev See {IERC777-defaultOperators}. */
/** * @dev See {IERC777-operatorSend}. * * Emits {Sent} and {IERC20-Transfer} events. */
/** * @dev See {IERC777-operatorBurn}. * * Emits {Burned} and {IERC20-Transfer} events. */
/** * @dev See {IERC20-allowance}. * * Note that operator and allowance concepts are orthogonal: operators may * not have allowance, and accounts with allowance may not be operators * themselves. */
/** * @dev See {IERC20-approve}. * * Note that accounts cannot have allowance issued by their operators. */
/** * @dev See {IERC20-transferFrom}. * * Note that operator and allowance concepts are orthogonal: operators cannot * call `transferFrom` (unless they have allowance), and accounts with * allowance cannot call `operatorSend` (unless they are operators). * * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events. */
/** * @dev Creates `amount` tokens and assigns them to `account`, increasing * the total supply. * * If a send hook is registered for `account`, the corresponding function * will be called with `operator`, `data` and `operatorData`. * * See {IERC777Sender} and {IERC777Recipient}. * * Emits {Minted} and {IERC20-Transfer} events. * * Requirements * * - `account` cannot be the zero address. * - if `account` is a contract, it must implement the {IERC777Recipient} * interface. */
/** * @dev Creates `amount` tokens and assigns them to `account`, increasing * the total supply. * * If `requireReceptionAck` is set to true, and if a send hook is * registered for `account`, the corresponding function will be called with * `operator`, `data` and `operatorData`. * * See {IERC777Sender} and {IERC777Recipient}. * * Emits {Minted} and {IERC20-Transfer} events. * * Requirements * * - `account` cannot be the zero address. * - if `account` is a contract, it must implement the {IERC777Recipient} * interface. */
/** * @dev Send tokens * @param from address token holder address * @param to address recipient address * @param amount uint256 amount of tokens to transfer * @param userData bytes extra information provided by the token holder (if any) * @param operatorData bytes extra information provided by the operator (if any) * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient */
/** * @dev Burn tokens * @param from address token holder address * @param amount uint256 amount of tokens to burn * @param data bytes extra information provided by the token holder * @param operatorData bytes extra information provided by the operator (if any) */
/** * @dev See {ERC20-_approve}. * * Note that accounts cannot have allowance issued by their operators. */
/** * @dev Call from.tokensToSend() if the interface is registered * @param operator address operator requesting the transfer * @param from address token holder address * @param to address recipient address * @param amount uint256 amount of tokens to transfer * @param userData bytes extra information provided by the token holder (if any) * @param operatorData bytes extra information provided by the operator (if any) */
/** * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but * tokensReceived() was not registered for the recipient * @param operator address operator requesting the transfer * @param from address token holder address * @param to address recipient address * @param amount uint256 amount of tokens to transfer * @param userData bytes extra information provided by the token holder (if any) * @param operatorData bytes extra information provided by the operator (if any) * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient */
/** * @dev Hook that is called before any token transfer. This includes * calls to {send}, {transfer}, {operatorSend}, minting and burning. * * Calling conditions: * * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens * will be to transferred to `to`. * - when `from` is zero, `amount` tokens will be minted for `to`. * - when `to` is zero, `amount` of ``from``'s tokens will be burned. * - `from` and `to` are never both zero. * * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]. */
/** * @dev Returns the name of the token. */
/** * @dev Returns the symbol of the token, usually a shorter version of the * name. */
/** * @dev Returns the smallest part of the token that is not divisible. This * means all token operations (creation, movement and destruction) must have * amounts that are a multiple of this number. * * For most token contracts, this value will equal 1. */
/** * @dev Returns the amount of tokens in existence. */
/** * @dev Returns the amount of tokens owned by an account (`owner`). */
/** * @dev Moves `amount` tokens from the caller's account to `recipient`. * * If send or receive hooks are registered for the caller and `recipient`, * the corresponding functions will be called with `data` and empty * `operatorData`. See {IERC777Sender} and {IERC777Recipient}. * * Emits a {Sent} event. * * Requirements * * - the caller must have at least `amount` tokens. * - `recipient` cannot be the zero address. * - if `recipient` is a contract, it must implement the {IERC777Recipient} * interface. */
/** * @dev Destroys `amount` tokens from the caller's account, reducing the * total supply. * * If a send hook is registered for the caller, the corresponding function * will be called with `data` and empty `operatorData`. See {IERC777Sender}. * * Emits a {Burned} event. * * Requirements * * - the caller must have at least `amount` tokens. */
/** * @dev Returns true if an account is an operator of `tokenHolder`. * Operators can send and burn tokens on behalf of their owners. All * accounts are their own operator. * * See {operatorSend} and {operatorBurn}. */
/** * @dev Make an account an operator of the caller. * * See {isOperatorFor}. * * Emits an {AuthorizedOperator} event. * * Requirements * * - `operator` cannot be calling address. */
/** * @dev Revoke an account's operator status for the caller. * * See {isOperatorFor} and {defaultOperators}. * * Emits a {RevokedOperator} event. * * Requirements * * - `operator` cannot be calling address. */
/** * @dev Returns the list of default operators. These accounts are operators * for all token holders, even if {authorizeOperator} was never called on * them. * * This list is immutable, but individual holders may revoke these via * {revokeOperator}, in which case {isOperatorFor} will return false. */
/** * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must * be an operator of `sender`. * * If send or receive hooks are registered for `sender` and `recipient`, * the corresponding functions will be called with `data` and * `operatorData`. See {IERC777Sender} and {IERC777Recipient}. * * Emits a {Sent} event. * * Requirements * * - `sender` cannot be the zero address. * - `sender` must have at least `amount` tokens. * - the caller must be an operator for `sender`. * - `recipient` cannot be the zero address. * - if `recipient` is a contract, it must implement the {IERC777Recipient} * interface. */
/** * @dev Destroys `amount` tokens from `account`, reducing the total supply. * The caller must be an operator of `account`. * * If a send hook is registered for `account`, the corresponding function * will be called with `data` and `operatorData`. See {IERC777Sender}. * * Emits a {Burned} event. * * Requirements * * - `account` cannot be the zero address. * - `account` must have at least `amount` tokens. * - the caller must be an operator for `account`. */
/** * @dev Called by an {IERC777} token contract whenever tokens are being * moved or created into a registered account (`to`). The type of operation * is conveyed by `from` being the zero address or not. * * This call occurs _after_ the token contract's state is updated, so * {IERC777-balanceOf}, etc., can be used to query the post-operation state. * * This function may revert to prevent the operation from being executed. */
/** * @dev Called by an {IERC777} token contract whenever a registered holder's * (`from`) tokens are about to be moved or destroyed. The type of operation * is conveyed by `to` being the zero address or not. * * This call occurs _before_ the token contract's state is updated, so * {IERC777-balanceOf}, etc., can be used to query the pre-operation state. * * This function may revert to prevent the operation from being executed. */
/** * @dev Returns true if `account` is a contract. * * [IMPORTANT] * ==== * It is unsafe to assume that an address for which this function returns * false is an externally-owned account (EOA) and not a contract. * * Among others, `isContract` will return false for the following * types of addresses: * *  - an externally-owned account *  - a contract in construction *  - an address where a contract will be created *  - an address where a contract lived, but was destroyed * ==== */
/** * @dev Replacement for Solidity's `transfer`: sends `amount` wei to * `recipient`, forwarding all available gas and reverting on errors. * * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost * of certain opcodes, possibly making contracts go over the 2300 gas limit * imposed by `transfer`, making them unable to receive funds via * `transfer`. {sendValue} removes this limitation. * * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more]. * * IMPORTANT: because control is transferred to `recipient`, care must be * taken to not create reentrancy vulnerabilities. Consider using * {ReentrancyGuard} or the * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]. */
/** * @dev Performs a Solidity function call using a low level `call`. A * plain`call` is an unsafe replacement for a function call: use this * function instead. * * If `target` reverts with a revert reason, it is bubbled up by this * function (like regular Solidity function calls). * * Returns the raw returned data. To convert to the expected return value, * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`]. * * Requirements: * * - `target` must be a contract. * - calling `target` with `data` must not revert. * * _Available since v3.1._ */
/** * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with * `errorMessage` as a fallback revert reason when `target` reverts. * * _Available since v3.1._ */
/** * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], * but also transferring `value` wei to `target`. * * Requirements: * * - the calling contract must have an ETH balance of at least `value`. * - the called Solidity function must be `payable`. * * _Available since v3.1._ */
/** * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but * with `errorMessage` as a fallback revert reason when `target` reverts. * * _Available since v3.1._ */
/** * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], * but performing a static call. * * _Available since v3.3._ */
/** * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], * but performing a static call. * * _Available since v3.3._ */
/** * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], * but performing a delegate call. * * _Available since v3.4._ */
/** * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], * but performing a delegate call. * * _Available since v3.4._ */
/** * @dev Searches a sorted `array` and returns the first index that contains * a value greater or equal to `element`. If no such index exists (i.e. all * values in the array are strictly less than `element`), the array length is * returned. Time complexity O(log n). * * `array` is expected to be sorted in ascending order, and to contain no * repeated elements. */
/** * @dev Deploys a contract using `CREATE2`. The address where the contract * will be deployed can be known in advance via {computeAddress}. * * The bytecode for a contract can be obtained from Solidity with * `type(contractName).creationCode`. * * Requirements: * * - `bytecode` must not be empty. * - `salt` must have not been used for `bytecode` already. * - the factory must have a balance of at least `amount`. * - if `amount` is non-zero, `bytecode` must have a `payable` constructor. */
/** * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the * `bytecodeHash` or `salt` will result in a new destination address. */
/** * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}. */
/** * @dev Receives and executes a batch of function calls on this contract. */
/** * @dev Returns an `AddressSlot` with member `value` located at `slot`. */
/** * @dev Returns an `BooleanSlot` with member `value` located at `slot`. */
/** * @dev Returns an `Bytes32Slot` with member `value` located at `slot`. */
/** * @dev Returns an `Uint256Slot` with member `value` located at `slot`. */
/** * @dev Converts a `uint256` to its ASCII `string` decimal representation. */
/** * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation. */
/** * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length. */
/** * @dev Returns the domain separator for the current chain. */
/** * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this * function returns the hash of the fully encoded EIP712 message for this domain. * * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example: * * ```solidity * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode( *     keccak256("Mail(address to,string contents)"), *     mailTo, *     keccak256(bytes(mailContents)) * ))); * address signer = ECDSA.recover(digest, signature); * ``` */
/** * @dev Returns the address that signed a hashed message (`hash`) with * `signature`. This address can then be used for verification purposes. * * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures: * this function rejects them by requiring the `s` value to be in the lower * half order, and the `v` value to be either 27 or 28. * * IMPORTANT: `hash` _must_ be the result of a hash operation for the * verification to be secure: it is possible to craft signatures that * recover to arbitrary addresses for non-hashed data. A safe way to ensure * this is by receiving a hash of the original message (which may otherwise * be too long), and then calling {toEthSignedMessageHash} on it. */
/** * @dev Overload of {ECDSA-recover} that receives the `v`, * `r` and `s` signature fields separately. */
/** * @dev Returns an Ethereum Signed Message, created from a `hash`. This * produces hash corresponding to the one signed with the * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] * JSON-RPC method as part of EIP-191. * * See {recover}. */
/** * @dev Returns an Ethereum Signed Typed Data, created from a * `domainSeparator` and a `structHash`. This produces hash corresponding * to the one signed with the * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] * JSON-RPC method as part of EIP-712. * * See {recover}. */
/** * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree * defined by `root`. For this, a `proof` must be provided, containing * sibling hashes on the branch from the leaf to the root of the tree. Each * pair of leaves and each pair of pre-images are assumed to be sorted. */
/** * @dev Returns whether an address is allowed to withdraw their funds. To be * implemented by derived contracts. * @param payee The destination address of the funds. */
/** * @dev Stores the sent amount as credit to be withdrawn. * @param payee The destination address of the funds. */
/** * @dev Withdraw accumulated balance for a payee, forwarding all gas to the * recipient. * * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. * Make sure you trust the recipient, or are either following the * checks-effects-interactions pattern or using {ReentrancyGuard}. * * @param payee The address whose funds will be withdrawn and transferred to. */
/** * @return The current state of the escrow. */
/** * @return The beneficiary of the escrow. */
/** * @dev Stores funds that may later be refunded. * @param refundee The address funds will be sent to if a refund occurs. */
/** * @dev Allows for the beneficiary to withdraw their funds, rejecting * further deposits. */
/** * @dev Allows for refunds to take place, rejecting further deposits. */
/** * @dev Withdraws the beneficiary's funds. */
/** * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a * 'payee' argument, but we ignore it here since the condition is global, not per-payee. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev Returns true if `account` supports the {IERC165} interface, */
/** * @dev Returns true if `account` supports the interface defined by * `interfaceId`. Support for {IERC165} itself is queried automatically. * * See {IERC165-supportsInterface}. */
/** * @dev Returns a boolean array where each value corresponds to the * interfaces passed in and whether they're supported or not. This allows * you to batch check interfaces for a contract where your expectation * is that some interfaces may not be supported. * * See {IERC165-supportsInterface}. * * _Available since v3.4._ */
/** * @dev Returns true if `account` supports all the interfaces defined in * `interfaceIds`. Support for {IERC165} itself is queried automatically. * * Batch-querying can lead to gas savings by skipping repeated checks for * {IERC165} support. * * See {IERC165-supportsInterface}. */
/** * @notice Query if a contract implements an interface, does not check ERC165 support * @param account The address of the contract to query for support of an interface * @param interfaceId The interface identifier, as specified in ERC-165 * @return true if the contract at account indicates support of the interface with * identifier interfaceId, false otherwise * @dev Assumes that account contains a contract that supports ERC165, otherwise * the behavior of this method is undefined. This precondition can be checked * with {supportsERC165}. * Interface identification is specified in ERC-165. */
/** * @dev See {IERC165-supportsInterface}. */
/** * @dev Registers the contract as an implementer of the interface defined by * `interfaceId`. Support of the actual ERC165 interface is automatic and * registering its interface id is not required. * * See {IERC165-supportsInterface}. * * Requirements: * * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`). */
/** * See {IERC1820Implementer-canImplementInterfaceForAddress}. */
/** * @dev Declares the contract as willing to be an implementer of * `interfaceHash` for `account`. * * See {IERC1820Registry-setInterfaceImplementer} and * {IERC1820Registry-interfaceHash}. */
/** * @dev Returns true if this contract implements the interface defined by * `interfaceId`. See the corresponding * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] * to learn more about how these ids are created. * * This function call must use less than 30 000 gas. */
/** * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract * implements `interfaceHash` for `account`. * * See {IERC1820Registry-setInterfaceImplementer}. */
/** * @dev Sets `newManager` as the manager for `account`. A manager of an * account is able to set interface implementers for it. * * By default, each account is its own manager. Passing a value of `0x0` in * `newManager` will reset the manager to this initial state. * * Emits a {ManagerChanged} event. * * Requirements: * * - the caller must be the current manager for `account`. */
/** * @dev Returns the manager for `account`. * * See {setManager}. */
/** * @dev Sets the `implementer` contract as ``account``'s implementer for * `interfaceHash`. * * `account` being the zero address is an alias for the caller's address. * The zero address can also be used in `implementer` to remove an old one. * * See {interfaceHash} to learn how these are created. * * Emits an {InterfaceImplementerSet} event. * * Requirements: * * - the caller must be the current manager for `account`. * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not * end in 28 zeroes). * - `implementer` must implement {IERC1820Implementer} and return true when * queried for support, unless `implementer` is the caller. See * {IERC1820Implementer-canImplementInterfaceForAddress}. */
/** * @dev Returns the implementer of `interfaceHash` for `account`. If no such * implementer is registered, returns the zero address. * * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 * zeroes), `account` will be queried for support of it. * * `account` being the zero address is an alias for the caller's address. */
/** * @dev Returns the interface hash for an `interfaceName`, as defined in the * corresponding * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP]. */
/** *  @notice Updates the cache with whether the contract implements an ERC165 interface or not. *  @param account Address of the contract for which to update the cache. *  @param interfaceId ERC165 interface for which to update the cache. */
/** *  @notice Checks whether a contract implements an ERC165 interface or not. *  If the result is not cached a direct lookup on the contract address is performed. *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling *  {updateERC165Cache} with the contract address. *  @param account Address of the contract to check. *  @param interfaceId ERC165 interface to check. *  @return True if `account` implements `interfaceId`, false otherwise. */
/** *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache. *  @param account Address of the contract to check. *  @param interfaceId ERC165 interface to check. *  @return True if `account` implements `interfaceId`, false otherwise. */
/** * @dev Returns the largest of two numbers. */
/** * @dev Returns the smallest of two numbers. */
/** * @dev Returns the average of two numbers. The result is rounded towards * zero. */
/** * @dev Returns the downcasted uint128 from uint256, reverting on * overflow (when the input is greater than largest uint128). * * Counterpart to Solidity's `uint128` operator. * * Requirements: * * - input must fit into 128 bits */
/** * @dev Returns the downcasted uint64 from uint256, reverting on * overflow (when the input is greater than largest uint64). * * Counterpart to Solidity's `uint64` operator. * * Requirements: * * - input must fit into 64 bits */
/** * @dev Returns the downcasted uint32 from uint256, reverting on * overflow (when the input is greater than largest uint32). * * Counterpart to Solidity's `uint32` operator. * * Requirements: * * - input must fit into 32 bits */
/** * @dev Returns the downcasted uint16 from uint256, reverting on * overflow (when the input is greater than largest uint16). * * Counterpart to Solidity's `uint16` operator. * * Requirements: * * - input must fit into 16 bits */
/** * @dev Returns the downcasted uint8 from uint256, reverting on * overflow (when the input is greater than largest uint8). * * Counterpart to Solidity's `uint8` operator. * * Requirements: * * - input must fit into 8 bits. */
/** * @dev Converts a signed int256 into an unsigned uint256. * * Requirements: * * - input must be greater than or equal to 0. */
/** * @dev Returns the downcasted int128 from int256, reverting on * overflow (when the input is less than smallest int128 or * greater than largest int128). * * Counterpart to Solidity's `int128` operator. * * Requirements: * * - input must fit into 128 bits * * _Available since v3.1._ */
/** * @dev Returns the downcasted int64 from int256, reverting on * overflow (when the input is less than smallest int64 or * greater than largest int64). * * Counterpart to Solidity's `int64` operator. * * Requirements: * * - input must fit into 64 bits * * _Available since v3.1._ */
/** * @dev Returns the downcasted int32 from int256, reverting on * overflow (when the input is less than smallest int32 or * greater than largest int32). * * Counterpart to Solidity's `int32` operator. * * Requirements: * * - input must fit into 32 bits * * _Available since v3.1._ */
/** * @dev Returns the downcasted int16 from int256, reverting on * overflow (when the input is less than smallest int16 or * greater than largest int16). * * Counterpart to Solidity's `int16` operator. * * Requirements: * * - input must fit into 16 bits * * _Available since v3.1._ */
/** * @dev Returns the downcasted int8 from int256, reverting on * overflow (when the input is less than smallest int8 or * greater than largest int8). * * Counterpart to Solidity's `int8` operator. * * Requirements: * * - input must fit into 8 bits. * * _Available since v3.1._ */
/** * @dev Converts an unsigned uint256 into a signed int256. * * Requirements: * * - input must be less than or equal to maxInt256. */
/** * @dev Returns the addition of two unsigned integers, with an overflow flag. * * _Available since v3.4._ */
/** * @dev Returns the substraction of two unsigned integers, with an overflow flag. * * _Available since v3.4._ */
/** * @dev Returns the multiplication of two unsigned integers, with an overflow flag. * * _Available since v3.4._ */
/** * @dev Returns the division of two unsigned integers, with a division by zero flag. * * _Available since v3.4._ */
/** * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. * * _Available since v3.4._ */
/** * @dev Returns the addition of two unsigned integers, reverting on * overflow. * * Counterpart to Solidity's `+` operator. * * Requirements: * * - Addition cannot overflow. */
/** * @dev Returns the subtraction of two unsigned integers, reverting on * overflow (when the result is negative). * * Counterpart to Solidity's `-` operator. * * Requirements: * * - Subtraction cannot overflow. */
/** * @dev Returns the multiplication of two unsigned integers, reverting on * overflow. * * Counterpart to Solidity's `*` operator. * * Requirements: * * - Multiplication cannot overflow. */
/** * @dev Returns the integer division of two unsigned integers, reverting on * division by zero. The result is rounded towards zero. * * Counterpart to Solidity's `/` operator. * * Requirements: * * - The divisor cannot be zero. */
/** * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), * reverting when dividing by zero. * * Counterpart to Solidity's `%` operator. This function uses a `revert` * opcode (which leaves remaining gas untouched) while Solidity uses an * invalid opcode to revert (consuming all remaining gas). * * Requirements: * * - The divisor cannot be zero. */
/** * @dev Returns the subtraction of two unsigned integers, reverting with custom message on * overflow (when the result is negative). * * CAUTION: This function is deprecated because it requires allocating memory for the error * message unnecessarily. For custom revert reasons use {trySub}. * * Counterpart to Solidity's `-` operator. * * Requirements: * * - Subtraction cannot overflow. */
/** * @dev Returns the integer division of two unsigned integers, reverting with custom message on * division by zero. The result is rounded towards zero. * * Counterpart to Solidity's `%` operator. This function uses a `revert` * opcode (which leaves remaining gas untouched) while Solidity uses an * invalid opcode to revert (consuming all remaining gas). * * Counterpart to Solidity's `/` operator. Note: this function uses a * `revert` opcode (which leaves remaining gas untouched) while Solidity * uses an invalid opcode to revert (consuming all remaining gas). * * Requirements: * * - The divisor cannot be zero. */
/** * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), * reverting with custom message when dividing by zero. * * CAUTION: This function is deprecated because it requires allocating memory for the error * message unnecessarily. For custom revert reasons use {tryMod}. * * Counterpart to Solidity's `%` operator. This function uses a `revert` * opcode (which leaves remaining gas untouched) while Solidity uses an * invalid opcode to revert (consuming all remaining gas). * * Requirements: * * - The divisor cannot be zero. */
/** * @dev Returns the multiplication of two signed integers, reverting on * overflow. * * Counterpart to Solidity's `*` operator. * * Requirements: * * - Multiplication cannot overflow. */
/** * @dev Returns the integer division of two signed integers. Reverts on * division by zero. The result is rounded towards zero. * * Counterpart to Solidity's `/` operator. * * Requirements: * * - The divisor cannot be zero. */
/** * @dev Returns the subtraction of two signed integers, reverting on * overflow. * * Counterpart to Solidity's `-` operator. * * Requirements: * * - Subtraction cannot overflow. */
/** * @dev Returns the addition of two signed integers, reverting on * overflow. * * Counterpart to Solidity's `+` operator. * * Requirements: * * - Addition cannot overflow. */
/** * @dev Adds a key-value pair to a map, or updates the value for an existing * key. O(1). * * Returns true if the key was added to the map, that is if it was not * already present. */
/** * @dev Removes a key-value pair from a map. O(1). * * Returns true if the key was removed from the map, that is if it was present. */
/** * @dev Returns true if the key is in the map. O(1). */
/** * @dev Returns the number of key-value pairs in the map. O(1). */
/** * @dev Returns the key-value pair stored at position `index` in the map. O(1). * * Note that there are no guarantees on the ordering of entries inside the * array, and it may change when more entries are added or removed. * * Requirements: * * - `index` must be strictly less than {length}. */
/** * @dev Tries to returns the value associated with `key`.  O(1). * Does not revert if `key` is not in the map. */
/** * @dev Returns the value associated with `key`.  O(1). * * Requirements: * * - `key` must be in the map. */
/** * @dev Same as {_get}, with a custom error message when `key` is not in the map. * * CAUTION: This function is deprecated because it requires allocating memory for the error * message unnecessarily. For custom revert reasons use {_tryGet}. */
/** * @dev Adds a key-value pair to a map, or updates the value for an existing * key. O(1). * * Returns true if the key was added to the map, that is if it was not * already present. */
/** * @dev Removes a value from a set. O(1). * * Returns true if the key was removed from the map, that is if it was present. */
/** * @dev Returns true if the key is in the map. O(1). */
/** * @dev Returns the number of elements in the map. O(1). */
/** * @dev Returns the element stored at position `index` in the set. O(1). * Note that there are no guarantees on the ordering of values inside the * array, and it may change when more values are added or removed. * * Requirements: * * - `index` must be strictly less than {length}. */
/** * @dev Tries to returns the value associated with `key`.  O(1). * Does not revert if `key` is not in the map. * * _Available since v3.4._ */
/** * @dev Returns the value associated with `key`.  O(1). * * Requirements: * * - `key` must be in the map. */
/** * @dev Same as {get}, with a custom error message when `key` is not in the map. * * CAUTION: This function is deprecated because it requires allocating memory for the error * message unnecessarily. For custom revert reasons use {tryGet}. */
/** * @dev Add a value to a set. O(1). * * Returns true if the value was added to the set, that is if it was not * already present. */
/** * @dev Removes a value from a set. O(1). * * Returns true if the value was removed from the set, that is if it was * present. */
/** * @dev Returns true if the value is in the set. O(1). */
/** * @dev Returns the number of values on the set. O(1). */
/** * @dev Returns the value stored at position `index` in the set. O(1). * * Note that there are no guarantees on the ordering of values inside the * array, and it may change when more values are added or removed. * * Requirements: * * - `index` must be strictly less than {length}. */
/** * @dev Add a value to a set. O(1). * * Returns true if the value was added to the set, that is if it was not * already present. */
/** * @dev Removes a value from a set. O(1). * * Returns true if the value was removed from the set, that is if it was * present. */
/** * @dev Returns true if the value is in the set. O(1). */
/** * @dev Returns the number of values in the set. O(1). */
/** * @dev Returns the value stored at position `index` in the set. O(1). * * Note that there are no guarantees on the ordering of values inside the * array, and it may change when more values are added or removed. * * Requirements: * * - `index` must be strictly less than {length}. */
/** * @dev Add a value to a set. O(1). * * Returns true if the value was added to the set, that is if it was not * already present. */
/** * @dev Removes a value from a set. O(1). * * Returns true if the value was removed from the set, that is if it was * present. */
/** * @dev Returns true if the value is in the set. O(1). */
/** * @dev Returns the number of values in the set. O(1). */
/** * @dev Returns the value stored at position `index` in the set. O(1). * * Note that there are no guarantees on the ordering of values inside the * array, and it may change when more values are added or removed. * * Requirements: * * - `index` must be strictly less than {length}. */
/** * @dev Add a value to a set. O(1). * * Returns true if the value was added to the set, that is if it was not * already present. */
/** * @dev Removes a value from a set. O(1). * * Returns true if the value was removed from the set, that is if it was * present. */
/** * @dev Returns true if the value is in the set. O(1). */
/** * @dev Returns the number of values on the set. O(1). */
/** * @dev Returns the value stored at position `index` in the set. O(1). * * Note that there are no guarantees on the ordering of values inside the * array, and it may change when more values are added or removed. * * Requirements: * * - `index` must be strictly less than {length}. */
