@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Burn some channel , reduce total circulation .
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s RGB allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending RGB on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for RGB allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe RGB transfer function , just in case if rounding error causes pool to not have enough RGB .
Update dev address by the previous dev .
use as the exchanger from barista
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account . The ` spender ` contract function ` receive Approval ( . . . ) ` is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Un Chairman ) .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s Test allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending Test on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for test allocation .
Withdraw LP tokens from Master Chef .
Safe Test transfer function , just in case if rounding error causes pool to not have enough test .
Update dev address by the previous dev .
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
@ dev Returns true if and only if the function is running in the constructor
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
CORE token is pausable
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s SEPPUKU allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending SEPPUKU on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for SEPPUKU allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe SEPPUKU transfer function , just in case if rounding error causes pool to not have enough SEPPUKU .
Update dev address by the previous dev .
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Only allows to earn some extra yield from non core tokens
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
@ dev average dollar value of vault share token
@ dev Sets the decimals of a token to storage if not already set , and returns the decimals value of the token . Prefer using this function over get Decimals ( ) , to avoid forgetting to set decimals in local storage . @ param token The token type @ return token Decimals The decimals of the token
@ dev Get the balance of a user @ param token The token type @ param user The user ' s address @ return The balance
@ dev Get the decimals of a token , read from the constant list , storage , or from token . decimals ( ) . Prefer using get Set Decimals when possible . @ param token The token type @ return token Decimals The decimals of the token
@ dev save storage access by declaring token decimal constants @ param token The token type @ return token decimals
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Calculate output given exact input
Calculate input given exact output
Normalize coin to 1e18
Normalize coin to original decimals
Contract balance of coin normalized to 1e18
Converter helper to int256
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
solhint disable previous line no empty blocks
For common use case ( e . g . Write trading record on Ethereum ) :
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Prod addresses address constant public transfers Proxy = 0x882d80D3a191859d64477eb78Cca46599307ec1C ; address payable constant public rebalancing Set Exchange Issuance Module = 0xde697AC56b1b D9C0987c08911020f2341e274813 ; address payable constant public rebalancing Set Issuance Module = 0x DA6786379FF88729264d31d472FA917f5E561443 ; address payable constant public c Tokenaddress To Address White List = 0x5BA020a8835ed40936941562bd F42D66F65fc00f ;
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
Register a new operator Must only be called once by the operator itself when it starts operating Requires a previous approve ( ) call to the ERC20 t BTC contract to allow the token transfer
Returns the length of the ` operator List ` array Used by clients to iterate over the operators when searching for the lowest fees
Simple withdraw operation for the ERC20 t BTC tokens held in the contract in behalf of an operator
Simple deposit operation Requires a previous approve ( ) call to the ERC20 t BTC contract to allow the token transfer
Set the fees of the operator calling the function
Set the amount of LN bound BTC that the operator makes available This number is completely unverified and can be faked
Set the url of the operator node
TODO : Send LN invoice to operator through an off chain medium to lower costs ( not by much tho ) Create a new swap from t BTC to LN , locking the t BTC tokens required from the swap in the contract Requires a previous approve ( ) call to the ERC20 t BTC contract to allow the token transfer Note that this function doesn ' t reduce the ` t BTC Balance ` of the provider , as doing otherwise would open the provider to griefing attacks , so , if two users create swaps concurrently , a provider may not have enough liquidity to serve both of them This can be solved by having the users listen to the ` TBTC2LN Swap Created ` events emitted by the contract
Reverts a swap , returning the locked t BTC tokens to the user , if the pre image hasn ' t been revealed within 1 hour of swap creation This could happen because either the operator is unresponsive and hasn ' t paid the invoice on time or because the user hasn ' t revealed the pre image before the timeout ( it could also happen if the operator malfunctions and doesn ' t claim it ' s payment after the swap , but this should never happen )
Finalizes a successful swap by transferring the locked t BTC tokens to the operator This is called by the swap operator and requires the preimage of the HTLC used in the lightning invoice , which is revealed when the invoice is accepted by the user ' s wallet node
The calculations done in this function may overflow or underflow Extra care must be taken to ensure that the results from this function are only used in situations where this is fine
Creates a new LN > t BTC swap Locks the ETH security deposit in the contract This function doesn ' t reduce the ` ln Balance ` of an operator , see the comment on the definition of ` create TBTC2LN Swap ` for more details on this
Abort swap if the operator has been unresponsive and hasn ' t locked the t BTC tokens before the timeout ( or the user hasn ' t sent a payment request ) Returns the security deposit to the user
Lock t BTC tokens and make them claimable by the user if they provide a valid pre image before timeout
Revert swap if , once the operator has locked the t BTC tokens , the user hasn ' t revealed the pre image before timeout It will also transfer the security deposit provided by the user on swap creation to the operator , in order to : Make up for the fees that the operator spent sending the transaction that called ` operator Lock TBTC For LN2TBTC Swap ` Make up for the opportunity cost on the operator ' s side of having their t BTC locked for some time
Claim the t BTC tokens locked by the operator , revealing the HTLC preimage and thus allowing the operator to finalise the LN payment
The calculations done in this function may overflow or underflow Extra care must be taken to ensure that the results from this function are only used in situations where this is fine
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
@ notice burn ` amount ` token from ` account ` . Must only be called by the owner ( Master Chef ) .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s FOBO allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending FOB Os on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for FOBO allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe FOBO transfer function , just in case if rounding error causes pool to not have enough FOB Os .
Update dev address by the previous dev .
in case of rounding errors converting between vault tokens and underlying value
Safe RLY transfer function , just in case pool does not have enough RLY due to rounding error
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
transfer accumulated yield to treasury , update total Deposits to ensure available Yield following harvest is 0 , and increase accumulated rally rewards harvest fails if we ' re unable to fund rewards
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
naps stuff
Returns the number of naps token to boost
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Getters to allow the same blacklist to be used also by other contracts ( including upgraded Tether )
Forward ERC20 methods to upgraded contract if this one is deprecated
Forward ERC20 methods to upgraded contract if this one is deprecated
Forward ERC20 methods to upgraded contract if this one is deprecated
Forward ERC20 methods to upgraded contract if this one is deprecated
Forward ERC20 methods to upgraded contract if this one is deprecated
deprecate current contract if favour of a new one
Issue a new amount of tokens these tokens are deposited into the owner address @ param amount Number of tokens to be issued
Redeem tokens . These tokens are withdrawn from the owner address if the balance must be enough to cover the redeem or the call will fail . @ param amount Number of tokens to be issued
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Only allows to earn some extra yield from non core tokens
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
@ dev average dollar value of vault share token
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
设置治理地址 ， 必须验证原来治理地址的签名
设置控制器地址 ， 必须验证治理地址的签名
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap 设置多少保险库允许被借 设置所需的最低限度 ， 以保持低成本的小额取款
抵押代币给Strategy合约进行理财 ， 代币路径如下 vault > controller > strategy
存款 可以追加存款
No rebalance implementation for lower fees and faster swaps 取款
Strategy . harvest 触发分红 （ ）
用户可领取的分红
某个用户在路上的分红 （ 也就是分红还没有从挖矿合约领取 . 只能看到 ， 无法领取 ， 等harvest触发后就可以领取了 ）
用户领取分红
1 . msg . sender admin approve many token to this contract
1 . msg . sender admin approve many token to this contract
solhint disable previous line no empty blocks
Transfer recipient recives amount fee
Transfer From recipient recives amount , sender ' s account is debited amount + fee
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = ADMINISTRATIVE FUNCTIONS = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
solhint disable previous line no empty blocks
no zeros for decimals necessary
take back unclaimed tokens of any type sent by mistake
transfer , mint and burn are the only functions where the balances are modified , so it is there that the snapshots are updated . Note that the update happens before the balance change , with the pre modified value . The same is true for the total supply and mint and burn .
overrides
modified for decimals from uint8 to uint256
solhint disable previous line no empty blocks
External function call This function adjust how many token will be produced by each block , eg : change Amount Per Block ( 100 ) will set the produce rate to 100 block .
Update reward variables of the given pool to be up to date .
Audit user ' s reward to be up to date
External function call This function increase user ' s productivity and updates the global productivity . the users ' actual share percentage will calculated by : Formula : user productivity global productivity
External function call This function will decreases user ' s productivity by value , and updates the global productivity it will record which block this is happenning and accumulates the area of ( productivity time )
Returns how much a user could earn plus the giving block number .
External function call When user calls this function , it will calculate how many token will mint to user from his productivity time Also it calculates global token supply from last time the user mint to this time .
Returns how many productivity a user has and global has .
Returns the current gorss product rate .
called once by the factory at time of deployment
update reserves and , on the first call per block , price accumulators
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k )
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
force balances to match reserves
force reserves to match balances
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
encode a uint112 as a UQ112x112
divide a UQ112x112 by a uint112 , returning a UQ112x112
@ notice manager can reclaim unsold tokens
@ notice The amount of KP4R remaining
@ notice purchase KP4R at the current unit price
@ notice calculates the amount purchasedfor a given amount of eth
@ notice claim you eth
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s wtrx allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending wtrx on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for WTRX allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe wtrx transfer function , just in case if rounding error causes pool to not have enough wtrx .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Kiwi Chef ) .
solhint disable previous line no empty blocks
Transfer recipient recives amount fee
Transfer From recipient recives amount , sender ' s account is debited amount + fee
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s CEFI allocation point . Can only be called by the owner .
Return the number of active blocks over the given from to to block .
View function to see pending CEFI on frontend .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to CEFI Staker for CEFI allocation .
Withdraw LP tokens from CEFI Staker .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe CEFI transfer function , just in case if rounding error causes pool to not have enough CEF Is .
Update dev address by the previous dev .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the staker .
no zeros for decimals necessary
take back unclaimed tokens of any type sent by mistake
wrapper functions to allow testing
Internal and Private
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Transfer recipient recives amount fee
Transfer From recipient recives amount , sender ' s account is debited amount + fee
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
@ notice Burns ` amount ` token from ` account ` . Must only be called by the owner .
lock team coin
lock minting coin
Total number of tokens currently in the vault
Number of tokens that are still locked
Claim tokens for reserve wallets
Transfer all tokens on this contract back to the owner
solhint disable previous line no empty blocks
Update balance and or total supply snapshots before the values are modified . This is implemented in the before Token Transfer hook , which is executed for mint , burn , and transfer operations .
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Only allows to withdraw non core strategy tokens ~ this is over and above normal yield
solhint disable previous line no empty blocks
Set ownership Locked flag to lock contract owner forever
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Admin can change APY % ( or reward rate % ) Changing reward rate percent will also affect user ' s pending earnings Be careful while using this function
emergency unstake without caring about pending earnings pending earnings will be lost set to 0 if used emergency unstake
function to allow admin to claim other ERC20 tokens sent to this contract ( by mistake ) Admin cannot transfer out staking tokens from this smart contract Admin can transfer out reward tokens from this address once admin Claimable Time has reached
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s MINK allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending MIN Ks on frontend .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for MINK allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe mink transfer function , just in case if rounding error causes pool to not have enough MIN Ks .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
Calculate the number of days from 1970 01 01 to year month day using the date conversion algorithm from http : aa . usno . navy . mil faq docs JD Formula . php and subtracting the offset 2440588 so that 1970 01 01 is day 0 days = day 32075 + 1461 ( year + 4800 + ( month 14 ) 12 ) 4 + 367 ( month 2 ( month 14 ) 12 12 ) 12 3 ( ( year + 4900 + ( month 14 ) 12 ) 100 ) 4 offset
Calculate year month day from the number of days since 1970 01 01 using the date conversion algorithm from http : aa . usno . navy . mil faq docs JD Formula . php and adding the offset 2440588 so that 1970 01 01 is day 0 int L = days + 68569 + offset int N = 4 L 146097 L = L ( 146097 N + 3 ) 4 year = 4000 ( L + 1 ) 1461001 L = L 1461 year 4 + 31 month = 80 L 2447 dd = L 2447 month 80 L = month 11 month = month + 2 12 L year = 100 ( N 49 ) + year + L
1 = Monday , 7 = Sunday
this func need admin role . grant Role and revoke Role need admin role
function Set Roles ( bytes32 role Type , address [ ] calldata addresses , bool [ ] calldata set To ) public { set Roles ( role Type , addresses , set To ) ; } Issue burn


claim reward Note : 需要提前提前把奖励token转进来
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Pausing transfers of the token
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Only allows to earn some extra yield from non core tokens
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
@ dev average dollar value of vault share token
Change the owner of the token contract
Change the treasury address
Change the percent going to depositors for WETH
Change the staking address
Change the zs Token address
Change the percent going to stakers for WETH
Standard function transfer similar to ERC20 transfer with no data . Added due to backwards compatibility reasons .
Function that is called when a user or another contract wants to transfer funds .
Standard function transfer similar to ERC20 transfer with no data . Added due to backwards compatibility reasons .
function that is called when transaction target is an address
function that is called when transaction target is a contract
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
Converts ETH to YFMS and sends new YFMS to the sender
if the soft cap isn ' t met and the presale period ends ( 7 days ) enable users to buy back their ether .
Function to withdraw raised ETH ( staggered withdrawals ) Only the contract owner can call this function
Function to burn remaining YFMS ( sale must be over to call ) Only the contract owner can call this function
Starts the sale Only the contract owner can call this function
Function to query the supply of YFMS in the contract
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
encode a uint112 as a UQ112x112
divide a UQ112x112 by a uint112 , returning a UQ112x112
called once by the factory at time of deployment
update reserves and , on the first call per block , price accumulators
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k )
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
force balances to match reserves
force reserves to match balances
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s CITY allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending CIT Ys on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Travel Agency for CITY allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe city transfer function , just in case if rounding error causes pool to not have enough CIT Ys .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
Sets dev fee divisor 255 = 0 . 4 % , 100 = 1 % , 50 = 2 % , 40 = 2 . 5 % etc
Sets dev address
Set how long a lottery should run for does not apply any active lotteries , only to the next one
Sets price for each ticket
Processes lottery
In case the contract somehow fails to start new lottery after the previous one ends
In case the contract somehow fails to start new lottery after the previous one ends
Name your wallet
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
The init function inputs a list of owners and the number of signatures that are required before a transaction is executed . Owners list must be in ascending address order . Required sigs must be greater than 0 and less than or equal to number of owners . Chain ID prevents replay across chains This function can only be run one time
Allow ETH to be sent to this contract
solhint disable previous line no empty blocks
only default token withdrawals allowed
Check if a token can be withdrawn by its id .
This is called by ` swap Parity Token ( ) ` to ensure the targeted vault can accept specific ERC 721 tokens .
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
solhint disable previous line no empty blocks
be calculated on off chain .
be calculated on off chain .
returns sorted token addresses , used to handle return values from pairs sorted in this order
calculates the CREATE2 address for a pair without making any external calls
fetches and sorts the reserves for a pair
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
performs chained get Amount Out calculations on any number of pairs
performs chained get Amount In calculations on any number of pairs
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
Assumed that caller checks against available funds in vault
function balance Of ( address account ) public override returns ( uint256 ) { return balances [ account ] ; }
Emergency drain in case of a bug Adds all funds to owner to refund people Designed to be as simple as possible
Sends all avaibile balances and mints LP tokens Possible ways this could break addressed 1 ) Multiple calls and resetting amounts addressed with boolean 2 ) Failed WETH wrapping unwrapping addressed with checks 3 ) Failure to create LP tokens , addressed with checks 4 ) Unacceptable division errors . Addressed with multiplications by 1e18 5 ) Pair not set impossible since its set in constructor
Possible ways this could break addressed 1 ) No ageement to terms added require 2 ) Adding liquidity after generaion is over added require 3 ) Overflow from uint impossible there isnt that much ETH aviable 4 ) Depositing 0 not an issue it will just add 0 to tally
Possible ways this could break addressed 1 ) Accessing before event is over and resetting eth contributed added require 2 ) No uniswap pair impossible at this moment because of the LP Generation Completed bool 3 ) LP per unit is 0 impossible checked at generation function
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Can only stop deposited
UNSAFE : No slippage protection , should not be called directly
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s Zcdw allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending Zcdw on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for zcdw allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe Zcdw transfer function , just in case if rounding error causes pool to not have enough zcdw .
Update dev address by the previous dev .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the minter ( Vox Master ) .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
solhint disable previous line no empty blocks
Token holders can stake their tokens using this function @ param tokens number of tokens to stake
Owners can send the funds to be distributed to stakers using this function @ param tokens number of tokens to distribute
Private function to register payouts
Stakers can claim their pending rewards using this function
Get the pending rewards of the staker @ param staker the address of the staker
Stakers can un stake the staked tokens using this function @ param tokens the number of tokens to withdraw
Private function to calculate 1 % percentage
Get the number of tokens staked by a staker @ param staker the address of the staker
Get the FAIRY balance of the token holder @ param user the address of the token holder
Internal
solhint disable previous line no empty blocks
Creates a new token type and assings initial Supply to minter
Has a hardcap of 1 % per trading fees distribution in one week .
Function allows liquidity to be migrated , after 10 weeks lockup preventing abuse .
Migrates liquidity to new location , assuming the 3 months lockup has passed preventing abuse .
Withdraw all funds , normally used when migrating strategies
Controller only function for creating additional rewards from dust
Custom logic in here for how much the plates allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
No rebalance implementation for lower fees and faster swaps
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s allocation point . Can only be called by the owner .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Withdraw without the rewards at any time , still streamed
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Buffer to process small withdrawals
Strategies will request funds from controller Controller should have checked that 1 ) Strategy is authorized to pull funds 2 ) Amount requested is below set cap
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ dev Returns true if and only if the function is running in the constructor
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Converts ETH to Tokens 1and sends new Tokens to the sender
Only the contract owner can call this function
Only the contract owner can call this function
Starts the sale Only the contract owner can call this function
Function to query the supply of Tokens in the contract
solhint disable previous line no empty blocks
NOTE : In MYSTIC , proposal Index ! = proposal Id
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender = proposal . proposer
can only ragequit if the latest proposal you voted YES on has been processed
@ notice Creates ` amount ` token to ` to ` . Must only be called by Digester .
@ notice transfers Ownership of the Token contract . Called only by the owner ( Digester ) which in turn is owned by the Timelock which is owned by the Governor . Can only be change by proposals .
@ notice Overrides every transfer function to include the registry of Votes .
COPIED FROM https : github . com compound finance compound protocol blob master contracts Governance Comp . sol Copyright 2020 Compound Labs , Inc . Redistribution and use in source and binary forms , with or without modification , are permitted provided that the following conditions are met : 1 . Redistributions of source code must retain the above copyright notice , this list of conditions and the following disclaimer . 2 . Redistributions in binary form must reproduce the above copyright notice , this list of conditions and the following disclaimer in the documentation and or other materials provided with the distribution . 3 . Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission . THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS " AS IS " AND ANY EXPRESS OR IMPLIED WARRANTIES , INCLUDING , BUT NOT LIMITED TO , THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED . IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT , INDIRECT , INCIDENTAL , SPECIAL , EXEMPLARY , OR CONSEQUENTIAL DAMAGES ( INCLUDING , BUT NOT LIMITED TO , PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES ; LOSS OF USE , DATA , OR PROFITS ; OR BUSINESS INTERRUPTION ) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY , WHETHER IN CONTRACT , STRICT LIABILITY , OR TORT ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE , EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Set ownership Locked flag to lock contract owner forever
solhint disable previous line no empty blocks
Borrow exact amount of token output , can have variable USD input up to in Max
Borrow variable amount of token , given exact USD input
Repay variable amount of token given exact output amount in USD
Repay variable amount of USD , given exact amount of token input
UNSAFE : No slippage protection , should not be called directly
UNSAFE : No slippage protection , should not be called directly
How much system liquidity is provided by this asset
6500 blocks in average day decimals YFMB balance of reward Pool blocks 10000 daily Reward ( in hundredths of % ) = reward Per Block
% of reward pool to be distributed each day in hundredths of % 150 = = 1 . 50 %
Function that will get balance of a certain stake
Function that returns User ' s pending rewards
Function that updates YFMB ETH LP pool
Function that lets user stake YFMB ETH LP
Function that will allow user to claim rewards
Function that lets user unstake YFMB ETH LP in system
Function that will turn on emergency withdraws
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
Emergency Flow
Block Governance Forver ! ! !
Set Governance Address
Burn Tokens
Wrong Send AGN
Wrong Send Various Tokens
Wrong Send ETH
solhint disable previous line no empty blocks
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
No rebalance implementation for lower fees and faster swaps
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
The functions below surve no real purpose . Even if one were to approve another to spend tokens on their behalf , those tokens will still only be transferable when the token contract is not paused .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s WILDY allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending WILD Ys on frontend .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for WILDY allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe wildy transfer function , just in case if rounding error causes pool to not have enough WILD Ys .
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Override functions that change user balance
in case of rounding errors converting between vault tokens and underlying value
Safe RLY transfer function , just in case pool does not have enough RLY due to rounding error
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
transfer accumulated yield to treasury , update total Deposits to ensure available Yield following harvest is 0 , and increase accumulated rally rewards harvest fails if we ' re unable to fund rewards
Internal transfer , only can be called by this contract
@ notice Create ` minted Amount ` tokens and send it to ` target ` @ param target Address to receive the tokens @ param minted Amount the amount of tokens it will receive
@ notice ` freeze ? Prevent | Allow ` ` target ` from sending & receiving tokens @ param target Address to be frozen @ param freeze either to freeze it or not
@ notice Allow users to buy tokens for ` new Buy Price ` eth and sell tokens for ` new Sell Price ` eth @ param new Sell Price Price the users can sell to the contract @ param new Buy Price Price users can buy from the contract
@ notice Buy tokens from contract by sending ether
@ notice Sell ` amount ` tokens to contract @ param amount amount of tokens to be sold
solhint disable previous line no empty blocks
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Pausing transfers of the token
Transfer recipient recives amount fee
Transfer From recipient recives amount , sender ' s account is debited amount + fee
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
https : github . com quantstamp sushiswap security review 3 . 4 fixed .
[ Event ] All in one function to play a round NOTE : Use more gas than estimated since random is used .
Contract getters
Internal functions
solhint disable previous line no empty blocks
Be able to receive tokens . This should only ever be called as a result of a user generated deposit call .
Check if a token can be withdrawn by its id .
Deposit any number of tokens into the vault , receiving ERC 20 wrapped tokens in response .
Withdraw any token from the vault .
Attempts to withdraw the tokens with the specified ids . Only the stored tokens will be withdrawn .
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ERC20 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ERC20 Transfer function
ERC20 Approve function
ERC20 Transfer From function
Internal transfer function which includes the Fee
Admin can change APY % ( or reward rate % ) Changing reward rate percent will also affect user ' s pending earnings Be careful while using this function
emergency unstake without caring about pending earnings pending earnings will be lost set to 0 if used emergency unstake
function to allow admin to claim other ERC20 tokens sent to this contract ( by mistake ) Admin cannot transfer out staking tokens from this smart contract Admin can transfer out reward tokens from this address once admin Claimable Time has reached
Function to start the Game Only the owner can call this function The game can ' t be stopped after this action
Return the value of ' game Started ' to know if the game has started
Get the right amount when playing ( or not ) the game With possible burn and reward
Play , and if winning multiply by 10 if you lose and the sender address is not the liquidity pool then the amount doesn ' t change
Return the random amount to burn based on the amount we want to transfer . Between 1 % and 10 % .
Play the game : 1 % chance of winning and returning true .
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Withdraw all funds , normally used when migrating strategies
Controller only function for creating additional rewards from dust
@ dev Returns true if and only if the function is running in the constructor
@ notice Mints ` amount ` token to ` to ` . Must only be called by the owner ( Smart Contract ) .
@ notice Burns ` amount ` token from ` from ` . Delegates reserved . Must only be called by the owner ( Smart Contract ) .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
Update dev address by the previous dev .
solhint disable previous line no empty blocks
Set the migrator contract . Can only be called by the owner .
Migrate lp token to another lp contract . Can be called by anyone . We trust that migrator contract is good .
Return reward multiplier over the given from to to block .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to C42Liquidity Minter for C42 allocation .
Withdraw LP tokens from C42C42Liquidity Minter .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe c42 transfer function , just in case if rounding error causes pool to not have enough C42s .
Update dev address by the previous dev .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the minter role .
transfers delegate authority when sending a token . https : medium . com bulldax finance sushiswap delegation double spending bug 5adcc7b3830f
Safe piggy transfer function , just in case if rounding error causes pool to not have enough Piggy Token .
Update funding pool
Update funding pool
Return the pool pending balance .
claim wpc . every can call this function , but transfer token to
transfer , mint and burn are the only functions where the balances are modified , so it is there that the snapshots are updated . Note that the update happens before the balance change , with the pre modified value . The same is true for the total supply and mint and burn .
overrides
solhint disable previous line no empty blocks
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
modified for decimals from uint8 to uint256
returns sorted token addresses , used to handle return values from pairs sorted in this order
calculates the CREATE2 address for a pair without making any external calls
fetches and sorts the reserves for a pair
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
performs chained get Amount Out calculations on any number of pairs
performs chained get Amount In calculations on any number of pairs
1 time token mint creation function . Tokens are only minted during contract creation , and cannot be done again .
solhint disable previous line no empty blocks
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Can only stop deposited
UNSAFE : No slippage protection , should not be called directly
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
reduce sender balance and Token total supply
reduce address balance and Token total supply
increase sender balance and Token total supply
calculate the amount of tokens an address can use
override function using can Transfer on the sender address
transfer tokens from one address to another
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
solhint disable previous line no empty blocks
transfer Ownership to other address
requires enough gas for execution
Function to handle eth and token transfers tokens are transferred to user ETH are transferred to current owner
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] = = 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) spender The address which will spend the funds . added Value The amount of tokens to increase the allowance by .
Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] = = 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) spender The address which will spend the funds . subtracted Value The amount of tokens to decrease the allowance by .
Change the ETH to IO rate
to The address that will receive the minted tokens . amount The amount of tokens to mint . A boolean that indicates if the operation was successful .
function to stop the ICO
function to resume ICO
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
NOTE : In MSTX , proposal Index ! = proposal Id
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender = proposal . proposer
can only ragequit if the latest proposal you voted YES on has been processed
calculates the CREATE2 address for a pair without making any external calls
returns sorted token addresses , used to handle return values from pairs sorted in this order
solhint disable previous line no empty blocks
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Bartender ) .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( ) .
solhint disable previous line no empty blocks
make private
make private
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Override functions that change user balance
function registered Pool Tokens ( ) public view returns ( address [ ] memory ) ; function user Rewards ( address user , address protocol , address [ ] calldata reward Tokens ) external view returns ( uint256 [ ] memory ) { uint256 [ ] memory amounts = new uint256 [ ] ( reward Tokens . length ) ; Reward Balance storage rb = reward Balances [ user ] ; require ( rb . next Distribution = = reward Distributions . length , " Reward Distributions : rewards not calculated " ) ; for ( uint256 i = 0 ; i < amounts . length ; i + + ) { address rt = reward Tokens [ i ] ; amounts [ i ] = rb . rewards By Protocol [ protocol ] . amounts [ rt ] ; } return amounts ; } function reward Balance Of ( address user , address pool Token , address reward Token ) public view returns ( uint256 ) { Reward Balance storage rb = reward Balances [ user ] ; User Protocol Rewards storage upr = rb . rewards By Protocol [ pool Token ] ; uint256 balance = upr . amounts [ reward Token ] ; uint256 next = rb . next Distribution ; while ( next < reward Distributions . length ) { Reward Token Distribution storage d = reward Distributions [ next ] ; next + + ; uint256 sh = rb . shares [ d . pool Token ] ; if ( sh = = 0 | | pool Token ! = d . pool Token ) continue ; uint256 distr Amount = d . amounts [ reward Token ] ; balance = balance . add ( distr Amount . mul ( sh ) . div ( d . total Shares ) ) ; } return balance ; }
function set User Cap ( address protocol , address user , uint256 cap ) public only Capper { protocols [ protocol ] . user Cap [ user ] = cap ; emit User Cap Changed ( protocol , user , cap ) ; } function set User Cap ( address protocol , address [ ] calldata users , uint256 [ ] calldata caps ) external only Capper { require ( users . length = = caps . length , " Savings Module : arrays length not match " ) ; for ( uint256 i = 0 ; i < users . length ; i + + ) { protocols [ protocol ] . user Cap [ users [ i ] ] = caps [ i ] ; emit User Cap Changed ( protocol , users [ i ] , caps [ i ] ) ; } }
ERC20
Reserve some percentage of HOLY token distribution ( e . g . initially , 10 % of tokens are reserved for future pools to be added )
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s HOLY allocation point . Can only be called by the owner .
View function to see pending HOL Ys on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Holy Knight for HOLY allocation .
Withdraw LP tokens from Holy Knight .
Withdraw LP tokens without caring about rewards . EMERGENCY ONLY .
Safe holyheld token transfer function , just in case if rounding error causes pool to not have enough HOL Ys .
Update dev address by the previous dev .
Update treasury address by the previous treasury .
Send yield on an LP token to the treasury
Send yield amount realized from holding LP tokens to the treasury
Now handle deposits into Aave
Change the owner of the token contract
Used to change the fee rates
Change the treasury address
Transfer recipient recives amount fee
Transfer From recipient recives amount , sender ' s account is debited amount + fee
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Calculate the number of days from 1970 01 01 to year month day using the date conversion algorithm from http : aa . usno . navy . mil faq docs JD Formula . php and subtracting the offset 2440588 so that 1970 01 01 is day 0 days = day 32075 + 1461 ( year + 4800 + ( month 14 ) 12 ) 4 + 367 ( month 2 ( month 14 ) 12 12 ) 12 3 ( ( year + 4900 + ( month 14 ) 12 ) 100 ) 4 offset
Calculate year month day from the number of days since 1970 01 01 using the date conversion algorithm from http : aa . usno . navy . mil faq docs JD Formula . php and adding the offset 2440588 so that 1970 01 01 is day 0 int L = days + 68569 + offset int N = 4 L 146097 L = L ( 146097 N + 3 ) 4 year = 4000 ( L + 1 ) 1461001 L = L 1461 year 4 + 31 month = 80 L 2447 dd = L 2447 month 80 L = month 11 month = month + 2 12 L year = 100 ( N 49 ) + year + L
1 = Monday , 7 = Sunday
solhint disable previous line no empty blocks
设置治理地址 ， 必须验证原来治理地址的签名
设置目标token
设置控制器地址 ， 必须验证治理地址的签名
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap 设置多少保险库允许被借 设置所需的最低限度 ， 以保持低成本的小额取款
抵押代币给Strategy合约进行理财 ， 代币路径如下 vault > controller > strategy
存款 可以追加存款
No rebalance implementation for lower fees and faster swaps 取款
Strategy . harvest 触发分红 （ ）
用户可领取的分红
某个用户在路上的分红 （ 也就是分红还没有从挖矿合约领取 . 只能看到 ， 无法领取 ， 等harvest触发后就可以领取了 ）
用户领取分红
JGO合约初始化函数 ( 合约所有人地址 , 当前供应量 , 代币总量 )
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
will pause the system
unpause satellitepool before unpause ( )
reduce sender balance and Token total supply
reduce address balance and Token total supply
increase sender balance and Token total supply
calculate the amount of tokens an address can use
override function using can Transfer on the sender address
transfer tokens from one address to another
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Phase 1 : Deposit Withdraw ether from contributors
Phase 2 : Fund is closed
Phase 3 : Fund is completed
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
function ERC20Preset Minter Pauser init unchained ( string memory name , string memory symbol ) internal initializer { Removed args to prevent compiler warning
@ notice set the owner ( Master Chef or Router ) . only call it once .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
Borrow exact amount of token output , can have variable USD input up to in Max
Borrow variable amount of token , given exact USD input
Repay variable amount of token given exact output amount in USD
Repay variable amount of USD , given exact amount of token input
UNSAFE : No slippage protection , should not be called directly
UNSAFE : No slippage protection , should not be called directly
How much system liquidity is provided by this asset
6500 blocks in average day decimals YFMB balance of reward Pool blocks 10000 daily Reward ( in hundredths of % ) = reward Per Block
% of reward pool to be distributed each day in hundredths of % 150 = = 1 . 50 %
Function that will get balance of a certain stake
Function that returns User ' s pending rewards
Function that updates LUCO ETH LP pool
Function that lets user stake LUCO ETH LP
Function that will allow user to claim rewards
Function that lets user unstake YFMB ETH LP in system
Function that will turn on emergency withdraws
solhint disable previous line no empty blocks
Change the owner of the token contract
Change the treasury address
Change the percent going to depositors for WETH
Change the staking address
Change the zs Token address
Change the percent going to stakers for WETH
allows governance to start or stop grassland
allows governance to update open Period
allows governance to update blocks Between
Opens the Grassland and collects ERC20
Leave the grassland . Claim back your ERC20s .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
event New Carpet King ( address carpet King , uint new Life , bytes data ) ;
Standard function transfer similar to ERC20 transfer with no data . Added due to backwards compatibility reasons .
function that is called when transaction target is an address
function that is called when transaction target is a contract
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Now handle deposits into the strategy
Stop start all deposits , no timelock required
A function used in case of strategy failure , possibly due to bug in theplatform our strategy is using , governance can stop using it quick
Change the owner of the token contract
Change the treasury address
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Burn some channel , reduce total circulation .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s OCT allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block , yield halved when reach point .
View function to see pending OC Ts on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Channel for OCT allocation .
Withdraw LP tokens from Channel .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe channel transfer function , just in case if rounding error causes pool to not have enough OC Ts .
Update dev address by the previous dev .
Used for community governance .
Used for community governance .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add rule for funds locking after sale
Add rule for funds unlocking of the fund raiser after sale
Lock sale detail changes in future
Add supported currencies and their rate w . r . t token on sale rate Token = price of one satoshi of the token in terms of token to be raised 1e18 1 BNSD = 0 . 00021 ETH = > 1e18 BNSD Satoshi = 0 . 00021 1e18 ETH satoshi = > 1 BNSD Satoshi = 0 . 00021 ETH satoshi = > rate Token = 0 . 00021 1e18 = 21 1e13 rate Token for BNSD ETH pair = 21 1e13 ;
Check if user can deposit specfic amount of funds to the pool
Check max a user can deposit right now
Check if deposit is enabled for a pool
Deposit ICO tokens to start a pool for ICO .
Deposit Airdrop tokens anytime before end of the sale .
Withdraw extra airdrop tokens Possible only if no one added liquidity to one of the pools
Deposit LP tokens for a sale .
Withdraw LP tokens from a sale after it ' s over = > Automatically claims rewards and airdrops also
Withdraw airdrop tokens accumulated over one or more than one sale .
Move LP tokens from one sale to another directly = > Automatically claims rewards and airdrops also
Deposit ICO tokens for a use case as reserve .
Withdraw extra unsold ICO tokens or extra deposited tokens .
Fetch extra ICO tokens available .
Deposit tokens to a pool for ICO .
Vote your favourite ICO project .
Check amount of ICO tokens withdrawable by user till now public
Withdraw ICO tokens after sale is over based on distribution rules .
Check amount of ICO tokens withdrawable by user till now
Check amount of ICO tokens withdrawable by reserve user till now
Withdraw ICO tokens for various use cases as per the schedule promised on provided address .
Withdraw raised funds after sale is over as per the schedule promised
Update dev address by initiating with the previous dev .
Update temp pool owner address by initiating with the previous pool owner .
Claim pool ownership with new address
Update fee , can never be more than 3 % .
To generate a new invite code
To invalidate an invite code
To add or update a staking pool with weight
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ERC20 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ERC20 Transfer function
ERC20 Approve function
ERC20 Transfer From function
Internal transfer function which includes the Fee
The fallback function for this contract .
@ dev Returns list of owners . @ return List of owner addresses .
Generates the message to sign given the output destination address and amount . includes this contract ' s address and a nonce for replay protection . One option to independently verify : https : leventozturk . com engineering sha3 and select keccak
@ erc20contract : the erc20 contract address . @ destination : the token or ether receiver address . @ value : the token or ether value , in wei or token minimum unit . @ vs , rs , ss : the signatures
c Erc20Contract is just like the destination
Confirm that the signature triplets ( v1 , r1 , s1 ) ( v2 , r2 , s2 ) . . . authorize a spend of this contract ' s funds to the given destination address .
Confirm the addresses as distinct owners of this contract .
solhint disable previous line no empty blocks
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Victim info
Victim actions
Pool info
Pool actions
Service methods
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
solhint disable previous line no empty blocks
stake visibility is public as overriding Uni V2Token Wrapper ' s stake ( ) function
Using 9 decimals as we ' re square rooting the votes
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
to get back want ( 3CRV )
solhint disable previous line no empty blocks
transfer , mint and burn are the only functions where the balances are modified , so it is there that the snapshots are updated . Note that the update happens before the balance change , with the pre modified value . The same is true for the total supply and mint and burn .
overrides
NOTE : In Mystic , proposal Index ! = proposal Id
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender = proposal . proposer
can only ragequit if the latest proposal you voted YES on has been processed
modified for decimals from uint8 to uint256
Custom logic in here for how much the vaults allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
no zeros for decimals necessary
take back unclaimed tokens of any type sent by mistake
Helper functions for handling sending of reward token
Required cause coreflasharb contract doesnt make this easily retrievable
Set new contract address incase core devs change the flash arb contract
Return profitable strats array and reward tokens
Used to execute multiple profitable strategies , only use when there are multiple executable strats
Execute single profitable strat
Added to recover erc20 tokens
Converts ETH to Tokens 1and sends new Tokens to the sender
Only the contract owner can call this function
Only the contract owner can call this function
Starts the sale Only the contract owner can call this function
Function to query the supply of Tokens in the contract
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Mining Rig ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s SMT allocation point . Can only be called by the owner .
Set the migrator contract . Can only be called by the owner .
Migrate lp token to another lp contract . Can be called by anyone . We trust that migrator contract is good .
Return reward multiplier over the given from to to block .
View function to see pending SM Ts on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Mining Rig for SMT allocation .
Withdraw LP tokens from Mining Rig .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe smt transfer function , just in case if rounding error causes pool to not have enough SM Ts .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
returns sorted token addresses , used to handle return values from pairs sorted in this order
calculates the CREATE2 address for a pair without making any external calls
fetches and sorts the reserves for a pair
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
performs chained get Amount Out calculations on any number of pairs
performs chained get Amount In calculations on any number of pairs
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s WTRX allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending WTRX on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for WTRX allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe WTRX transfer function , just in case if rounding error causes pool to not have enough WTRX .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
ensure the address is valid .
send tokens
handles presale burn + staking burn .
approve tokens
transfer from
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = ADMINISTRATIVE FUNCTIONS = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
https : github . com quantstamp sushiswap security review 3 . 4 fixed .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
Withdraw all funds , normally used when migrating strategies
Controller only function for creating additional rewards from dust
Returns price in BASED per share e18
@ param amount amount in BASED to deposit
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Override functions that change user balance
solhint disable previous line no empty blocks
wrapper functions to allow testing
The functions below surve no real purpose . Even if one were to approve another to spend tokens on their behalf , those tokens will still only be transferable when the token contract is not paused .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Standard function transfer similar to ERC20 transfer with no data . Added due to backwards compatibility reasons .
the epitome of " This is gonna hurt me more than it ' s gonna hurt you . "
Function that is called when a user or another contract wants to transfer funds .
Standard function transfer similar to ERC20 transfer with no data . Added due to backwards compatibility reasons .
function that is called when transaction target is an address
function that is called when transaction target is a contract
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Admin
Minter
Transfer Agent
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Override functions that change user balance
solhint disable previous line no empty blocks
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
encode a uint112 as a UQ112x112
divide a UQ112x112 by a uint112 , returning a UQ112x112
called once by the factory at time of deployment
update reserves and , on the first call per block , price accumulators
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k )
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
force balances to match reserves
force reserves to match balances
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Custom logic in here for how much the token allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
price per share
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
ERC20Interface function ' s implementation
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev function that burns an amount of the token from caller account @ param amount The amount that will be burnt can be used from account owner
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s LAMBO allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending LAMBO on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for LAMBO allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe LAMBO transfer function , just in case if rounding error causes pool to not have enough LAMBO .
Update dev address by the previous dev .
NOTE : In MSTX , proposal Index ! = proposal Id
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender = proposal . proposer
can only ragequit if the latest proposal you voted YES on has been processed
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
emergency withdraw without caring about pending earnings pending earnings will be lost set to 0 if used emergency withdraw
function to allow admin to claim other ERC20 tokens sent to this contract ( by mistake ) Admin cannot transfer out deposit tokens from this smart contract Admin can transfer out reward tokens from this address once admin Claimable Time has reached
solhint disable previous line no empty blocks
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
If true , no changes can be made
THE ONLY ADMIN FUNCTIONS vvvv After this is called , no changes can be made
Can only be called once to set token address
Set reward value that has high APY , can ' t be called if make Unchangeable ( ) was called
Cap token price at 1 eth , can ' t be called if make Unchangeable ( ) was called
Attribute LPV1 rewards , only during the first hour .
Get amount of tethered rewards
solhint disable previous line no empty blocks
find the tail id of player , for swap to another area
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s PROFIT allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending PROFIT on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for PROFIT allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe PROFIT transfer function , just in case if rounding error causes pool to not have enough PROFIT .
Update dev address by the previous dev .
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
Override functions that change user balance
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = ADMINISTRATIVE FUNCTIONS = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
solhint disable previous line no empty blocks
6500 blocks in average day decimals Luco balance of reward Pool blocks 10000 daily Reward ( in hundredths of % ) = reward Per Block
% of reward pool to be distributed each day in hundredths of % 150 = = 1 . 50 %
Function that will get balance of a certain stake
Function that returns User ' s pending rewards
Function that updates LUCO ETH LP pool
Function that lets user stake LUCO ETH LP
Function that will allow user to claim rewards
Function that lets user unstake Luco ETH LP in system
Function that will turn on emergency withdraws
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Farmer ) .
transfer Ownership to other address
requires enough gas for execution
Function to handle eth and token transfers tokens are transferred to user ETH are transferred to current owner
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Increase the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] = = 0 . To increment allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) spender The address which will spend the funds . added Value The amount of tokens to increase the allowance by .
Decrease the amount of tokens that an owner allowed to a spender . approve should be called when allowed [ spender ] = = 0 . To decrement allowed value is better to use this function to avoid 2 calls ( and wait until the first transaction is mined ) spender The address which will spend the funds . subtracted Value The amount of tokens to decrease the allowance by .
Change the ETH to IO rate
to The address that will receive the minted tokens . amount The amount of tokens to mint . A boolean that indicates if the operation was successful .
function to stop the ICO
function to resume ICO
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
https : github . com quantstamp sushiswap security review 3 . 4 fixed .
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
1 time token mint creation function . Tokens are only minted during contract creation , and cannot be done again .
ensure the address is valid .
send tokens
approve tokens
transfer from
can only burn from the deployer address .
transfer ownership to a new address .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
in case of rounding errors converting between vault tokens and underlying value
Safe RLY transfer function , just in case pool does not have enough RLY due to rounding error
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
transfer accumulated yield to treasury , update total Deposits to ensure available Yield following harvest is 0 , and increase accumulated rally rewards harvest fails if we ' re unable to fund rewards
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
transfer , mint and burn are the only functions where the balances are modified , so it is there that the snapshots are updated . Note that the update happens before the balance change , with the pre modified value . The same is true for the total supply and mint and burn .
overrides
solhint disable previous line no empty blocks
encode a uint112 as a UQ112x112
divide a UQ112x112 by a uint112 , returning a UQ112x112
returns sorted token addresses , used to handle return values from pairs sorted in this order
calculates the CREATE2 address for a pair without making any external calls
fetches and sorts the reserves for a pair
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
performs chained get Amount Out calculations on any number of pairs
= = = = = = = = = = VIEWS = = = = = = = = = =
= = = = = = = = = = MUTATIVE FUNCTIONS = = = = = = = = = =
= = = = = = = = = = RESTRICTED FUNCTIONS = = = = = = = = = =
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
returns sorted token addresses , used to handle return values from pairs sorted in this order
calculates the CREATE2 address for a pair without making any external calls
fetches and sorts the reserves for a pair
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
performs chained get Amount Out calculations on any number of pairs
performs chained get Amount In calculations on any number of pairs
solhint disable previous line no empty blocks
Internal transfer , only can be called by this contract
@ notice ` freeze ? Prevent | Allow ` ` target ` from sending & receiving tokens @ param target Address to be frozen @ param freeze either to freeze it or not
@ notice Allow users to buy tokens for ` new Buy Price ` eth and sell tokens for ` new Sell Price ` eth @ param new Sell Price Price the users can sell to the contract @ param new Buy Price Price users can buy from the contract
@ notice Buy tokens from contract by sending ether
@ notice Sell ` amount ` tokens to contract @ param amount amount of tokens to be sold
Internal Mint Function Only
reduce sender balance and Token total supply
reduce address balance and Token total supply
increase sender balance and Token total supply
calculate the amount of tokens an address can use
override function using can Transfer on the sender address
transfer tokens from one address to another
in case of rounding errors converting between vault tokens and underlying value
Safe RLY transfer function , just in case pool does not have enough RLY due to rounding error
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
transfer accumulated yield to treasury , update total Deposits to ensure available Yield following harvest is 0 , and increase accumulated rally rewards harvest fails if we ' re unable to fund rewards
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s CITY allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending CIT Ys on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Travel Agency for CITY allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe city transfer function , just in case if rounding error causes pool to not have enough CIT Ys .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
Function to start the Game Only the owner can call this function The game can ' t be stopped after this action
Return the value of ' game Started ' to know if the game has started
Get the right amount when playing ( or not ) the game With possible burn and reward
Play , and if winning multiply by 10 if you lose and the sender address is not the liquidity pool then the amount doesn ' t change
Return the random amount to burn based on the amount we want to transfer . Between 1 % and 10 % .
Play the game : 1 % chance of winning and returning true .
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
solhint disable previous line no empty blocks
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
Only callers that hold FRT can rebase .
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s VOTE allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending VOTE on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for VOTE allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe VOTE transfer function , just in case if rounding error causes pool to not have enough VOTE .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
naps stuff
Returns the number of naps token to boost
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
Assumed that caller checks against available funds in vault
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Change the owner of the token contract
Change the treasury address
Change the percent going to depositors for WETH
Change the staking address
Change the zs Token address
Change the percent going to stakers for WETH
called once by the factory at time of deployment
update reserves and , on the first call per block , price accumulators
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k )
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
force balances to match reserves
force reserves to match balances
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
encode a uint112 as a UQ112x112
divide a UQ112x112 by a uint112 , returning a UQ112x112
no zeros for decimals necessary
take back unclaimed tokens of any type sent by mistake
solhint disable previous line no empty blocks
Now handle deposits into Aave
Change the owner of the token contract
Used to change the fee rates
Change the treasury address
solhint disable previous line no empty blocks
@ notice governance , via token holders , can decide to burn tokens .
Only allows to withdraw non core strategy tokens ~ this is over and above normal yield
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
This function is for dev address migrate all balance to a multi sig address
Custom logic in here for how much the plates allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
can be overridden to disallow withdraw for some token
solhint disable previous line no empty blocks
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Pausing transfers of the token
Add assets to farm @ param token Address address of the token asset @ param amount amount of tokens to deposit
Add more deposits to already running farm @ param token Address address of the token asset @ param amount amount of tokens to deposit
Withdraw accumulated yield @ param token Address address of the token asset @ required must pay yield claim fee
Withdraw any amount of tokens , the contract will update the farming @ param token Address address of the token asset @ param amount amount of tokens to deposit
Start staking @ param token Address address of the token asset @ param amount amount of tokens to deposit
Add more deposits to already running farm @ param token Address address of the token asset @ param amount amount of tokens to deposit
Claim reward and staked tokens @ required user must be a staker @ required must be claimable
Claim reward and staked tokens @ required user must be a staker @ required must be claimable
Query to get the pending yield @ param token Address address of the token asset
Query to get the active farm of the user @ param farming asset token address
Query to get the total farming of the user @ param farming asset token address
Query to get the time of last farming of user
Query to get total earned rewards from particular farming @ param farming asset token address
Add supported tokens @ param token Address address of the token asset @ param farming Rate rate applied for farming yield to produce @ required only owner or governance contract
Remove tokens if no longer supported @ param token Address address of the token asset @ required only owner or governance contract
Change farming rate of the supported token @ param token Address address of the token asset @ param new Farming Rate new rate applied for farming yield to produce @ required only owner or governance contract
Change Yield collection fee @ param fee fee to claim the yield @ required only owner or governance contract
Query to get the pending reward
Query to get the active stake of the user
Query to get the total stakes of the user
Query to get the time of last stake of user
Query to get total earned rewards from stake
Query to get the staking rate
Query to get the staking rate you staked at
Query to get the staking period you staked at
Query to get the staking time left
Change staking rate @ param new Staking Rate new rate applied for staking @ required only owner or governance contract
Change the staking period @ param seconds number of seconds to stake ( n days = n 24 60 60 ) @ required only callable by owner or governance contract
Change the staking claim fee @ param fee claim fee in weis @ required only callable by owner or governance contract
Internal function to add new deposit
Internal function to add to existing deposit
Internal function to add token
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
solhint disable previous line no empty blocks
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
Calculate the number of days from 1970 01 01 to year month day using the date conversion algorithm from http : aa . usno . navy . mil faq docs JD Formula . php and subtracting the offset 2440588 so that 1970 01 01 is day 0 days = day 32075 + 1461 ( year + 4800 + ( month 14 ) 12 ) 4 + 367 ( month 2 ( month 14 ) 12 12 ) 12 3 ( ( year + 4900 + ( month 14 ) 12 ) 100 ) 4 offset
Calculate year month day from the number of days since 1970 01 01 using the date conversion algorithm from http : aa . usno . navy . mil faq docs JD Formula . php and adding the offset 2440588 so that 1970 01 01 is day 0 int L = days + 68569 + offset int N = 4 L 146097 L = L ( 146097 N + 3 ) 4 year = 4000 ( L + 1 ) 1461001 L = L 1461 year 4 + 31 month = 80 L 2447 dd = L 2447 month 80 L = month 11 month = month + 2 12 L year = 100 ( N 49 ) + year + L
1 = Monday , 7 = Sunday
use to give reward only
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s CITY allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending CIT Ys on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Travel Agency for CITY allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe city transfer function , just in case if rounding error causes pool to not have enough CIT Ys .
Update dev address by the previous dev .
= = Pool = =
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Pausing transfers of the token
The functions below surve no real purpose . Even if one were to approve another to spend tokens on their behalf , those tokens will still only be transferable when the token contract is not paused .
creates the token to be sold . override this method to have crowdsale of a specific mintable token .
fallback function can be used to buy tokens
low level token purchase function
send ether to the fund collection wallet override to create custom fund forwarding mechanisms
@ return true if the transaction can buy tokens
@ return true if crowdsale event has ended
overriding Crowdsale # valid Purchase to add extra cap logic @ return true if investors can buy at the moment
overriding Crowdsale # has Ended to add cap logic @ return true if crowdsale event has ended
NOTE : In MSTX , proposal Index ! = proposal Id
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender = proposal . proposer
can only ragequit if the latest proposal you voted YES on has been processed
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
modified for decimals from uint8 to uint256
this func need admin role . grant Role and revoke Role need admin role
function Set Roles ( bytes32 role Type , address [ ] calldata addresses , bool [ ] calldata set To ) public { set Roles ( role Type , addresses , set To ) ; } Issue burn


claim reward

claim reward Note : 需要提前提前把奖励token转进来
call this when the locktime expired
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s SUSHI allocation point . Can only be called by the owner .
Set the migrator contract . Can only be called by the owner .
Migrate lp token to another lp contract . Can be called by anyone . We trust that migrator contract is good .
Return reward multiplier over the given from to to block .
View function to see pending SUSH Is on frontend .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for SUSHI allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe sushi transfer function , just in case if rounding error causes pool to not have enough SUSH Is .
Update dev address by the previous dev .
= = = = = = = = = = = = Internal Functions = = = = = = = = = = = =
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
user data accessors
@ notice For practical purposes , contract will not check whitelist status while calculating burn . @ param staking Amount Total Amount contract will attempt to retrieve from user ( pre burn ) @ param days To Stake Number of days to stake & lock .
@ notice Used for manual testing uses owner ' s deposited funds to generate a small staked lot with short expiry time No interest is generated and contract state is updated to reduce the amount of available rewards .
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
solhint disable previous line no empty blocks
@ notice Create governance proposal
@ notice Terminate the crowd proposal , send back staked UNI tokens
@ notice Vote for the governance proposal with all delegated votes
Drop off your chickens at the Hatchery
Collect your chickens from the Hatchery , and any extras .
Safely transfer chickens to the specified address ( up to existing balance ) .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
encode a uint112 as a UQ112x112
divide a UQ112x112 by a uint112 , returning a UQ112x112
called once by the factory at time of deployment
update reserves and , on the first call per block , price accumulators
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k )
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
force balances to match reserves
force reserves to match balances
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Constructor
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
@ dev Returns true if and only if the function is running in the constructor
Converts ETH to Tokens 1and sends new Tokens to the sender
Only the contract owner can call this function
Only the contract owner can call this function
Only the contract owner can call this function
Function to query the supply of Tokens in the contract
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
ARI must have 8 decimals 1e8 instead of 1e18 typical
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
checks that the address is valid
transfer tokens
performs presale burn
approve spend
transfer from
UDONTOKEN
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account . The ` spender ` contract function ` receive Approval ( . . . ) ` is then executed
215 UDON STAKE Tokens per 1 ETH after bonus
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ dev get the balance of a user . @ param token The token type @ return The balance
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
all Jas paid Jas , see get Jas ( ) , if should wait , need return 0
Admin Controls
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
skaing cost 10 %
unskaing cost 20 %
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s Zcdw allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending Zcdw on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for zcdw allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe Zcdw transfer function , just in case if rounding error causes pool to not have enough zcdw .
Update dev address by the previous dev .
TEST HELPER FUNCTION : : DO NOT USE
TEST HELPER FUNCTION : : DO NOT USE
TEST HELPER FUNCTION : : DO NOT USE
TEST HELPER FUNCTION : : DO NOT USE
init proxy storage keccak ( " init Proxy ( address ) " ) = 0x9c020061db1dca9a2fe5f403df21b007d709f637dc551ec80c85d1ef74cb5a4d
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
Custom logic in here for how much the plates allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
solhint disable previous line no empty blocks
@ dev Returns true if and only if the function is running in the constructor
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
send token 0x Eeeee Eeee Ee Eee Ee Ee Eee EE Eeeee Eeeeeeee E Ee E if you want to withdraw ether 20 % of profit will be sent to the De Fi Education Project for creation and publication of more code like this
raw Fulfill Randomness is called by VRF Coordinator when it receives a valid VRF proof . raw Fulfill Randomness then calls fulfill Randomness , after validating the origin of the call
Converts ETH to Tokens 1and sends new Tokens to the sender
Only the contract owner can call this function
Only the contract owner can call this function
Starts the sale Only the contract owner can call this function
Function to query the supply of Tokens in the contract
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
solhint disable previous line no empty blocks
允许投资的最大金额 保证有足够的资金用于提款
投资 ， 通过controller的earn调用 ， strategy的deposit方法 ， 进行投资
No rebalance implementation for lower fees and faster swaps
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s RLY allocation point . Can only be called by the owner .
update the rate at which RLY is allocated to rewards , can only be called by the owner
View function to see pending RL Ys on frontend .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date . No new RLY are minted , distribution is dependent on sufficient RLY tokens being sent to this contract
Deposit LP tokens to pool for RLY allocation .
Withdraw LP tokens from pool .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe RLY transfer function , just in case pool does not have enough RLY ; either rounding error or we ' re not supplying more rewards
for the purpose of rewards calculations , a user ' s balance is the total of what ' s in their wallet and what they have deposited in the rewards pool ( if it ' s active ) . transfer restriction ensures accuracy of this sum
in case of rounding errors converting between vault tokens and underlying value
Safe RLY transfer function , just in case pool does not have enough RLY due to rounding error
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
transfer accumulated yield to treasury , update total Deposits to ensure available Yield following harvest is 0 , and increase accumulated rally rewards harvest fails if we ' re unable to fund rewards
one way ticket and only callable once
override underlying transfer implementation ; YDV shares can only be transferred to from the liquidity rewards pool
in case of rounding errors converting between vault tokens and underlying value
Safe RLY transfer function , just in case pool does not have enough RLY due to rounding error
how much are our shares of the underlying vault worth relative to the deposit value ? returns value denominated in vault tokens
transfer accumulated yield to treasury , update total Deposits to ensure available Yield following harvest is 0 , and increase accumulated rally rewards harvest fails if we ' re unable to fund rewards
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH

@ notice converts number to string @ dev source : https : github . com provable things ethereum api blob master oraclize API 0 . 5 . sol # L1045 @ param i integer to convert @ return uint As String
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Standard ERC20 implementations Read
Write
Other admin , common and courtesy functions
Change Settlement Admin for daily settlements
Retrieve any ERC20 tokens accidentally sent to this contract for owner
solhint disable previous line no empty blocks
Reserve some percentage of HOLY token distribution ( e . g . initially , 10 % of tokens are reserved for future pools to be added )
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s HOLY allocation point . Can only be called by the owner .
View function to see pending HOL Ys on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date when lp Supply changes For every deposit withdraw harvest pool recalculates accumulated token value
Deposit LP tokens to Holy Knight for HOLY allocation .
Withdraw LP tokens from Holy Knight .
Withdraw LP tokens without caring about rewards . EMERGENCY ONLY .
Safe holyheld token transfer function , just in case if rounding error causes pool to not have enough HOL Ys .
Update dev address by the previous dev .
Update treasury address by the previous treasury .
Send yield on an LP token to the treasury have just address ( and not pid ) as agrument to be able to recover tokens that could be directly transferred and not present in pools
Send yield amount realized from holding LP tokens to the treasury
Get available token balance that can be put to treasury For pools with internal staking , all lp Token balance is contract ' s ( bacause user tokens are converted to pool . staked Holdable Token when depositing ) HOLY tokens themselves and user lp Tokens are protected by this check
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Brew Master ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s BEER allocation point . Can only be called by the owner .
Set the migrator contract . Can only be called by the owner .
Migrate lp token to another lp contract . Can be called by anyone . We trust that migrator contract is good .
Return reward multiplier over the given from to to block .
View function to see pending BEE Rs on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Brew Master for BEER allocation .
Withdraw LP tokens from Brew Master .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe beer transfer function , just in case if rounding error causes pool to not have enough BEE Rs .
Update dev address by the previous dev .
Control
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Burn some yfno reduce total circulation .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
transfer , mint and burn are the only functions where the balances are modified , so it is there that the snapshots are updated . Note that the update happens before the balance change , with the pre modified value . The same is true for the total supply and mint and burn .
overrides
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
incase of airdrop token
Set ownership Locked flag to lock contract owner forever
Total balance of token in both vault and corresponding strategy
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Called by Keeper to put deposited token into strategy
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
Shouldn ' t have any dangling HDCORE balance in the pool
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s FOBO allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending FOB Os on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for FOBO allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe FOBO transfer function , just in case if rounding error causes pool to not have enough FOB Os .
Update dev address by the previous dev .
@ dev Returns true if and only if the function is running in the constructor
The Memory map during the execution of this contract is as follows : [ 0x0 , 0x20 ) periodic column pedersen points x . [ 0x20 , 0x40 ) periodic column pedersen points y . [ 0x40 , 0x60 ) periodic column ecdsa generator points x . [ 0x60 , 0x80 ) periodic column ecdsa generator points y . [ 0x80 , 0xa0 ) trace length . [ 0xa0 , 0xc0 ) offset size . [ 0xc0 , 0xe0 ) half offset size . [ 0xe0 , 0x100 ) initial ap . [ 0x100 , 0x120 ) initial pc . [ 0x120 , 0x140 ) final ap . [ 0x140 , 0x160 ) final pc . [ 0x160 , 0x180 ) memory multi column perm perm interaction elm . [ 0x180 , 0x1a0 ) memory multi column perm hash interaction elm0 . [ 0x1a0 , 0x1c0 ) memory multi column perm perm public memory prod . [ 0x1c0 , 0x1e0 ) rc16 perm interaction elm . [ 0x1e0 , 0x200 ) rc16 perm public memory prod . [ 0x200 , 0x220 ) rc min . [ 0x220 , 0x240 ) rc max . [ 0x240 , 0x260 ) pedersen shift point . x . [ 0x260 , 0x280 ) pedersen shift point . y . [ 0x280 , 0x2a0 ) initial pedersen addr . [ 0x2a0 , 0x2c0 ) initial rc addr . [ 0x2c0 , 0x2e0 ) ecdsa sig config . alpha . [ 0x2e0 , 0x300 ) ecdsa sig config . shift point . x . [ 0x300 , 0x320 ) ecdsa sig config . shift point . y . [ 0x320 , 0x340 ) ecdsa sig config . beta . [ 0x340 , 0x360 ) initial ecdsa addr . [ 0x360 , 0x380 ) initial checkpoints addr . [ 0x380 , 0x3a0 ) final checkpoints addr . [ 0x3a0 , 0x3c0 ) trace generator . [ 0x3c0 , 0x3e0 ) oods point . [ 0x3e0 , 0x440 ) interaction elements . [ 0x440 , 0x2980 ) coefficients . [ 0x2980 , 0x3f40 ) oods values . end of input data [ 0x3f40 , 0x3f60 ) composition degree bound . [ 0x3f60 , 0x3f80 ) intermediate value cpu decode opcode rc bit 0 . [ 0x3f80 , 0x3fa0 ) intermediate value cpu decode opcode rc bit 1 . [ 0x3fa0 , 0x3fc0 ) intermediate value cpu decode opcode rc bit 2 . [ 0x3fc0 , 0x3fe0 ) intermediate value cpu decode opcode rc bit 4 . [ 0x3fe0 , 0x4000 ) intermediate value cpu decode opcode rc bit 3 . [ 0x4000 , 0x4020 ) intermediate value cpu decode opcode rc bit 9 . [ 0x4020 , 0x4040 ) intermediate value cpu decode opcode rc bit 5 . [ 0x4040 , 0x4060 ) intermediate value cpu decode opcode rc bit 6 . [ 0x4060 , 0x4080 ) intermediate value cpu decode opcode rc bit 7 . [ 0x4080 , 0x40a0 ) intermediate value cpu decode opcode rc bit 8 . [ 0x40a0 , 0x40c0 ) intermediate value npc reg 0 . [ 0x40c0 , 0x40e0 ) intermediate value cpu decode opcode rc bit 10 . [ 0x40e0 , 0x4100 ) intermediate value cpu decode opcode rc bit 11 . [ 0x4100 , 0x4120 ) intermediate value cpu decode opcode rc bit 12 . [ 0x4120 , 0x4140 ) intermediate value cpu decode opcode rc bit 13 . [ 0x4140 , 0x4160 ) intermediate value cpu decode opcode rc bit 14 . [ 0x4160 , 0x4180 ) intermediate value memory address diff 0 . [ 0x4180 , 0x41a0 ) intermediate value rc16 diff 0 . [ 0x41a0 , 0x41c0 ) intermediate value pedersen hash0 ec subset sum bit 0 . [ 0x41c0 , 0x41e0 ) intermediate value pedersen hash0 ec subset sum bit neg 0 . [ 0x41e0 , 0x4200 ) intermediate value pedersen hash1 ec subset sum bit 0 . [ 0x4200 , 0x4220 ) intermediate value pedersen hash1 ec subset sum bit neg 0 . [ 0x4220 , 0x4240 ) intermediate value pedersen hash2 ec subset sum bit 0 . [ 0x4240 , 0x4260 ) intermediate value pedersen hash2 ec subset sum bit neg 0 . [ 0x4260 , 0x4280 ) intermediate value pedersen hash3 ec subset sum bit 0 . [ 0x4280 , 0x42a0 ) intermediate value pedersen hash3 ec subset sum bit neg 0 . [ 0x42a0 , 0x42c0 ) intermediate value rc builtin value0 0 . [ 0x42c0 , 0x42e0 ) intermediate value rc builtin value1 0 . [ 0x42e0 , 0x4300 ) intermediate value rc builtin value2 0 . [ 0x4300 , 0x4320 ) intermediate value rc builtin value3 0 . [ 0x4320 , 0x4340 ) intermediate value rc builtin value4 0 . [ 0x4340 , 0x4360 ) intermediate value rc builtin value5 0 . [ 0x4360 , 0x4380 ) intermediate value rc builtin value6 0 . [ 0x4380 , 0x43a0 ) intermediate value rc builtin value7 0 . [ 0x43a0 , 0x43c0 ) intermediate value ecdsa signature0 doubling key x squared . [ 0x43c0 , 0x43e0 ) intermediate value ecdsa signature0 exponentiate generator bit 0 . [ 0x43e0 , 0x4400 ) intermediate value ecdsa signature0 exponentiate generator bit neg 0 . [ 0x4400 , 0x4420 ) intermediate value ecdsa signature0 exponentiate key bit 0 . [ 0x4420 , 0x4440 ) intermediate value ecdsa signature0 exponentiate key bit neg 0 . [ 0x4440 , 0x46e0 ) expmods . [ 0x46e0 , 0x49a0 ) denominator invs . [ 0x49a0 , 0x4c60 ) denominators . [ 0x4c60 , 0x4dc0 ) numerators . [ 0x4dc0 , 0x50a0 ) adjustments . [ 0x50a0 , 0x5160 ) expmod context .
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
GETTERS
footer functions
solhint disable previous line no empty blocks
Views
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s SEPPUKU allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending SEPPUKU on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for SEPPUKU allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe SEPPUKU transfer function , just in case if rounding error causes pool to not have enough SEPPUKU .
Update dev address by the previous dev .
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
Average dollar value of pool token
0 : DAI , 1 : USDC , 2 : USDT , 3 : 3Crv , 4 : BUSD , 5 : s USD , 6 : husd
@ dev convert from 3Crv to B Crv ( via DAI )
@ dev convert from SUSD to B Crv ( via DAI )
@ dev convert from HUSD to B Crv ( HUSD > 3Crv > DAI > B Crv )
@ dev convert from B Crv to HUSD ( B Crv > DAI > 3Crv > HUSD )
= = = = = = = = = = RESTRICTED FUNCTIONS = = = = = = = = = =
solhint disable previous line no empty blocks
Fee collection for any other token
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s CITY allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending CIT Ys on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Travel Agency for CITY allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe city transfer function , just in case if rounding error causes pool to not have enough CIT Ys .
Update dev address by the previous dev .
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
returns sorted token addresses , used to handle return values from pairs sorted in this order
calculates the CREATE2 address for a pair without making any external calls
fetches and sorts the reserves for a pair
given some amount of an asset and pair reserves , returns an equivalent amount of the other asset
given an input amount of an asset and pair reserves , returns the maximum output amount of the other asset
given an output amount of an asset and pair reserves , returns a required input amount of the other asset
performs chained get Amount Out calculations on any number of pairs
performs chained get Amount In calculations on any number of pairs
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
transfer Ownership to other address
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
This function is for dev address migrate all balance to a multi sig address
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
@ dev Creates ` amount ` token to ` to ` . Must only be called by the owner ( Gold Miner ) .
Transfer recipient recives amount fee
Transfer From recipient recives amount , sender ' s account is debited amount + fee
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
babylonian method ( https : en . wikipedia . org wiki Methods of computing square roots # Babylonian method )
encode a uint112 as a UQ112x112
divide a UQ112x112 by a uint112 , returning a UQ112x112
called once by the factory at time of deployment
update reserves and , on the first call per block , price accumulators
if fee is on , mint liquidity equivalent to 1 6th of the growth in sqrt ( k )
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
this low level function should be called from a contract which performs important safety checks
force balances to match reserves
force reserves to match balances
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s RLY allocation point . Can only be called by the owner .
update the rate at which RLY is allocated to rewards , can only be called by the owner
View function to see pending RL Ys on frontend .
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date . No new RLY are minted , distribution is dependent on sufficient RLY tokens being sent to this contract
Deposit LP tokens to pool for RLY allocation .
Withdraw LP tokens from pool .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe RLY transfer function , just in case pool does not have enough RLY ; either rounding error or we ' re not supplying more rewards
Adapted from https : github . com albertocuestacanada ERC20Permit blob master contracts ERC20Permit . sol
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
Used to swap any borrowed reserve over the debt limit to liquidate to ' token '
No rebalance implementation for lower fees and faster swaps
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s CITY allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending CIT Ys on frontend .
Update reward vairables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Travel Agency for CITY allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe city transfer function , just in case if rounding error causes pool to not have enough CIT Ys .
Update dev address by the previous dev .
solhint disable previous line no empty blocks
Admin Controls
solhint disable previous line no empty blocks
Modifiers We use function instead modifiers because modifiers require more bytes Not allow trade while user do deposit or withdraw
not allow call user B ( for a freeze minutes ) if user A not finished operation allow call any user for a first deposit not allow call user B ( for a freeze minutes ) if user A not finished operation allow call any user for a first deposit
allow update oracle price oracle Token Address it ' s fee token address
core function for calculate deposit and withdraw and manager Withdraw return data from Oracle
return all tokens addresses from fund
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
How much system liquidity is provided by this asset
Calculate maxium amount of credit a depositer will get for their token
Calculate how much USD required to borrow exact amount of output token
Calculate maximum amount of output token given amount of USD owner by owner
Calculate amount of token received given exact amount of USD input
Calculate amount of USD required to repay exact amount of token
calculate maximum amount of token repaid given USD input
Calculate amount of token repaid given exact amount of USD input
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
GETTERS
solhint disable code complexity
solhint enable code complexity
log2 for a number that it in [ 1 , 2 )
Only allows to withdraw non core strategy tokens ~ this is over and above normal yield
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
stake visibility is public as overriding LP Token Wrapper ' s stake ( ) function
admin for setting initreward before launch . Only when checkhalve not yet run
Fix bug due to bad user Reward Per Token Paid
Total supply
Get the token balance for account token Owner
Transfer the balance from token owner ' s account to to account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer tokens from the from account to the to account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the from account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for spender to transfer From ( . . . ) tokens from the token owner ' s account . The spender contract function receive Approval ( . . . ) is then executed
Don ' t accept ETH
Using 9 decimals as we ' re square rooting the votes
solhint disable previous line no empty blocks
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner ( Master Chef ) .
Add a new lp to the pool . Can only be called by the owner . XXX DO NOT add the same LP token more than once . Rewards will be messed up if you do .
Update the given pool ' s YFS allocation point . Can only be called by the owner .
Return reward multiplier over the given from to to block .
View function to see pending YF Ss on frontend . pending YFS가 현재 havest되기를 기다리는 코인 function pending YFS ( uint256 pid , address user ) external view returns ( uint256 ) {
Update reward variables for all pools . Be careful of gas spending !
Update reward variables of the given pool to be up to date .
Update reward variables of the given pool to be up to date .
Deposit LP tokens to Master Chef for YFS allocation .
Withdraw LP tokens from Master Chef .
Withdraw without caring about rewards . EMERGENCY ONLY .
Safe YFS transfer function , just in case if rounding error causes pool to not have enough YF Ss .
Update dev address by the previous dev .
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account . The ` spender ` contract function ` receive Approval ( . . . ) ` is then executed
Don ' t accept ETH
Owner can transfer out any accidentally sent ERC20 tokens
solhint disable previous line no empty blocks
solhint disable previous line no empty blocks
wrapper functions to allow testing
Controller only function for creating additional rewards from dust
Withdraw partial funds , normally used with a vault withdrawal
Withdraw all funds , normally used when migrating strategies
Token holders can stake their tokens using this function @ param tokens number of tokens to stake
Owners can send the funds to be distributed to stakers using this function @ param tokens number of tokens to distribute
Private function to register payouts
Stakers can claim their pending rewards using this function
Get the pending rewards of the staker @ param staker the address of the staker
Stakers can un stake the staked tokens using this function @ param tokens the number of tokens to withdraw
Private function to calculate 1 % percentage
Get the number of tokens staked by a staker @ param staker the address of the staker
Get the YF Is balance of the token holder @ param user the address of the token holder
Initial operations
functions
Change the owner of the token contract
Add a new token to the treasury
Select a token to remove from treasury discovery
Add a new furnace to treasury
solhint disable previous line no empty blocks
Custom logic in here for how much the vault allows to be borrowed Sets minimum required on hand to keep small withdrawals cheap
No rebalance implementation for lower fees and faster swaps WETH
No rebalance implementation for lower fees and faster swaps ETH
GETTERS
used by hodler contract to transfer users tokens to it
used by contracts to mint CLERK tokens
solhint disable previous line no empty blocks
@ dev Owner can change amount of admin Fee and direction of funds @ param admin Fee Denominator must be > = 200 . Greater than 200 , will equal 0 . 5 % or less of assets @ param lao Fund Address where the Owner wants the funds to go
NOTE : In Moloch V2 LAO proposal Index ! = = proposal Id
NOTE : requires that delegate key which sent the original proposal cancels , msg . sender = = proposal . proposer
can only ragequit if the latest proposal you voted YES on has been processed
@ dev Returns true if and only if the function is running in the constructor
solhint disable previous line no empty blocks
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = ADMINISTRATIVE FUNCTIONS = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Total supply
Get the token balance for account ` token Owner `
Transfer the balance from token owner ' s account to ` to ` account Owner ' s account must have sufficient balance to transfer 0 value transfers are allowed
Token owner can approve for ` spender ` to transfer From ( . . . ) ` tokens ` from the token owner ' s account https : github . com ethereum EI Ps blob master EIPS eip 20 token standard . md recommends that there are no checks for the approval double spend attack as this should be implemented in user interfaces
Transfer ` tokens ` from the ` from ` account to the ` to ` account The calling account must already have sufficient tokens approve ( . . . ) d for spending from the ` from ` account and From account must have sufficient balance to transfer Spender must have sufficient allowance to transfer 0 value transfers are allowed
Returns the amount of tokens approved by the owner that can be transferred to the spender ' s account
@ dev Returns true if and only if the function is running in the constructor
Empty internal constructor , to prevent people from mistakenly deploying an instance of this contract , which should be used via inheritance .
Mushrooms inherit their strength from their species
@ notice Return token URI for mushroom @ notice URI is determined by species and can be modifed by the owner
TODO : Approved Minters only
TODO : Allowed approved contracts to set lifespan
TODO : We don ' t really have to do this as a newly minted mushroom will set the data
Each mushroom costs 1 10th of the spore rate in spores .
Assumed that caller checks against available funds in vault
Buy back and airdrop
@ notice Creates ` amount ` token to ` to ` . Must only be called by the owner .
solhint disable previous line no empty blocks
